/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.apache.spark.api.php

import java.io.BufferedWriter
import java.nio.ByteOrder
import java.util.{ArrayList => JArrayList}

import net.razorvine.pickle.{Pickler, Unpickler}
import org.apache.spark.api.java.JavaRDD
import org.apache.spark.rdd.RDD
import org.apache.spark.{Logging, SparkException}
import org.phprpc.util.PHPSerializer

import scala.collection.JavaConverters._
import scala.collection.mutable
import scala.util.{Failure, Try}

/** Utilities for serialization / deserialization between PHP and Java, using Pickle. */
private[spark] object SerDeUtil extends Logging {
  // Unpickle array.array generated by Python 2.6
  class ArrayConstructor extends net.razorvine.pickle.objects.ArrayConstructor {
    //  /* Description of types */
    //  static struct arraydescr descriptors[] = {
    //    {'c', sizeof(char), c_getitem, c_setitem},
    //    {'b', sizeof(char), b_getitem, b_setitem},
    //    {'B', sizeof(char), BB_getitem, BB_setitem},
    //    #ifdef Py_USING_UNICODE
    //      {'u', sizeof(Py_UNICODE), u_getitem, u_setitem},
    //    #endif
    //    {'h', sizeof(short), h_getitem, h_setitem},
    //    {'H', sizeof(short), HH_getitem, HH_setitem},
    //    {'i', sizeof(int), i_getitem, i_setitem},
    //    {'I', sizeof(int), II_getitem, II_setitem},
    //    {'l', sizeof(long), l_getitem, l_setitem},
    //    {'L', sizeof(long), LL_getitem, LL_setitem},
    //    {'f', sizeof(float), f_getitem, f_setitem},
    //    {'d', sizeof(double), d_getitem, d_setitem},
    //    {'\0', 0, 0, 0} /* Sentinel */
    //  };
    // TODO: support Py_UNICODE with 2 bytes
    val machineCodes: Map[Char, Int] = if (ByteOrder.nativeOrder().equals(ByteOrder.BIG_ENDIAN)) {
      Map('c' -> 1, 'B' -> 0, 'b' -> 1, 'H' -> 3, 'h' -> 5, 'I' -> 7, 'i' -> 9,
        'L' -> 11, 'l' -> 13, 'f' -> 15, 'd' -> 17, 'u' -> 21
      )
    } else {
      Map('c' -> 1, 'B' -> 0, 'b' -> 1, 'H' -> 2, 'h' -> 4, 'I' -> 6, 'i' -> 8,
        'L' -> 10, 'l' -> 12, 'f' -> 14, 'd' -> 16, 'u' -> 20
      )
    }
    override def construct(args: Array[Object]): Object = {
      if (args.length == 1) {
        construct(args ++ Array(""))
      } else if (args.length == 2 && args(1).isInstanceOf[String]) {
        val typecode = args(0).asInstanceOf[String].charAt(0)
        val data: Array[Byte] = args(1).asInstanceOf[String].getBytes("ISO-8859-1")
        construct(typecode, machineCodes(typecode), data)
      } else {
        super.construct(args)
      }
    }
  }

  private var initialized = false
  // This should be called before trying to unpickle array.array from Python
  // In cluster mode, this should be put in closure
  def initialize(): Unit = {
    synchronized{
      if (!initialized) {
        Unpickler.registerConstructor("array", "array", new ArrayConstructor())
        initialized = true
      }
    }
  }
  initialize()


  /**
   * 在php里直接被调用
   * Convert an RDD of Java objects to Array (no recursive conversions).
   * It is only used by pyspark.sql.
   */
  def toJavaArray(jrdd: JavaRDD[Any]): JavaRDD[Array[_]] = {
    jrdd.rdd.map {
      case a: org.phprpc.util.AssocArray => {
        val   file = new java.io.File("/home/gt/scala_worker4.txt")
        val   fos = new java.io.FileWriter(file,true);
        val   osw = new BufferedWriter(fos);
        val temp = a.toArrayList
        for(i<-0 to temp.size()-1) {
          osw.write("#####" + temp.get(i))
          //                val B = temp.get(i).asInstanceOf[Array[Byte]]
          //                osw.write("#####" + new String(B))
          osw.newLine()
          osw.flush()
        }
        a.toArrayList.toArray
      }

      case objs: JArrayList[_] => {

        val   file = new java.io.File("/home/gt/scala_worker54.txt")
        val   fos = new java.io.FileWriter(file,true);
        val   osw = new BufferedWriter(fos);
        for(i<-0 to objs.size()-1) {
          osw.write("#####" + objs.get(i))
          osw.newLine()
          osw.flush()
        }

        val temp = objs.toArray

        osw.write(">>>>>" + temp)
        osw.newLine()
        osw.flush()

        temp
      }
      case obj if obj.getClass.isArray => {

        val   file = new java.io.File("/home/gt/scala_worker55.txt")
        val   fos = new java.io.FileWriter(file,true);
        val   osw = new BufferedWriter(fos);
        osw.write("#####" + obj)
        val bbb = obj.asInstanceOf[Array[Byte]]
        osw.write("~~~~~" + new String(bbb))
        osw.newLine()
        osw.flush()
        val temp = obj.asInstanceOf[Array[_]].toArray
        temp.foreach(e=>{
          osw.write(">>>>>" + e)
          osw.newLine()
          osw.flush()
        })
        osw.flush()
        temp
      }
    }.toJavaRDD()
  }

  /**
   * Choose batch size based on size of objects
   */
  private[spark] class AutoBatchedPickler(iter: Iterator[Any]) extends Iterator[Array[Byte]] {
    private val p = new PHPSerializer();
    private var batch = 1
    private val buffer = new mutable.ArrayBuffer[Any]

    override def hasNext: Boolean = iter.hasNext

    override def next(): Array[Byte] = {
      while (iter.hasNext && buffer.length < batch) {
        buffer += iter.next()
      }
      val bytes = p.serialize(buffer.toArray)
      val size = bytes.length
      // let  1M < size < 10M
      if (size < 1024 * 1024) {
        batch *= 2
      } else if (size > 1024 * 1024 * 10 && batch > 1) {
        batch /= 2
      }
      buffer.clear()
      bytes
    }
  }

  /**
   * Convert an RDD of Java objects to an RDD of serialized Php objects, that is usable by
   * PySpark.
   */
  private[spark] def javaToPhp(jRDD: JavaRDD[_]): JavaRDD[Array[Byte]] = {
    jRDD.rdd.mapPartitions { iter => new AutoBatchedPickler(iter) }
  }

  /**
   * 在php里直接被调用
   * 我理解是需要把php序列化的数据转成java数据，才能用sql
   * Convert an RDD of serialized Php objects to RDD of objects, that is usable by PySpark.
   */
  def phpToJava(phpRDD: JavaRDD[Array[Byte]], batched: Boolean): JavaRDD[Any] = {
    phpRDD.rdd.mapPartitions { iter =>
      initialize()
      val p = new PHPSerializer();
      iter.flatMap { row =>
        val obj = p.unserialize(row)
        if (batched) {
          obj match {
            case array: Array[Any] => array.toSeq
            case a: org.phprpc.util.AssocArray => {

              val   file = new java.io.File("/home/gt/scala_worker3.txt")
              val   fos = new java.io.FileWriter(file,true);
              val   osw = new BufferedWriter(fos);
              val temp = a.toArrayList
              for(i<-0 to temp.size()-1) {
                osw.write("#####" + temp.get(i))
                val B = temp.get(i).asInstanceOf[Array[Byte]]
                osw.write("#####" + new String(B))
              }
              osw.newLine()
              osw.flush()
              a.toArrayList.asScala
            }
            case _ => obj.asInstanceOf[JArrayList[_]].asScala
          }
        } else {
          Seq(obj)
        }
      }
    }.toJavaRDD()
  }

  private def checkPickle(t: (Any, Any)): (Boolean, Boolean) = {
    val p = new PHPSerializer
    val kt = Try {
      p.serialize(t._1)
    }
    val vt = Try {
      p.serialize(t._2)
    }
    (kt, vt) match {
      case (Failure(kf), Failure(vf)) =>
        logWarning(s"""
               |Failed to pickle Java object as key: ${t._1.getClass.getSimpleName}, falling back
               |to 'toString'. Error: ${kf.getMessage}""".stripMargin)
        logWarning(s"""
               |Failed to pickle Java object as value: ${t._2.getClass.getSimpleName}, falling back
               |to 'toString'. Error: ${vf.getMessage}""".stripMargin)
        (true, true)
      case (Failure(kf), _) =>
        logWarning(s"""
               |Failed to pickle Java object as key: ${t._1.getClass.getSimpleName}, falling back
               |to 'toString'. Error: ${kf.getMessage}""".stripMargin)
        (true, false)
      case (_, Failure(vf)) =>
        logWarning(s"""
               |Failed to pickle Java object as value: ${t._2.getClass.getSimpleName}, falling back
               |to 'toString'. Error: ${vf.getMessage}""".stripMargin)
        (false, true)
      case _ =>
        (false, false)
    }
  }



  def pairRDDToPhp(rdd: RDD[(Any, Any)], batchSize: Integer): RDD[Array[Byte]] = {
    val (keyFailed, valueFailed) = rdd.take(1) match {
      case Array() => (false, false)
      case Array(first) => checkPickle(first)
    }

    rdd.mapPartitions { iter =>
      val cleaned = iter.map { case (k, v) =>
        val key = if (keyFailed) k.toString else k
        val value = if (valueFailed) v.toString else v
        Array[Any](key, value)
      }
      if (batchSize == 0) {
        new AutoBatchedPickler(cleaned)
      } else {
        val p = new PHPSerializer()
        cleaned.grouped(batchSize).map(batched => p.serialize(batched.asJava))
      }
    }
  }

  /**
   * Convert an RDD of serialized PHP tuple (K, V) to RDD[(K, V)].
   */
  def phpToPairRDD[K, V](pyRDD: RDD[Array[Byte]], batched: Boolean): RDD[(K, V)] = {
    def isPair(obj: Any): Boolean = {
      Option(obj.getClass.getComponentType).exists(!_.isPrimitive) &&
        obj.asInstanceOf[Array[_]].length == 2
    }

    val rdd = phpToJava(pyRDD, batched).rdd
    rdd.take(1) match {
      case Array(obj) if isPair(obj) =>
        // we only accept (K, V)
      case Array() =>
        // we also accept empty collections
      case Array(other) => throw new SparkException(
        s"RDD element of type ${other.getClass.getName} cannot be used")
    }
    rdd.map { obj =>
      val arr = obj.asInstanceOf[Array[_]]
      (arr.head.asInstanceOf[K], arr.last.asInstanceOf[V])
    }
  }
}
