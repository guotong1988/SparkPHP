socket_create()成功50577

socket_connect()成功
首次read_int()成功0
首次read_utf()成功5.6
here3C:32:"SuperClosure\SerializableClosure":6176:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":1938:{a:5:{s:4:"code";s:1484:"function ($iterator) use($numPartitions, $partitionFunc, $limit, $outputSerializer) {
    $buckets = array();
    $c = 0;
    $batch = min(10 * $numPartitions, 1000);
    foreach ($iterator as $element) {
        file_put_contents('/home/gt/php_worker9.txt', 'here1' . $element . '
', FILE_APPEND);
    }
    foreach ($iterator as $key => $value) {
        $buckets[$partitionFunc($key) % $numPartitions] = array();
        $buckets[$partitionFunc($key) % $numPartitions][$key] = $value;
        $c++;
        if ($c % 1000 == 0 && memory_get_usage() / 1024 / 1024 > $limit || $c > $batch) {
            $n = sizeof($buckets);
            $size = 0;
            $result = array();
            foreach ($buckets as $key2 => $value2) {
                #value是一个array
                array_push($result, serialize($key2));
                $d = serialize($value2);
                unset($value2);
                array_push($result, $d);
                $size += strlen($d);
            }
            $avg = intval($size / $n) >> 20;
            # let 1M < avg < 10M
            if ($avg < 1) {
                $batch *= 1.5;
            } elseif ($avg > 10) {
                $batch = max(intval($batch / 1.5), 1);
            }
            $c = 0;
            return $result;
        }
    }
    $result = array();
    foreach ($buckets as $key => $value) {
        array_push($result, serialize($key));
        array_push($result, serialize($value));
    }
    return $result;
};";s:7:"context";a:3:{s:13:"numPartitions";i:2;s:13:"partitionFunc";C:32:"SuperClosure\SerializableClosure":240:{a:5:{s:4:"code";s:137:"function ($x) {
    if ($x == null) {
        return 0;
    }
    $h = null;
    if (is_array($x)) {
    }
    return hash('md5', $x);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:5:"limit";i:256;}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":3874:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":1619:{a:5:{s:4:"code";s:67:"function ($split, $iterator) use($f) {
    return $f($iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":1395:{a:5:{s:4:"code";s:332:"function ($iterator) use($memory, $serializer, $createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc) {
    $agg = new \aggregator($createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc);
    $merger = new \ExternalMerger($agg, $memory * 0.9, $serializer);
    $merger->mergeValues($iterator);
    return $merger->items();
};";s:7:"context";a:5:{s:6:"memory";i:512;s:10:"serializer";O:23:"auto_batched_serializer":10:{s:9:"best_size";i:65536;s:20:"UNLIMITED_BATCH_SIZE";i:-1;s:18:"UNKNOWN_BATCH_SIZE";i:0;s:10:"serializer";N;s:10:"batch_size";i:0;s:19:"END_OF_DATA_SECTION";i:-1;s:20:"PHP_EXCEPTION_THROWN";i:-2;s:11:"TIMING_DATA";i:-3;s:13:"END_OF_STREAM";i:-4;s:4:"NULL";i:-5;}s:18:"createCombinerFunc";C:32:"SuperClosure\SerializableClosure":135:{a:5:{s:4:"code";s:33:"function ($x) {
    return $x;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"mergeValueFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}s:18:"mergeCombinersFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1891:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":369:{a:5:{s:4:"code";s:76:"function ($any, $iterator) use($f) {
    return array_map($f, $iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":137:{a:5:{s:4:"code";s:43:"function ($x) {
    return array($x, 1);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1159:{a:5:{s:4:"code";s:836:"function ($split, $iterator) use($f) {
    $sub_is_array = False;
    foreach ($iterator as $key => $value) {
        $temp = $f($value);
        if (is_array($temp)) {
            $sub_is_array = True;
            break;
        }
    }
    if ($sub_is_array) {
        $result = array();
        file_put_contents('/home/gt/php_worker7.txt', 'here1
', FILE_APPEND);
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            if (is_array($temp)) {
                foreach ($temp as $e) {
                    array_push($result, $e);
                }
            }
        }
        return $result;
    } else {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            array_push($result, $temp);
        }
        return $result;
    }
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":166:{a:5:{s:4:"code";s:72:"function ($line) {
    $temp = explode(' ', $line);
    return $temp;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}
here5
here6test test test test try try try 
socket_create()成功58527

socket_connect()成功
首次read_int()成功1
首次read_utf()成功5.6
here3C:32:"SuperClosure\SerializableClosure":6176:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":1938:{a:5:{s:4:"code";s:1484:"function ($iterator) use($numPartitions, $partitionFunc, $limit, $outputSerializer) {
    $buckets = array();
    $c = 0;
    $batch = min(10 * $numPartitions, 1000);
    foreach ($iterator as $element) {
        file_put_contents('/home/gt/php_worker9.txt', 'here1' . $element . '
', FILE_APPEND);
    }
    foreach ($iterator as $key => $value) {
        $buckets[$partitionFunc($key) % $numPartitions] = array();
        $buckets[$partitionFunc($key) % $numPartitions][$key] = $value;
        $c++;
        if ($c % 1000 == 0 && memory_get_usage() / 1024 / 1024 > $limit || $c > $batch) {
            $n = sizeof($buckets);
            $size = 0;
            $result = array();
            foreach ($buckets as $key2 => $value2) {
                #value是一个array
                array_push($result, serialize($key2));
                $d = serialize($value2);
                unset($value2);
                array_push($result, $d);
                $size += strlen($d);
            }
            $avg = intval($size / $n) >> 20;
            # let 1M < avg < 10M
            if ($avg < 1) {
                $batch *= 1.5;
            } elseif ($avg > 10) {
                $batch = max(intval($batch / 1.5), 1);
            }
            $c = 0;
            return $result;
        }
    }
    $result = array();
    foreach ($buckets as $key => $value) {
        array_push($result, serialize($key));
        array_push($result, serialize($value));
    }
    return $result;
};";s:7:"context";a:3:{s:13:"numPartitions";i:2;s:13:"partitionFunc";C:32:"SuperClosure\SerializableClosure":240:{a:5:{s:4:"code";s:137:"function ($x) {
    if ($x == null) {
        return 0;
    }
    $h = null;
    if (is_array($x)) {
    }
    return hash('md5', $x);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:5:"limit";i:256;}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":3874:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":1619:{a:5:{s:4:"code";s:67:"function ($split, $iterator) use($f) {
    return $f($iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":1395:{a:5:{s:4:"code";s:332:"function ($iterator) use($memory, $serializer, $createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc) {
    $agg = new \aggregator($createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc);
    $merger = new \ExternalMerger($agg, $memory * 0.9, $serializer);
    $merger->mergeValues($iterator);
    return $merger->items();
};";s:7:"context";a:5:{s:6:"memory";i:512;s:10:"serializer";O:23:"auto_batched_serializer":10:{s:9:"best_size";i:65536;s:20:"UNLIMITED_BATCH_SIZE";i:-1;s:18:"UNKNOWN_BATCH_SIZE";i:0;s:10:"serializer";N;s:10:"batch_size";i:0;s:19:"END_OF_DATA_SECTION";i:-1;s:20:"PHP_EXCEPTION_THROWN";i:-2;s:11:"TIMING_DATA";i:-3;s:13:"END_OF_STREAM";i:-4;s:4:"NULL";i:-5;}s:18:"createCombinerFunc";C:32:"SuperClosure\SerializableClosure":135:{a:5:{s:4:"code";s:33:"function ($x) {
    return $x;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"mergeValueFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}s:18:"mergeCombinersFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1891:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":369:{a:5:{s:4:"code";s:76:"function ($any, $iterator) use($f) {
    return array_map($f, $iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":137:{a:5:{s:4:"code";s:43:"function ($x) {
    return array($x, 1);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1159:{a:5:{s:4:"code";s:836:"function ($split, $iterator) use($f) {
    $sub_is_array = False;
    foreach ($iterator as $key => $value) {
        $temp = $f($value);
        if (is_array($temp)) {
            $sub_is_array = True;
            break;
        }
    }
    if ($sub_is_array) {
        $result = array();
        file_put_contents('/home/gt/php_worker7.txt', 'here1
', FILE_APPEND);
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            if (is_array($temp)) {
                foreach ($temp as $e) {
                    array_push($result, $e);
                }
            }
        }
        return $result;
    } else {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            array_push($result, $temp);
        }
        return $result;
    }
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":166:{a:5:{s:4:"code";s:72:"function ($line) {
    $temp = explode(' ', $line);
    return $temp;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}
here5
here6do do do 
socket_create()成功54650

socket_connect()成功
首次read_int()成功0
首次read_utf()成功5.6
here3C:32:"SuperClosure\SerializableClosure":6176:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":1938:{a:5:{s:4:"code";s:1484:"function ($iterator) use($numPartitions, $partitionFunc, $limit, $outputSerializer) {
    $buckets = array();
    $c = 0;
    $batch = min(10 * $numPartitions, 1000);
    foreach ($iterator as $element) {
        file_put_contents('/home/gt/php_worker9.txt', 'here1' . $element . '
', FILE_APPEND);
    }
    foreach ($iterator as $key => $value) {
        $buckets[$partitionFunc($key) % $numPartitions] = array();
        $buckets[$partitionFunc($key) % $numPartitions][$key] = $value;
        $c++;
        if ($c % 1000 == 0 && memory_get_usage() / 1024 / 1024 > $limit || $c > $batch) {
            $n = sizeof($buckets);
            $size = 0;
            $result = array();
            foreach ($buckets as $key2 => $value2) {
                #value是一个array
                array_push($result, serialize($key2));
                $d = serialize($value2);
                unset($value2);
                array_push($result, $d);
                $size += strlen($d);
            }
            $avg = intval($size / $n) >> 20;
            # let 1M < avg < 10M
            if ($avg < 1) {
                $batch *= 1.5;
            } elseif ($avg > 10) {
                $batch = max(intval($batch / 1.5), 1);
            }
            $c = 0;
            return $result;
        }
    }
    $result = array();
    foreach ($buckets as $key => $value) {
        array_push($result, serialize($key));
        array_push($result, serialize($value));
    }
    return $result;
};";s:7:"context";a:3:{s:13:"numPartitions";i:2;s:13:"partitionFunc";C:32:"SuperClosure\SerializableClosure":240:{a:5:{s:4:"code";s:137:"function ($x) {
    if ($x == null) {
        return 0;
    }
    $h = null;
    if (is_array($x)) {
    }
    return hash('md5', $x);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:5:"limit";i:256;}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":3874:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":1619:{a:5:{s:4:"code";s:67:"function ($split, $iterator) use($f) {
    return $f($iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":1395:{a:5:{s:4:"code";s:332:"function ($iterator) use($memory, $serializer, $createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc) {
    $agg = new \aggregator($createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc);
    $merger = new \ExternalMerger($agg, $memory * 0.9, $serializer);
    $merger->mergeValues($iterator);
    return $merger->items();
};";s:7:"context";a:5:{s:6:"memory";i:512;s:10:"serializer";O:23:"auto_batched_serializer":10:{s:9:"best_size";i:65536;s:20:"UNLIMITED_BATCH_SIZE";i:-1;s:18:"UNKNOWN_BATCH_SIZE";i:0;s:10:"serializer";N;s:10:"batch_size";i:0;s:19:"END_OF_DATA_SECTION";i:-1;s:20:"PHP_EXCEPTION_THROWN";i:-2;s:11:"TIMING_DATA";i:-3;s:13:"END_OF_STREAM";i:-4;s:4:"NULL";i:-5;}s:18:"createCombinerFunc";C:32:"SuperClosure\SerializableClosure":135:{a:5:{s:4:"code";s:33:"function ($x) {
    return $x;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"mergeValueFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}s:18:"mergeCombinersFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1891:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":369:{a:5:{s:4:"code";s:76:"function ($any, $iterator) use($f) {
    return array_map($f, $iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":137:{a:5:{s:4:"code";s:43:"function ($x) {
    return array($x, 1);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1159:{a:5:{s:4:"code";s:836:"function ($split, $iterator) use($f) {
    $sub_is_array = False;
    foreach ($iterator as $key => $value) {
        $temp = $f($value);
        if (is_array($temp)) {
            $sub_is_array = True;
            break;
        }
    }
    if ($sub_is_array) {
        $result = array();
        file_put_contents('/home/gt/php_worker7.txt', 'here1
', FILE_APPEND);
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            if (is_array($temp)) {
                foreach ($temp as $e) {
                    array_push($result, $e);
                }
            }
        }
        return $result;
    } else {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            array_push($result, $temp);
        }
        return $result;
    }
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":166:{a:5:{s:4:"code";s:72:"function ($line) {
    $temp = explode(' ', $line);
    return $temp;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}
here5
here6test test test test try try try 
socket_create()成功57079

socket_connect()成功
首次read_int()成功1
首次read_utf()成功5.6
here3C:32:"SuperClosure\SerializableClosure":6176:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":1938:{a:5:{s:4:"code";s:1484:"function ($iterator) use($numPartitions, $partitionFunc, $limit, $outputSerializer) {
    $buckets = array();
    $c = 0;
    $batch = min(10 * $numPartitions, 1000);
    foreach ($iterator as $element) {
        file_put_contents('/home/gt/php_worker9.txt', 'here1' . $element . '
', FILE_APPEND);
    }
    foreach ($iterator as $key => $value) {
        $buckets[$partitionFunc($key) % $numPartitions] = array();
        $buckets[$partitionFunc($key) % $numPartitions][$key] = $value;
        $c++;
        if ($c % 1000 == 0 && memory_get_usage() / 1024 / 1024 > $limit || $c > $batch) {
            $n = sizeof($buckets);
            $size = 0;
            $result = array();
            foreach ($buckets as $key2 => $value2) {
                #value是一个array
                array_push($result, serialize($key2));
                $d = serialize($value2);
                unset($value2);
                array_push($result, $d);
                $size += strlen($d);
            }
            $avg = intval($size / $n) >> 20;
            # let 1M < avg < 10M
            if ($avg < 1) {
                $batch *= 1.5;
            } elseif ($avg > 10) {
                $batch = max(intval($batch / 1.5), 1);
            }
            $c = 0;
            return $result;
        }
    }
    $result = array();
    foreach ($buckets as $key => $value) {
        array_push($result, serialize($key));
        array_push($result, serialize($value));
    }
    return $result;
};";s:7:"context";a:3:{s:13:"numPartitions";i:2;s:13:"partitionFunc";C:32:"SuperClosure\SerializableClosure":240:{a:5:{s:4:"code";s:137:"function ($x) {
    if ($x == null) {
        return 0;
    }
    $h = null;
    if (is_array($x)) {
    }
    return hash('md5', $x);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:5:"limit";i:256;}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":3874:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":1619:{a:5:{s:4:"code";s:67:"function ($split, $iterator) use($f) {
    return $f($iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":1395:{a:5:{s:4:"code";s:332:"function ($iterator) use($memory, $serializer, $createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc) {
    $agg = new \aggregator($createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc);
    $merger = new \ExternalMerger($agg, $memory * 0.9, $serializer);
    $merger->mergeValues($iterator);
    return $merger->items();
};";s:7:"context";a:5:{s:6:"memory";i:512;s:10:"serializer";O:23:"auto_batched_serializer":10:{s:9:"best_size";i:65536;s:20:"UNLIMITED_BATCH_SIZE";i:-1;s:18:"UNKNOWN_BATCH_SIZE";i:0;s:10:"serializer";N;s:10:"batch_size";i:0;s:19:"END_OF_DATA_SECTION";i:-1;s:20:"PHP_EXCEPTION_THROWN";i:-2;s:11:"TIMING_DATA";i:-3;s:13:"END_OF_STREAM";i:-4;s:4:"NULL";i:-5;}s:18:"createCombinerFunc";C:32:"SuperClosure\SerializableClosure":135:{a:5:{s:4:"code";s:33:"function ($x) {
    return $x;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"mergeValueFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}s:18:"mergeCombinersFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1891:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":369:{a:5:{s:4:"code";s:76:"function ($any, $iterator) use($f) {
    return array_map($f, $iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":137:{a:5:{s:4:"code";s:43:"function ($x) {
    return array($x, 1);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1159:{a:5:{s:4:"code";s:836:"function ($split, $iterator) use($f) {
    $sub_is_array = False;
    foreach ($iterator as $key => $value) {
        $temp = $f($value);
        if (is_array($temp)) {
            $sub_is_array = True;
            break;
        }
    }
    if ($sub_is_array) {
        $result = array();
        file_put_contents('/home/gt/php_worker7.txt', 'here1
', FILE_APPEND);
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            if (is_array($temp)) {
                foreach ($temp as $e) {
                    array_push($result, $e);
                }
            }
        }
        return $result;
    } else {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            array_push($result, $temp);
        }
        return $result;
    }
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":166:{a:5:{s:4:"code";s:72:"function ($line) {
    $temp = explode(' ', $line);
    return $temp;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}
here5
here6do do do 
socket_create()成功37294

socket_connect()成功
首次read_int()成功0
首次read_utf()成功5.6
here3C:32:"SuperClosure\SerializableClosure":6176:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":1938:{a:5:{s:4:"code";s:1484:"function ($iterator) use($numPartitions, $partitionFunc, $limit, $outputSerializer) {
    $buckets = array();
    $c = 0;
    $batch = min(10 * $numPartitions, 1000);
    foreach ($iterator as $element) {
        file_put_contents('/home/gt/php_worker9.txt', 'here1' . $element . '
', FILE_APPEND);
    }
    foreach ($iterator as $key => $value) {
        $buckets[$partitionFunc($key) % $numPartitions] = array();
        $buckets[$partitionFunc($key) % $numPartitions][$key] = $value;
        $c++;
        if ($c % 1000 == 0 && memory_get_usage() / 1024 / 1024 > $limit || $c > $batch) {
            $n = sizeof($buckets);
            $size = 0;
            $result = array();
            foreach ($buckets as $key2 => $value2) {
                #value是一个array
                array_push($result, serialize($key2));
                $d = serialize($value2);
                unset($value2);
                array_push($result, $d);
                $size += strlen($d);
            }
            $avg = intval($size / $n) >> 20;
            # let 1M < avg < 10M
            if ($avg < 1) {
                $batch *= 1.5;
            } elseif ($avg > 10) {
                $batch = max(intval($batch / 1.5), 1);
            }
            $c = 0;
            return $result;
        }
    }
    $result = array();
    foreach ($buckets as $key => $value) {
        array_push($result, serialize($key));
        array_push($result, serialize($value));
    }
    return $result;
};";s:7:"context";a:3:{s:13:"numPartitions";i:2;s:13:"partitionFunc";C:32:"SuperClosure\SerializableClosure":240:{a:5:{s:4:"code";s:137:"function ($x) {
    if ($x == null) {
        return 0;
    }
    $h = null;
    if (is_array($x)) {
    }
    return hash('md5', $x);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:5:"limit";i:256;}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":3874:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":1619:{a:5:{s:4:"code";s:67:"function ($split, $iterator) use($f) {
    return $f($iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":1395:{a:5:{s:4:"code";s:332:"function ($iterator) use($memory, $serializer, $createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc) {
    $agg = new \aggregator($createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc);
    $merger = new \ExternalMerger($agg, $memory * 0.9, $serializer);
    $merger->mergeValues($iterator);
    return $merger->items();
};";s:7:"context";a:5:{s:6:"memory";i:512;s:10:"serializer";O:23:"auto_batched_serializer":10:{s:9:"best_size";i:65536;s:20:"UNLIMITED_BATCH_SIZE";i:-1;s:18:"UNKNOWN_BATCH_SIZE";i:0;s:10:"serializer";N;s:10:"batch_size";i:0;s:19:"END_OF_DATA_SECTION";i:-1;s:20:"PHP_EXCEPTION_THROWN";i:-2;s:11:"TIMING_DATA";i:-3;s:13:"END_OF_STREAM";i:-4;s:4:"NULL";i:-5;}s:18:"createCombinerFunc";C:32:"SuperClosure\SerializableClosure":135:{a:5:{s:4:"code";s:33:"function ($x) {
    return $x;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"mergeValueFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}s:18:"mergeCombinersFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1891:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":369:{a:5:{s:4:"code";s:76:"function ($any, $iterator) use($f) {
    return array_map($f, $iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":137:{a:5:{s:4:"code";s:43:"function ($x) {
    return array($x, 1);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1159:{a:5:{s:4:"code";s:836:"function ($split, $iterator) use($f) {
    $sub_is_array = False;
    foreach ($iterator as $key => $value) {
        $temp = $f($value);
        if (is_array($temp)) {
            $sub_is_array = True;
            break;
        }
    }
    if ($sub_is_array) {
        $result = array();
        file_put_contents('/home/gt/php_worker7.txt', 'here1
', FILE_APPEND);
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            if (is_array($temp)) {
                foreach ($temp as $e) {
                    array_push($result, $e);
                }
            }
        }
        return $result;
    } else {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            array_push($result, $temp);
        }
        return $result;
    }
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":166:{a:5:{s:4:"code";s:72:"function ($line) {
    $temp = explode(' ', $line);
    return $temp;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}
here5
here6test test test test try try try 
socket_create()成功36874

socket_connect()成功
首次read_int()成功1
首次read_utf()成功5.6
here3C:32:"SuperClosure\SerializableClosure":6176:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":1938:{a:5:{s:4:"code";s:1484:"function ($iterator) use($numPartitions, $partitionFunc, $limit, $outputSerializer) {
    $buckets = array();
    $c = 0;
    $batch = min(10 * $numPartitions, 1000);
    foreach ($iterator as $element) {
        file_put_contents('/home/gt/php_worker9.txt', 'here1' . $element . '
', FILE_APPEND);
    }
    foreach ($iterator as $key => $value) {
        $buckets[$partitionFunc($key) % $numPartitions] = array();
        $buckets[$partitionFunc($key) % $numPartitions][$key] = $value;
        $c++;
        if ($c % 1000 == 0 && memory_get_usage() / 1024 / 1024 > $limit || $c > $batch) {
            $n = sizeof($buckets);
            $size = 0;
            $result = array();
            foreach ($buckets as $key2 => $value2) {
                #value是一个array
                array_push($result, serialize($key2));
                $d = serialize($value2);
                unset($value2);
                array_push($result, $d);
                $size += strlen($d);
            }
            $avg = intval($size / $n) >> 20;
            # let 1M < avg < 10M
            if ($avg < 1) {
                $batch *= 1.5;
            } elseif ($avg > 10) {
                $batch = max(intval($batch / 1.5), 1);
            }
            $c = 0;
            return $result;
        }
    }
    $result = array();
    foreach ($buckets as $key => $value) {
        array_push($result, serialize($key));
        array_push($result, serialize($value));
    }
    return $result;
};";s:7:"context";a:3:{s:13:"numPartitions";i:2;s:13:"partitionFunc";C:32:"SuperClosure\SerializableClosure":240:{a:5:{s:4:"code";s:137:"function ($x) {
    if ($x == null) {
        return 0;
    }
    $h = null;
    if (is_array($x)) {
    }
    return hash('md5', $x);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:5:"limit";i:256;}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":3874:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":1619:{a:5:{s:4:"code";s:67:"function ($split, $iterator) use($f) {
    return $f($iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":1395:{a:5:{s:4:"code";s:332:"function ($iterator) use($memory, $serializer, $createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc) {
    $agg = new \aggregator($createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc);
    $merger = new \ExternalMerger($agg, $memory * 0.9, $serializer);
    $merger->mergeValues($iterator);
    return $merger->items();
};";s:7:"context";a:5:{s:6:"memory";i:512;s:10:"serializer";O:23:"auto_batched_serializer":10:{s:9:"best_size";i:65536;s:20:"UNLIMITED_BATCH_SIZE";i:-1;s:18:"UNKNOWN_BATCH_SIZE";i:0;s:10:"serializer";N;s:10:"batch_size";i:0;s:19:"END_OF_DATA_SECTION";i:-1;s:20:"PHP_EXCEPTION_THROWN";i:-2;s:11:"TIMING_DATA";i:-3;s:13:"END_OF_STREAM";i:-4;s:4:"NULL";i:-5;}s:18:"createCombinerFunc";C:32:"SuperClosure\SerializableClosure":135:{a:5:{s:4:"code";s:33:"function ($x) {
    return $x;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"mergeValueFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}s:18:"mergeCombinersFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1891:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":369:{a:5:{s:4:"code";s:76:"function ($any, $iterator) use($f) {
    return array_map($f, $iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":137:{a:5:{s:4:"code";s:43:"function ($x) {
    return array($x, 1);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1159:{a:5:{s:4:"code";s:836:"function ($split, $iterator) use($f) {
    $sub_is_array = False;
    foreach ($iterator as $key => $value) {
        $temp = $f($value);
        if (is_array($temp)) {
            $sub_is_array = True;
            break;
        }
    }
    if ($sub_is_array) {
        $result = array();
        file_put_contents('/home/gt/php_worker7.txt', 'here1
', FILE_APPEND);
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            if (is_array($temp)) {
                foreach ($temp as $e) {
                    array_push($result, $e);
                }
            }
        }
        return $result;
    } else {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            array_push($result, $temp);
        }
        return $result;
    }
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":166:{a:5:{s:4:"code";s:72:"function ($line) {
    $temp = explode(' ', $line);
    return $temp;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}
here5
here6do do do 
socket_create()成功36532

socket_connect()成功
首次read_int()成功0
首次read_utf()成功5.6
here3C:32:"SuperClosure\SerializableClosure":6176:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":1938:{a:5:{s:4:"code";s:1484:"function ($iterator) use($numPartitions, $partitionFunc, $limit, $outputSerializer) {
    $buckets = array();
    $c = 0;
    $batch = min(10 * $numPartitions, 1000);
    foreach ($iterator as $element) {
        file_put_contents('/home/gt/php_worker9.txt', 'here1' . $element . '
', FILE_APPEND);
    }
    foreach ($iterator as $key => $value) {
        $buckets[$partitionFunc($key) % $numPartitions] = array();
        $buckets[$partitionFunc($key) % $numPartitions][$key] = $value;
        $c++;
        if ($c % 1000 == 0 && memory_get_usage() / 1024 / 1024 > $limit || $c > $batch) {
            $n = sizeof($buckets);
            $size = 0;
            $result = array();
            foreach ($buckets as $key2 => $value2) {
                #value是一个array
                array_push($result, serialize($key2));
                $d = serialize($value2);
                unset($value2);
                array_push($result, $d);
                $size += strlen($d);
            }
            $avg = intval($size / $n) >> 20;
            # let 1M < avg < 10M
            if ($avg < 1) {
                $batch *= 1.5;
            } elseif ($avg > 10) {
                $batch = max(intval($batch / 1.5), 1);
            }
            $c = 0;
            return $result;
        }
    }
    $result = array();
    foreach ($buckets as $key => $value) {
        array_push($result, serialize($key));
        array_push($result, serialize($value));
    }
    return $result;
};";s:7:"context";a:3:{s:13:"numPartitions";i:2;s:13:"partitionFunc";C:32:"SuperClosure\SerializableClosure":240:{a:5:{s:4:"code";s:137:"function ($x) {
    if ($x == null) {
        return 0;
    }
    $h = null;
    if (is_array($x)) {
    }
    return hash('md5', $x);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:5:"limit";i:256;}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":3874:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":1619:{a:5:{s:4:"code";s:67:"function ($split, $iterator) use($f) {
    return $f($iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":1395:{a:5:{s:4:"code";s:332:"function ($iterator) use($memory, $serializer, $createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc) {
    $agg = new \aggregator($createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc);
    $merger = new \ExternalMerger($agg, $memory * 0.9, $serializer);
    $merger->mergeValues($iterator);
    return $merger->items();
};";s:7:"context";a:5:{s:6:"memory";i:512;s:10:"serializer";O:23:"auto_batched_serializer":10:{s:9:"best_size";i:65536;s:20:"UNLIMITED_BATCH_SIZE";i:-1;s:18:"UNKNOWN_BATCH_SIZE";i:0;s:10:"serializer";N;s:10:"batch_size";i:0;s:19:"END_OF_DATA_SECTION";i:-1;s:20:"PHP_EXCEPTION_THROWN";i:-2;s:11:"TIMING_DATA";i:-3;s:13:"END_OF_STREAM";i:-4;s:4:"NULL";i:-5;}s:18:"createCombinerFunc";C:32:"SuperClosure\SerializableClosure":135:{a:5:{s:4:"code";s:33:"function ($x) {
    return $x;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"mergeValueFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}s:18:"mergeCombinersFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1891:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":369:{a:5:{s:4:"code";s:76:"function ($any, $iterator) use($f) {
    return array_map($f, $iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":137:{a:5:{s:4:"code";s:43:"function ($x) {
    return array($x, 1);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1159:{a:5:{s:4:"code";s:836:"function ($split, $iterator) use($f) {
    $sub_is_array = False;
    foreach ($iterator as $key => $value) {
        $temp = $f($value);
        if (is_array($temp)) {
            $sub_is_array = True;
            break;
        }
    }
    if ($sub_is_array) {
        $result = array();
        file_put_contents('/home/gt/php_worker7.txt', 'here1
', FILE_APPEND);
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            if (is_array($temp)) {
                foreach ($temp as $e) {
                    array_push($result, $e);
                }
            }
        }
        return $result;
    } else {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            array_push($result, $temp);
        }
        return $result;
    }
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":166:{a:5:{s:4:"code";s:72:"function ($line) {
    $temp = explode(' ', $line);
    return $temp;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}
here5
here6test test test test try try try 
socket_create()成功48375

socket_connect()成功
首次read_int()成功1
首次read_utf()成功5.6
here3C:32:"SuperClosure\SerializableClosure":6176:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":1938:{a:5:{s:4:"code";s:1484:"function ($iterator) use($numPartitions, $partitionFunc, $limit, $outputSerializer) {
    $buckets = array();
    $c = 0;
    $batch = min(10 * $numPartitions, 1000);
    foreach ($iterator as $element) {
        file_put_contents('/home/gt/php_worker9.txt', 'here1' . $element . '
', FILE_APPEND);
    }
    foreach ($iterator as $key => $value) {
        $buckets[$partitionFunc($key) % $numPartitions] = array();
        $buckets[$partitionFunc($key) % $numPartitions][$key] = $value;
        $c++;
        if ($c % 1000 == 0 && memory_get_usage() / 1024 / 1024 > $limit || $c > $batch) {
            $n = sizeof($buckets);
            $size = 0;
            $result = array();
            foreach ($buckets as $key2 => $value2) {
                #value是一个array
                array_push($result, serialize($key2));
                $d = serialize($value2);
                unset($value2);
                array_push($result, $d);
                $size += strlen($d);
            }
            $avg = intval($size / $n) >> 20;
            # let 1M < avg < 10M
            if ($avg < 1) {
                $batch *= 1.5;
            } elseif ($avg > 10) {
                $batch = max(intval($batch / 1.5), 1);
            }
            $c = 0;
            return $result;
        }
    }
    $result = array();
    foreach ($buckets as $key => $value) {
        array_push($result, serialize($key));
        array_push($result, serialize($value));
    }
    return $result;
};";s:7:"context";a:3:{s:13:"numPartitions";i:2;s:13:"partitionFunc";C:32:"SuperClosure\SerializableClosure":240:{a:5:{s:4:"code";s:137:"function ($x) {
    if ($x == null) {
        return 0;
    }
    $h = null;
    if (is_array($x)) {
    }
    return hash('md5', $x);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:5:"limit";i:256;}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":3874:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":1619:{a:5:{s:4:"code";s:67:"function ($split, $iterator) use($f) {
    return $f($iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":1395:{a:5:{s:4:"code";s:332:"function ($iterator) use($memory, $serializer, $createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc) {
    $agg = new \aggregator($createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc);
    $merger = new \ExternalMerger($agg, $memory * 0.9, $serializer);
    $merger->mergeValues($iterator);
    return $merger->items();
};";s:7:"context";a:5:{s:6:"memory";i:512;s:10:"serializer";O:23:"auto_batched_serializer":10:{s:9:"best_size";i:65536;s:20:"UNLIMITED_BATCH_SIZE";i:-1;s:18:"UNKNOWN_BATCH_SIZE";i:0;s:10:"serializer";N;s:10:"batch_size";i:0;s:19:"END_OF_DATA_SECTION";i:-1;s:20:"PHP_EXCEPTION_THROWN";i:-2;s:11:"TIMING_DATA";i:-3;s:13:"END_OF_STREAM";i:-4;s:4:"NULL";i:-5;}s:18:"createCombinerFunc";C:32:"SuperClosure\SerializableClosure":135:{a:5:{s:4:"code";s:33:"function ($x) {
    return $x;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"mergeValueFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}s:18:"mergeCombinersFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1891:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":369:{a:5:{s:4:"code";s:76:"function ($any, $iterator) use($f) {
    return array_map($f, $iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":137:{a:5:{s:4:"code";s:43:"function ($x) {
    return array($x, 1);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1159:{a:5:{s:4:"code";s:836:"function ($split, $iterator) use($f) {
    $sub_is_array = False;
    foreach ($iterator as $key => $value) {
        $temp = $f($value);
        if (is_array($temp)) {
            $sub_is_array = True;
            break;
        }
    }
    if ($sub_is_array) {
        $result = array();
        file_put_contents('/home/gt/php_worker7.txt', 'here1
', FILE_APPEND);
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            if (is_array($temp)) {
                foreach ($temp as $e) {
                    array_push($result, $e);
                }
            }
        }
        return $result;
    } else {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            array_push($result, $temp);
        }
        return $result;
    }
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":166:{a:5:{s:4:"code";s:72:"function ($line) {
    $temp = explode(' ', $line);
    return $temp;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}
here5
here6do do do 
socket_create()成功49485

socket_connect()成功
socket_create()成功34891

socket_connect()成功
首次read_int()成功0
首次read_utf()成功5.6
首次read_int()成功1
首次read_utf()成功5.6
here3C:32:"SuperClosure\SerializableClosure":6176:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":1938:{a:5:{s:4:"code";s:1484:"function ($iterator) use($numPartitions, $partitionFunc, $limit, $outputSerializer) {
    $buckets = array();
    $c = 0;
    $batch = min(10 * $numPartitions, 1000);
    foreach ($iterator as $element) {
        file_put_contents('/home/gt/php_worker9.txt', 'here1' . $element . '
', FILE_APPEND);
    }
    foreach ($iterator as $key => $value) {
        $buckets[$partitionFunc($key) % $numPartitions] = array();
        $buckets[$partitionFunc($key) % $numPartitions][$key] = $value;
        $c++;
        if ($c % 1000 == 0 && memory_get_usage() / 1024 / 1024 > $limit || $c > $batch) {
            $n = sizeof($buckets);
            $size = 0;
            $result = array();
            foreach ($buckets as $key2 => $value2) {
                #value是一个array
                array_push($result, serialize($key2));
                $d = serialize($value2);
                unset($value2);
                array_push($result, $d);
                $size += strlen($d);
            }
            $avg = intval($size / $n) >> 20;
            # let 1M < avg < 10M
            if ($avg < 1) {
                $batch *= 1.5;
            } elseif ($avg > 10) {
                $batch = max(intval($batch / 1.5), 1);
            }
            $c = 0;
            return $result;
        }
    }
    $result = array();
    foreach ($buckets as $key => $value) {
        array_push($result, serialize($key));
        array_push($result, serialize($value));
    }
    return $result;
};";s:7:"context";a:3:{s:13:"numPartitions";i:2;s:13:"partitionFunc";C:32:"SuperClosure\SerializableClosure":240:{a:5:{s:4:"code";s:137:"function ($x) {
    if ($x == null) {
        return 0;
    }
    $h = null;
    if (is_array($x)) {
    }
    return hash('md5', $x);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:5:"limit";i:256;}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":3874:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":1619:{a:5:{s:4:"code";s:67:"function ($split, $iterator) use($f) {
    return $f($iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":1395:{a:5:{s:4:"code";s:332:"function ($iterator) use($memory, $serializer, $createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc) {
    $agg = new \aggregator($createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc);
    $merger = new \ExternalMerger($agg, $memory * 0.9, $serializer);
    $merger->mergeValues($iterator);
    return $merger->items();
};";s:7:"context";a:5:{s:6:"memory";i:512;s:10:"serializer";O:23:"auto_batched_serializer":10:{s:9:"best_size";i:65536;s:20:"UNLIMITED_BATCH_SIZE";i:-1;s:18:"UNKNOWN_BATCH_SIZE";i:0;s:10:"serializer";N;s:10:"batch_size";i:0;s:19:"END_OF_DATA_SECTION";i:-1;s:20:"PHP_EXCEPTION_THROWN";i:-2;s:11:"TIMING_DATA";i:-3;s:13:"END_OF_STREAM";i:-4;s:4:"NULL";i:-5;}s:18:"createCombinerFunc";C:32:"SuperClosure\SerializableClosure":135:{a:5:{s:4:"code";s:33:"function ($x) {
    return $x;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"mergeValueFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}s:18:"mergeCombinersFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1891:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":369:{a:5:{s:4:"code";s:76:"function ($any, $iterator) use($f) {
    return array_map($f, $iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":137:{a:5:{s:4:"code";s:43:"function ($x) {
    return array($x, 1);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1159:{a:5:{s:4:"code";s:836:"function ($split, $iterator) use($f) {
    $sub_is_array = False;
    foreach ($iterator as $key => $value) {
        $temp = $f($value);
        if (is_array($temp)) {
            $sub_is_array = True;
            break;
        }
    }
    if ($sub_is_array) {
        $result = array();
        file_put_contents('/home/gt/php_worker7.txt', 'here1
', FILE_APPEND);
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            if (is_array($temp)) {
                foreach ($temp as $e) {
                    array_push($result, $e);
                }
            }
        }
        return $result;
    } else {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            array_push($result, $temp);
        }
        return $result;
    }
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":166:{a:5:{s:4:"code";s:72:"function ($line) {
    $temp = explode(' ', $line);
    return $temp;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}
here5
here6test test test test try try try 
here3C:32:"SuperClosure\SerializableClosure":6176:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":1938:{a:5:{s:4:"code";s:1484:"function ($iterator) use($numPartitions, $partitionFunc, $limit, $outputSerializer) {
    $buckets = array();
    $c = 0;
    $batch = min(10 * $numPartitions, 1000);
    foreach ($iterator as $element) {
        file_put_contents('/home/gt/php_worker9.txt', 'here1' . $element . '
', FILE_APPEND);
    }
    foreach ($iterator as $key => $value) {
        $buckets[$partitionFunc($key) % $numPartitions] = array();
        $buckets[$partitionFunc($key) % $numPartitions][$key] = $value;
        $c++;
        if ($c % 1000 == 0 && memory_get_usage() / 1024 / 1024 > $limit || $c > $batch) {
            $n = sizeof($buckets);
            $size = 0;
            $result = array();
            foreach ($buckets as $key2 => $value2) {
                #value是一个array
                array_push($result, serialize($key2));
                $d = serialize($value2);
                unset($value2);
                array_push($result, $d);
                $size += strlen($d);
            }
            $avg = intval($size / $n) >> 20;
            # let 1M < avg < 10M
            if ($avg < 1) {
                $batch *= 1.5;
            } elseif ($avg > 10) {
                $batch = max(intval($batch / 1.5), 1);
            }
            $c = 0;
            return $result;
        }
    }
    $result = array();
    foreach ($buckets as $key => $value) {
        array_push($result, serialize($key));
        array_push($result, serialize($value));
    }
    return $result;
};";s:7:"context";a:3:{s:13:"numPartitions";i:2;s:13:"partitionFunc";C:32:"SuperClosure\SerializableClosure":240:{a:5:{s:4:"code";s:137:"function ($x) {
    if ($x == null) {
        return 0;
    }
    $h = null;
    if (is_array($x)) {
    }
    return hash('md5', $x);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:5:"limit";i:256;}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":3874:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":1619:{a:5:{s:4:"code";s:67:"function ($split, $iterator) use($f) {
    return $f($iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":1395:{a:5:{s:4:"code";s:332:"function ($iterator) use($memory, $serializer, $createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc) {
    $agg = new \aggregator($createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc);
    $merger = new \ExternalMerger($agg, $memory * 0.9, $serializer);
    $merger->mergeValues($iterator);
    return $merger->items();
};";s:7:"context";a:5:{s:6:"memory";i:512;s:10:"serializer";O:23:"auto_batched_serializer":10:{s:9:"best_size";i:65536;s:20:"UNLIMITED_BATCH_SIZE";i:-1;s:18:"UNKNOWN_BATCH_SIZE";i:0;s:10:"serializer";N;s:10:"batch_size";i:0;s:19:"END_OF_DATA_SECTION";i:-1;s:20:"PHP_EXCEPTION_THROWN";i:-2;s:11:"TIMING_DATA";i:-3;s:13:"END_OF_STREAM";i:-4;s:4:"NULL";i:-5;}s:18:"createCombinerFunc";C:32:"SuperClosure\SerializableClosure":135:{a:5:{s:4:"code";s:33:"function ($x) {
    return $x;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"mergeValueFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}s:18:"mergeCombinersFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1891:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":369:{a:5:{s:4:"code";s:76:"function ($any, $iterator) use($f) {
    return array_map($f, $iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":137:{a:5:{s:4:"code";s:43:"function ($x) {
    return array($x, 1);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1159:{a:5:{s:4:"code";s:836:"function ($split, $iterator) use($f) {
    $sub_is_array = False;
    foreach ($iterator as $key => $value) {
        $temp = $f($value);
        if (is_array($temp)) {
            $sub_is_array = True;
            break;
        }
    }
    if ($sub_is_array) {
        $result = array();
        file_put_contents('/home/gt/php_worker7.txt', 'here1
', FILE_APPEND);
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            if (is_array($temp)) {
                foreach ($temp as $e) {
                    array_push($result, $e);
                }
            }
        }
        return $result;
    } else {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            array_push($result, $temp);
        }
        return $result;
    }
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":166:{a:5:{s:4:"code";s:72:"function ($line) {
    $temp = explode(' ', $line);
    return $temp;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}
here5
here6do do do 
socket_create()成功53838

socket_connect()成功
首次read_int()成功1
首次read_utf()成功5.6
here3C:32:"SuperClosure\SerializableClosure":6176:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":1938:{a:5:{s:4:"code";s:1484:"function ($iterator) use($numPartitions, $partitionFunc, $limit, $outputSerializer) {
    $buckets = array();
    $c = 0;
    $batch = min(10 * $numPartitions, 1000);
    foreach ($iterator as $element) {
        file_put_contents('/home/gt/php_worker9.txt', 'here1' . $element . '
', FILE_APPEND);
    }
    foreach ($iterator as $key => $value) {
        $buckets[$partitionFunc($key) % $numPartitions] = array();
        $buckets[$partitionFunc($key) % $numPartitions][$key] = $value;
        $c++;
        if ($c % 1000 == 0 && memory_get_usage() / 1024 / 1024 > $limit || $c > $batch) {
            $n = sizeof($buckets);
            $size = 0;
            $result = array();
            foreach ($buckets as $key2 => $value2) {
                #value是一个array
                array_push($result, serialize($key2));
                $d = serialize($value2);
                unset($value2);
                array_push($result, $d);
                $size += strlen($d);
            }
            $avg = intval($size / $n) >> 20;
            # let 1M < avg < 10M
            if ($avg < 1) {
                $batch *= 1.5;
            } elseif ($avg > 10) {
                $batch = max(intval($batch / 1.5), 1);
            }
            $c = 0;
            return $result;
        }
    }
    $result = array();
    foreach ($buckets as $key => $value) {
        array_push($result, serialize($key));
        array_push($result, serialize($value));
    }
    return $result;
};";s:7:"context";a:3:{s:13:"numPartitions";i:2;s:13:"partitionFunc";C:32:"SuperClosure\SerializableClosure":240:{a:5:{s:4:"code";s:137:"function ($x) {
    if ($x == null) {
        return 0;
    }
    $h = null;
    if (is_array($x)) {
    }
    return hash('md5', $x);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:5:"limit";i:256;}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":3874:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":1619:{a:5:{s:4:"code";s:67:"function ($split, $iterator) use($f) {
    return $f($iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":1395:{a:5:{s:4:"code";s:332:"function ($iterator) use($memory, $serializer, $createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc) {
    $agg = new \aggregator($createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc);
    $merger = new \ExternalMerger($agg, $memory * 0.9, $serializer);
    $merger->mergeValues($iterator);
    return $merger->items();
};";s:7:"context";a:5:{s:6:"memory";i:512;s:10:"serializer";O:23:"auto_batched_serializer":10:{s:9:"best_size";i:65536;s:20:"UNLIMITED_BATCH_SIZE";i:-1;s:18:"UNKNOWN_BATCH_SIZE";i:0;s:10:"serializer";N;s:10:"batch_size";i:0;s:19:"END_OF_DATA_SECTION";i:-1;s:20:"PHP_EXCEPTION_THROWN";i:-2;s:11:"TIMING_DATA";i:-3;s:13:"END_OF_STREAM";i:-4;s:4:"NULL";i:-5;}s:18:"createCombinerFunc";C:32:"SuperClosure\SerializableClosure":135:{a:5:{s:4:"code";s:33:"function ($x) {
    return $x;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"mergeValueFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}s:18:"mergeCombinersFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1891:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":369:{a:5:{s:4:"code";s:76:"function ($any, $iterator) use($f) {
    return array_map($f, $iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":137:{a:5:{s:4:"code";s:43:"function ($x) {
    return array($x, 1);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1159:{a:5:{s:4:"code";s:836:"function ($split, $iterator) use($f) {
    $sub_is_array = False;
    foreach ($iterator as $key => $value) {
        $temp = $f($value);
        if (is_array($temp)) {
            $sub_is_array = True;
            break;
        }
    }
    if ($sub_is_array) {
        $result = array();
        file_put_contents('/home/gt/php_worker7.txt', 'here1
', FILE_APPEND);
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            if (is_array($temp)) {
                foreach ($temp as $e) {
                    array_push($result, $e);
                }
            }
        }
        return $result;
    } else {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            array_push($result, $temp);
        }
        return $result;
    }
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":166:{a:5:{s:4:"code";s:72:"function ($line) {
    $temp = explode(' ', $line);
    return $temp;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}
here5
here6do do do 
socket_create()成功55490

socket_connect()成功
首次read_int()成功0
首次read_utf()成功5.6
here3C:32:"SuperClosure\SerializableClosure":6176:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":1938:{a:5:{s:4:"code";s:1484:"function ($iterator) use($numPartitions, $partitionFunc, $limit, $outputSerializer) {
    $buckets = array();
    $c = 0;
    $batch = min(10 * $numPartitions, 1000);
    foreach ($iterator as $element) {
        file_put_contents('/home/gt/php_worker9.txt', 'here1' . $element . '
', FILE_APPEND);
    }
    foreach ($iterator as $key => $value) {
        $buckets[$partitionFunc($key) % $numPartitions] = array();
        $buckets[$partitionFunc($key) % $numPartitions][$key] = $value;
        $c++;
        if ($c % 1000 == 0 && memory_get_usage() / 1024 / 1024 > $limit || $c > $batch) {
            $n = sizeof($buckets);
            $size = 0;
            $result = array();
            foreach ($buckets as $key2 => $value2) {
                #value是一个array
                array_push($result, serialize($key2));
                $d = serialize($value2);
                unset($value2);
                array_push($result, $d);
                $size += strlen($d);
            }
            $avg = intval($size / $n) >> 20;
            # let 1M < avg < 10M
            if ($avg < 1) {
                $batch *= 1.5;
            } elseif ($avg > 10) {
                $batch = max(intval($batch / 1.5), 1);
            }
            $c = 0;
            return $result;
        }
    }
    $result = array();
    foreach ($buckets as $key => $value) {
        array_push($result, serialize($key));
        array_push($result, serialize($value));
    }
    return $result;
};";s:7:"context";a:3:{s:13:"numPartitions";i:2;s:13:"partitionFunc";C:32:"SuperClosure\SerializableClosure":240:{a:5:{s:4:"code";s:137:"function ($x) {
    if ($x == null) {
        return 0;
    }
    $h = null;
    if (is_array($x)) {
    }
    return hash('md5', $x);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:5:"limit";i:256;}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":3874:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":1619:{a:5:{s:4:"code";s:67:"function ($split, $iterator) use($f) {
    return $f($iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":1395:{a:5:{s:4:"code";s:332:"function ($iterator) use($memory, $serializer, $createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc) {
    $agg = new \aggregator($createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc);
    $merger = new \ExternalMerger($agg, $memory * 0.9, $serializer);
    $merger->mergeValues($iterator);
    return $merger->items();
};";s:7:"context";a:5:{s:6:"memory";i:512;s:10:"serializer";O:23:"auto_batched_serializer":10:{s:9:"best_size";i:65536;s:20:"UNLIMITED_BATCH_SIZE";i:-1;s:18:"UNKNOWN_BATCH_SIZE";i:0;s:10:"serializer";N;s:10:"batch_size";i:0;s:19:"END_OF_DATA_SECTION";i:-1;s:20:"PHP_EXCEPTION_THROWN";i:-2;s:11:"TIMING_DATA";i:-3;s:13:"END_OF_STREAM";i:-4;s:4:"NULL";i:-5;}s:18:"createCombinerFunc";C:32:"SuperClosure\SerializableClosure":135:{a:5:{s:4:"code";s:33:"function ($x) {
    return $x;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"mergeValueFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}s:18:"mergeCombinersFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1891:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":369:{a:5:{s:4:"code";s:76:"function ($any, $iterator) use($f) {
    return array_map($f, $iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":137:{a:5:{s:4:"code";s:43:"function ($x) {
    return array($x, 1);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1159:{a:5:{s:4:"code";s:836:"function ($split, $iterator) use($f) {
    $sub_is_array = False;
    foreach ($iterator as $key => $value) {
        $temp = $f($value);
        if (is_array($temp)) {
            $sub_is_array = True;
            break;
        }
    }
    if ($sub_is_array) {
        $result = array();
        file_put_contents('/home/gt/php_worker7.txt', 'here1
', FILE_APPEND);
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            if (is_array($temp)) {
                foreach ($temp as $e) {
                    array_push($result, $e);
                }
            }
        }
        return $result;
    } else {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            array_push($result, $temp);
        }
        return $result;
    }
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":166:{a:5:{s:4:"code";s:72:"function ($line) {
    $temp = explode(' ', $line);
    return $temp;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}
here5
here6test test test test try try try 
socket_create()成功38570

socket_connect()成功
首次read_int()成功1
首次read_utf()成功5.6
here3C:32:"SuperClosure\SerializableClosure":6176:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":1938:{a:5:{s:4:"code";s:1484:"function ($iterator) use($numPartitions, $partitionFunc, $limit, $outputSerializer) {
    $buckets = array();
    $c = 0;
    $batch = min(10 * $numPartitions, 1000);
    foreach ($iterator as $element) {
        file_put_contents('/home/gt/php_worker9.txt', 'here1' . $element . '
', FILE_APPEND);
    }
    foreach ($iterator as $key => $value) {
        $buckets[$partitionFunc($key) % $numPartitions] = array();
        $buckets[$partitionFunc($key) % $numPartitions][$key] = $value;
        $c++;
        if ($c % 1000 == 0 && memory_get_usage() / 1024 / 1024 > $limit || $c > $batch) {
            $n = sizeof($buckets);
            $size = 0;
            $result = array();
            foreach ($buckets as $key2 => $value2) {
                #value是一个array
                array_push($result, serialize($key2));
                $d = serialize($value2);
                unset($value2);
                array_push($result, $d);
                $size += strlen($d);
            }
            $avg = intval($size / $n) >> 20;
            # let 1M < avg < 10M
            if ($avg < 1) {
                $batch *= 1.5;
            } elseif ($avg > 10) {
                $batch = max(intval($batch / 1.5), 1);
            }
            $c = 0;
            return $result;
        }
    }
    $result = array();
    foreach ($buckets as $key => $value) {
        array_push($result, serialize($key));
        array_push($result, serialize($value));
    }
    return $result;
};";s:7:"context";a:3:{s:13:"numPartitions";i:2;s:13:"partitionFunc";C:32:"SuperClosure\SerializableClosure":240:{a:5:{s:4:"code";s:137:"function ($x) {
    if ($x == null) {
        return 0;
    }
    $h = null;
    if (is_array($x)) {
    }
    return hash('md5', $x);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:5:"limit";i:256;}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":3874:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":1619:{a:5:{s:4:"code";s:67:"function ($split, $iterator) use($f) {
    return $f($iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":1395:{a:5:{s:4:"code";s:332:"function ($iterator) use($memory, $serializer, $createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc) {
    $agg = new \aggregator($createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc);
    $merger = new \ExternalMerger($agg, $memory * 0.9, $serializer);
    $merger->mergeValues($iterator);
    return $merger->items();
};";s:7:"context";a:5:{s:6:"memory";i:512;s:10:"serializer";O:23:"auto_batched_serializer":10:{s:9:"best_size";i:65536;s:20:"UNLIMITED_BATCH_SIZE";i:-1;s:18:"UNKNOWN_BATCH_SIZE";i:0;s:10:"serializer";N;s:10:"batch_size";i:0;s:19:"END_OF_DATA_SECTION";i:-1;s:20:"PHP_EXCEPTION_THROWN";i:-2;s:11:"TIMING_DATA";i:-3;s:13:"END_OF_STREAM";i:-4;s:4:"NULL";i:-5;}s:18:"createCombinerFunc";C:32:"SuperClosure\SerializableClosure":135:{a:5:{s:4:"code";s:33:"function ($x) {
    return $x;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"mergeValueFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}s:18:"mergeCombinersFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1891:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":369:{a:5:{s:4:"code";s:76:"function ($any, $iterator) use($f) {
    return array_map($f, $iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":137:{a:5:{s:4:"code";s:43:"function ($x) {
    return array($x, 1);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1159:{a:5:{s:4:"code";s:836:"function ($split, $iterator) use($f) {
    $sub_is_array = False;
    foreach ($iterator as $key => $value) {
        $temp = $f($value);
        if (is_array($temp)) {
            $sub_is_array = True;
            break;
        }
    }
    if ($sub_is_array) {
        $result = array();
        file_put_contents('/home/gt/php_worker7.txt', 'here1
', FILE_APPEND);
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            if (is_array($temp)) {
                foreach ($temp as $e) {
                    array_push($result, $e);
                }
            }
        }
        return $result;
    } else {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            array_push($result, $temp);
        }
        return $result;
    }
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":166:{a:5:{s:4:"code";s:72:"function ($line) {
    $temp = explode(' ', $line);
    return $temp;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}
here5
here6do do do 
socket_create()成功47257

socket_connect()成功
首次read_int()成功0
首次read_utf()成功5.6
socket_create()成功49965

socket_connect()成功
here3C:32:"SuperClosure\SerializableClosure":6176:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":1938:{a:5:{s:4:"code";s:1484:"function ($iterator) use($numPartitions, $partitionFunc, $limit, $outputSerializer) {
    $buckets = array();
    $c = 0;
    $batch = min(10 * $numPartitions, 1000);
    foreach ($iterator as $element) {
        file_put_contents('/home/gt/php_worker9.txt', 'here1' . $element . '
', FILE_APPEND);
    }
    foreach ($iterator as $key => $value) {
        $buckets[$partitionFunc($key) % $numPartitions] = array();
        $buckets[$partitionFunc($key) % $numPartitions][$key] = $value;
        $c++;
        if ($c % 1000 == 0 && memory_get_usage() / 1024 / 1024 > $limit || $c > $batch) {
            $n = sizeof($buckets);
            $size = 0;
            $result = array();
            foreach ($buckets as $key2 => $value2) {
                #value是一个array
                array_push($result, serialize($key2));
                $d = serialize($value2);
                unset($value2);
                array_push($result, $d);
                $size += strlen($d);
            }
            $avg = intval($size / $n) >> 20;
            # let 1M < avg < 10M
            if ($avg < 1) {
                $batch *= 1.5;
            } elseif ($avg > 10) {
                $batch = max(intval($batch / 1.5), 1);
            }
            $c = 0;
            return $result;
        }
    }
    $result = array();
    foreach ($buckets as $key => $value) {
        array_push($result, serialize($key));
        array_push($result, serialize($value));
    }
    return $result;
};";s:7:"context";a:3:{s:13:"numPartitions";i:2;s:13:"partitionFunc";C:32:"SuperClosure\SerializableClosure":240:{a:5:{s:4:"code";s:137:"function ($x) {
    if ($x == null) {
        return 0;
    }
    $h = null;
    if (is_array($x)) {
    }
    return hash('md5', $x);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:5:"limit";i:256;}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":3874:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":1619:{a:5:{s:4:"code";s:67:"function ($split, $iterator) use($f) {
    return $f($iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":1395:{a:5:{s:4:"code";s:332:"function ($iterator) use($memory, $serializer, $createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc) {
    $agg = new \aggregator($createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc);
    $merger = new \ExternalMerger($agg, $memory * 0.9, $serializer);
    $merger->mergeValues($iterator);
    return $merger->items();
};";s:7:"context";a:5:{s:6:"memory";i:512;s:10:"serializer";O:23:"auto_batched_serializer":10:{s:9:"best_size";i:65536;s:20:"UNLIMITED_BATCH_SIZE";i:-1;s:18:"UNKNOWN_BATCH_SIZE";i:0;s:10:"serializer";N;s:10:"batch_size";i:0;s:19:"END_OF_DATA_SECTION";i:-1;s:20:"PHP_EXCEPTION_THROWN";i:-2;s:11:"TIMING_DATA";i:-3;s:13:"END_OF_STREAM";i:-4;s:4:"NULL";i:-5;}s:18:"createCombinerFunc";C:32:"SuperClosure\SerializableClosure":135:{a:5:{s:4:"code";s:33:"function ($x) {
    return $x;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"mergeValueFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}s:18:"mergeCombinersFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1891:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":369:{a:5:{s:4:"code";s:76:"function ($any, $iterator) use($f) {
    return array_map($f, $iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":137:{a:5:{s:4:"code";s:43:"function ($x) {
    return array($x, 1);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1159:{a:5:{s:4:"code";s:836:"function ($split, $iterator) use($f) {
    $sub_is_array = False;
    foreach ($iterator as $key => $value) {
        $temp = $f($value);
        if (is_array($temp)) {
            $sub_is_array = True;
            break;
        }
    }
    if ($sub_is_array) {
        $result = array();
        file_put_contents('/home/gt/php_worker7.txt', 'here1
', FILE_APPEND);
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            if (is_array($temp)) {
                foreach ($temp as $e) {
                    array_push($result, $e);
                }
            }
        }
        return $result;
    } else {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            array_push($result, $temp);
        }
        return $result;
    }
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":166:{a:5:{s:4:"code";s:72:"function ($line) {
    $temp = explode(' ', $line);
    return $temp;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}
首次read_int()成功1
首次read_utf()成功5.6
here5
here6test test test test try try try 
here3C:32:"SuperClosure\SerializableClosure":6176:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":1938:{a:5:{s:4:"code";s:1484:"function ($iterator) use($numPartitions, $partitionFunc, $limit, $outputSerializer) {
    $buckets = array();
    $c = 0;
    $batch = min(10 * $numPartitions, 1000);
    foreach ($iterator as $element) {
        file_put_contents('/home/gt/php_worker9.txt', 'here1' . $element . '
', FILE_APPEND);
    }
    foreach ($iterator as $key => $value) {
        $buckets[$partitionFunc($key) % $numPartitions] = array();
        $buckets[$partitionFunc($key) % $numPartitions][$key] = $value;
        $c++;
        if ($c % 1000 == 0 && memory_get_usage() / 1024 / 1024 > $limit || $c > $batch) {
            $n = sizeof($buckets);
            $size = 0;
            $result = array();
            foreach ($buckets as $key2 => $value2) {
                #value是一个array
                array_push($result, serialize($key2));
                $d = serialize($value2);
                unset($value2);
                array_push($result, $d);
                $size += strlen($d);
            }
            $avg = intval($size / $n) >> 20;
            # let 1M < avg < 10M
            if ($avg < 1) {
                $batch *= 1.5;
            } elseif ($avg > 10) {
                $batch = max(intval($batch / 1.5), 1);
            }
            $c = 0;
            return $result;
        }
    }
    $result = array();
    foreach ($buckets as $key => $value) {
        array_push($result, serialize($key));
        array_push($result, serialize($value));
    }
    return $result;
};";s:7:"context";a:3:{s:13:"numPartitions";i:2;s:13:"partitionFunc";C:32:"SuperClosure\SerializableClosure":240:{a:5:{s:4:"code";s:137:"function ($x) {
    if ($x == null) {
        return 0;
    }
    $h = null;
    if (is_array($x)) {
    }
    return hash('md5', $x);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:5:"limit";i:256;}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":3874:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":1619:{a:5:{s:4:"code";s:67:"function ($split, $iterator) use($f) {
    return $f($iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":1395:{a:5:{s:4:"code";s:332:"function ($iterator) use($memory, $serializer, $createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc) {
    $agg = new \aggregator($createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc);
    $merger = new \ExternalMerger($agg, $memory * 0.9, $serializer);
    $merger->mergeValues($iterator);
    return $merger->items();
};";s:7:"context";a:5:{s:6:"memory";i:512;s:10:"serializer";O:23:"auto_batched_serializer":10:{s:9:"best_size";i:65536;s:20:"UNLIMITED_BATCH_SIZE";i:-1;s:18:"UNKNOWN_BATCH_SIZE";i:0;s:10:"serializer";N;s:10:"batch_size";i:0;s:19:"END_OF_DATA_SECTION";i:-1;s:20:"PHP_EXCEPTION_THROWN";i:-2;s:11:"TIMING_DATA";i:-3;s:13:"END_OF_STREAM";i:-4;s:4:"NULL";i:-5;}s:18:"createCombinerFunc";C:32:"SuperClosure\SerializableClosure":135:{a:5:{s:4:"code";s:33:"function ($x) {
    return $x;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"mergeValueFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}s:18:"mergeCombinersFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1891:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":369:{a:5:{s:4:"code";s:76:"function ($any, $iterator) use($f) {
    return array_map($f, $iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":137:{a:5:{s:4:"code";s:43:"function ($x) {
    return array($x, 1);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1159:{a:5:{s:4:"code";s:836:"function ($split, $iterator) use($f) {
    $sub_is_array = False;
    foreach ($iterator as $key => $value) {
        $temp = $f($value);
        if (is_array($temp)) {
            $sub_is_array = True;
            break;
        }
    }
    if ($sub_is_array) {
        $result = array();
        file_put_contents('/home/gt/php_worker7.txt', 'here1
', FILE_APPEND);
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            if (is_array($temp)) {
                foreach ($temp as $e) {
                    array_push($result, $e);
                }
            }
        }
        return $result;
    } else {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            array_push($result, $temp);
        }
        return $result;
    }
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":166:{a:5:{s:4:"code";s:72:"function ($line) {
    $temp = explode(' ', $line);
    return $temp;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}
here5
here6do do do 
socket_create()成功45729

socket_connect()成功
首次read_int()成功0
首次read_utf()成功5.6
socket_create()成功32848

socket_connect()成功
socket_create()成功36423

socket_connect()成功
首次read_int()成功0
首次read_utf()成功5.6
首次read_int()成功1
首次read_utf()成功5.6
here3C:32:"SuperClosure\SerializableClosure":6246:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":1938:{a:5:{s:4:"code";s:1484:"function ($iterator) use($numPartitions, $partitionFunc, $limit, $outputSerializer) {
    $buckets = array();
    $c = 0;
    $batch = min(10 * $numPartitions, 1000);
    foreach ($iterator as $element) {
        file_put_contents('/home/gt/php_worker9.txt', 'here1' . $element . '
', FILE_APPEND);
    }
    foreach ($iterator as $key => $value) {
        $buckets[$partitionFunc($key) % $numPartitions] = array();
        $buckets[$partitionFunc($key) % $numPartitions][$key] = $value;
        $c++;
        if ($c % 1000 == 0 && memory_get_usage() / 1024 / 1024 > $limit || $c > $batch) {
            $n = sizeof($buckets);
            $size = 0;
            $result = array();
            foreach ($buckets as $key2 => $value2) {
                #value是一个array
                array_push($result, serialize($key2));
                $d = serialize($value2);
                unset($value2);
                array_push($result, $d);
                $size += strlen($d);
            }
            $avg = intval($size / $n) >> 20;
            # let 1M < avg < 10M
            if ($avg < 1) {
                $batch *= 1.5;
            } elseif ($avg > 10) {
                $batch = max(intval($batch / 1.5), 1);
            }
            $c = 0;
            return $result;
        }
    }
    $result = array();
    foreach ($buckets as $key => $value) {
        array_push($result, serialize($key));
        array_push($result, serialize($value));
    }
    return $result;
};";s:7:"context";a:3:{s:13:"numPartitions";i:2;s:13:"partitionFunc";C:32:"SuperClosure\SerializableClosure":240:{a:5:{s:4:"code";s:137:"function ($x) {
    if ($x == null) {
        return 0;
    }
    $h = null;
    if (is_array($x)) {
    }
    return hash('md5', $x);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:5:"limit";i:256;}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":3944:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":1767:{a:5:{s:4:"code";s:67:"function ($split, $iterator) use($f) {
    return $f($iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":1543:{a:5:{s:4:"code";s:480:"function ($iterator) use($memory, $serializer, $createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc) {
    file_put_contents('/home/gt/php_worker7.txt', 'here1
', FILE_APPEND);
    $agg = new \aggregator($createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc);
    $merger = new \ExternalMerger($agg, $memory * 0.9, $serializer);
    $merger->mergeValues($iterator);
    file_put_contents('/home/gt/php_worker7.txt', 'here2
', FILE_APPEND);
    return $merger->items();
};";s:7:"context";a:5:{s:6:"memory";i:512;s:10:"serializer";O:23:"auto_batched_serializer":10:{s:9:"best_size";i:65536;s:20:"UNLIMITED_BATCH_SIZE";i:-1;s:18:"UNKNOWN_BATCH_SIZE";i:0;s:10:"serializer";N;s:10:"batch_size";i:0;s:19:"END_OF_DATA_SECTION";i:-1;s:20:"PHP_EXCEPTION_THROWN";i:-2;s:11:"TIMING_DATA";i:-3;s:13:"END_OF_STREAM";i:-4;s:4:"NULL";i:-5;}s:18:"createCombinerFunc";C:32:"SuperClosure\SerializableClosure":135:{a:5:{s:4:"code";s:33:"function ($x) {
    return $x;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"mergeValueFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}s:18:"mergeCombinersFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1813:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":369:{a:5:{s:4:"code";s:76:"function ($any, $iterator) use($f) {
    return array_map($f, $iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":137:{a:5:{s:4:"code";s:43:"function ($x) {
    return array($x, 1);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1081:{a:5:{s:4:"code";s:758:"function ($split, $iterator) use($f) {
    $sub_is_array = False;
    foreach ($iterator as $key => $value) {
        $temp = $f($value);
        if (is_array($temp)) {
            $sub_is_array = True;
            break;
        }
    }
    if ($sub_is_array) {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            if (is_array($temp)) {
                foreach ($temp as $e) {
                    array_push($result, $e);
                }
            }
        }
        return $result;
    } else {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            array_push($result, $temp);
        }
        return $result;
    }
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":166:{a:5:{s:4:"code";s:72:"function ($line) {
    $temp = explode(' ', $line);
    return $temp;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}
here5
here6test test test test try try try 
here3C:32:"SuperClosure\SerializableClosure":6246:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":1938:{a:5:{s:4:"code";s:1484:"function ($iterator) use($numPartitions, $partitionFunc, $limit, $outputSerializer) {
    $buckets = array();
    $c = 0;
    $batch = min(10 * $numPartitions, 1000);
    foreach ($iterator as $element) {
        file_put_contents('/home/gt/php_worker9.txt', 'here1' . $element . '
', FILE_APPEND);
    }
    foreach ($iterator as $key => $value) {
        $buckets[$partitionFunc($key) % $numPartitions] = array();
        $buckets[$partitionFunc($key) % $numPartitions][$key] = $value;
        $c++;
        if ($c % 1000 == 0 && memory_get_usage() / 1024 / 1024 > $limit || $c > $batch) {
            $n = sizeof($buckets);
            $size = 0;
            $result = array();
            foreach ($buckets as $key2 => $value2) {
                #value是一个array
                array_push($result, serialize($key2));
                $d = serialize($value2);
                unset($value2);
                array_push($result, $d);
                $size += strlen($d);
            }
            $avg = intval($size / $n) >> 20;
            # let 1M < avg < 10M
            if ($avg < 1) {
                $batch *= 1.5;
            } elseif ($avg > 10) {
                $batch = max(intval($batch / 1.5), 1);
            }
            $c = 0;
            return $result;
        }
    }
    $result = array();
    foreach ($buckets as $key => $value) {
        array_push($result, serialize($key));
        array_push($result, serialize($value));
    }
    return $result;
};";s:7:"context";a:3:{s:13:"numPartitions";i:2;s:13:"partitionFunc";C:32:"SuperClosure\SerializableClosure":240:{a:5:{s:4:"code";s:137:"function ($x) {
    if ($x == null) {
        return 0;
    }
    $h = null;
    if (is_array($x)) {
    }
    return hash('md5', $x);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:5:"limit";i:256;}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":3944:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":1767:{a:5:{s:4:"code";s:67:"function ($split, $iterator) use($f) {
    return $f($iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":1543:{a:5:{s:4:"code";s:480:"function ($iterator) use($memory, $serializer, $createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc) {
    file_put_contents('/home/gt/php_worker7.txt', 'here1
', FILE_APPEND);
    $agg = new \aggregator($createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc);
    $merger = new \ExternalMerger($agg, $memory * 0.9, $serializer);
    $merger->mergeValues($iterator);
    file_put_contents('/home/gt/php_worker7.txt', 'here2
', FILE_APPEND);
    return $merger->items();
};";s:7:"context";a:5:{s:6:"memory";i:512;s:10:"serializer";O:23:"auto_batched_serializer":10:{s:9:"best_size";i:65536;s:20:"UNLIMITED_BATCH_SIZE";i:-1;s:18:"UNKNOWN_BATCH_SIZE";i:0;s:10:"serializer";N;s:10:"batch_size";i:0;s:19:"END_OF_DATA_SECTION";i:-1;s:20:"PHP_EXCEPTION_THROWN";i:-2;s:11:"TIMING_DATA";i:-3;s:13:"END_OF_STREAM";i:-4;s:4:"NULL";i:-5;}s:18:"createCombinerFunc";C:32:"SuperClosure\SerializableClosure":135:{a:5:{s:4:"code";s:33:"function ($x) {
    return $x;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"mergeValueFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}s:18:"mergeCombinersFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1813:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":369:{a:5:{s:4:"code";s:76:"function ($any, $iterator) use($f) {
    return array_map($f, $iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":137:{a:5:{s:4:"code";s:43:"function ($x) {
    return array($x, 1);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1081:{a:5:{s:4:"code";s:758:"function ($split, $iterator) use($f) {
    $sub_is_array = False;
    foreach ($iterator as $key => $value) {
        $temp = $f($value);
        if (is_array($temp)) {
            $sub_is_array = True;
            break;
        }
    }
    if ($sub_is_array) {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            if (is_array($temp)) {
                foreach ($temp as $e) {
                    array_push($result, $e);
                }
            }
        }
        return $result;
    } else {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            array_push($result, $temp);
        }
        return $result;
    }
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":166:{a:5:{s:4:"code";s:72:"function ($line) {
    $temp = explode(' ', $line);
    return $temp;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}
here5
here6do do do 
socket_create()成功40834

socket_connect()成功
首次read_int()成功0
首次read_utf()成功5.6
here3C:32:"SuperClosure\SerializableClosure":6246:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":1938:{a:5:{s:4:"code";s:1484:"function ($iterator) use($numPartitions, $partitionFunc, $limit, $outputSerializer) {
    $buckets = array();
    $c = 0;
    $batch = min(10 * $numPartitions, 1000);
    foreach ($iterator as $element) {
        file_put_contents('/home/gt/php_worker9.txt', 'here1' . $element . '
', FILE_APPEND);
    }
    foreach ($iterator as $key => $value) {
        $buckets[$partitionFunc($key) % $numPartitions] = array();
        $buckets[$partitionFunc($key) % $numPartitions][$key] = $value;
        $c++;
        if ($c % 1000 == 0 && memory_get_usage() / 1024 / 1024 > $limit || $c > $batch) {
            $n = sizeof($buckets);
            $size = 0;
            $result = array();
            foreach ($buckets as $key2 => $value2) {
                #value是一个array
                array_push($result, serialize($key2));
                $d = serialize($value2);
                unset($value2);
                array_push($result, $d);
                $size += strlen($d);
            }
            $avg = intval($size / $n) >> 20;
            # let 1M < avg < 10M
            if ($avg < 1) {
                $batch *= 1.5;
            } elseif ($avg > 10) {
                $batch = max(intval($batch / 1.5), 1);
            }
            $c = 0;
            return $result;
        }
    }
    $result = array();
    foreach ($buckets as $key => $value) {
        array_push($result, serialize($key));
        array_push($result, serialize($value));
    }
    return $result;
};";s:7:"context";a:3:{s:13:"numPartitions";i:2;s:13:"partitionFunc";C:32:"SuperClosure\SerializableClosure":240:{a:5:{s:4:"code";s:137:"function ($x) {
    if ($x == null) {
        return 0;
    }
    $h = null;
    if (is_array($x)) {
    }
    return hash('md5', $x);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:5:"limit";i:256;}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":3944:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":1767:{a:5:{s:4:"code";s:67:"function ($split, $iterator) use($f) {
    return $f($iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":1543:{a:5:{s:4:"code";s:480:"function ($iterator) use($memory, $serializer, $createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc) {
    file_put_contents('/home/gt/php_worker7.txt', 'here1
', FILE_APPEND);
    $agg = new \aggregator($createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc);
    $merger = new \ExternalMerger($agg, $memory * 0.9, $serializer);
    $merger->mergeValues($iterator);
    file_put_contents('/home/gt/php_worker7.txt', 'here2
', FILE_APPEND);
    return $merger->items();
};";s:7:"context";a:5:{s:6:"memory";i:512;s:10:"serializer";O:23:"auto_batched_serializer":10:{s:9:"best_size";i:65536;s:20:"UNLIMITED_BATCH_SIZE";i:-1;s:18:"UNKNOWN_BATCH_SIZE";i:0;s:10:"serializer";N;s:10:"batch_size";i:0;s:19:"END_OF_DATA_SECTION";i:-1;s:20:"PHP_EXCEPTION_THROWN";i:-2;s:11:"TIMING_DATA";i:-3;s:13:"END_OF_STREAM";i:-4;s:4:"NULL";i:-5;}s:18:"createCombinerFunc";C:32:"SuperClosure\SerializableClosure":135:{a:5:{s:4:"code";s:33:"function ($x) {
    return $x;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"mergeValueFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}s:18:"mergeCombinersFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1813:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":369:{a:5:{s:4:"code";s:76:"function ($any, $iterator) use($f) {
    return array_map($f, $iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":137:{a:5:{s:4:"code";s:43:"function ($x) {
    return array($x, 1);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1081:{a:5:{s:4:"code";s:758:"function ($split, $iterator) use($f) {
    $sub_is_array = False;
    foreach ($iterator as $key => $value) {
        $temp = $f($value);
        if (is_array($temp)) {
            $sub_is_array = True;
            break;
        }
    }
    if ($sub_is_array) {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            if (is_array($temp)) {
                foreach ($temp as $e) {
                    array_push($result, $e);
                }
            }
        }
        return $result;
    } else {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            array_push($result, $temp);
        }
        return $result;
    }
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":166:{a:5:{s:4:"code";s:72:"function ($line) {
    $temp = explode(' ', $line);
    return $temp;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}
here5
here6test test test test try try try 
socket_create()成功44571

socket_connect()成功
首次read_int()成功1
首次read_utf()成功5.6
here3C:32:"SuperClosure\SerializableClosure":6246:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":1938:{a:5:{s:4:"code";s:1484:"function ($iterator) use($numPartitions, $partitionFunc, $limit, $outputSerializer) {
    $buckets = array();
    $c = 0;
    $batch = min(10 * $numPartitions, 1000);
    foreach ($iterator as $element) {
        file_put_contents('/home/gt/php_worker9.txt', 'here1' . $element . '
', FILE_APPEND);
    }
    foreach ($iterator as $key => $value) {
        $buckets[$partitionFunc($key) % $numPartitions] = array();
        $buckets[$partitionFunc($key) % $numPartitions][$key] = $value;
        $c++;
        if ($c % 1000 == 0 && memory_get_usage() / 1024 / 1024 > $limit || $c > $batch) {
            $n = sizeof($buckets);
            $size = 0;
            $result = array();
            foreach ($buckets as $key2 => $value2) {
                #value是一个array
                array_push($result, serialize($key2));
                $d = serialize($value2);
                unset($value2);
                array_push($result, $d);
                $size += strlen($d);
            }
            $avg = intval($size / $n) >> 20;
            # let 1M < avg < 10M
            if ($avg < 1) {
                $batch *= 1.5;
            } elseif ($avg > 10) {
                $batch = max(intval($batch / 1.5), 1);
            }
            $c = 0;
            return $result;
        }
    }
    $result = array();
    foreach ($buckets as $key => $value) {
        array_push($result, serialize($key));
        array_push($result, serialize($value));
    }
    return $result;
};";s:7:"context";a:3:{s:13:"numPartitions";i:2;s:13:"partitionFunc";C:32:"SuperClosure\SerializableClosure":240:{a:5:{s:4:"code";s:137:"function ($x) {
    if ($x == null) {
        return 0;
    }
    $h = null;
    if (is_array($x)) {
    }
    return hash('md5', $x);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:5:"limit";i:256;}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":3944:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":1767:{a:5:{s:4:"code";s:67:"function ($split, $iterator) use($f) {
    return $f($iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":1543:{a:5:{s:4:"code";s:480:"function ($iterator) use($memory, $serializer, $createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc) {
    file_put_contents('/home/gt/php_worker7.txt', 'here1
', FILE_APPEND);
    $agg = new \aggregator($createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc);
    $merger = new \ExternalMerger($agg, $memory * 0.9, $serializer);
    $merger->mergeValues($iterator);
    file_put_contents('/home/gt/php_worker7.txt', 'here2
', FILE_APPEND);
    return $merger->items();
};";s:7:"context";a:5:{s:6:"memory";i:512;s:10:"serializer";O:23:"auto_batched_serializer":10:{s:9:"best_size";i:65536;s:20:"UNLIMITED_BATCH_SIZE";i:-1;s:18:"UNKNOWN_BATCH_SIZE";i:0;s:10:"serializer";N;s:10:"batch_size";i:0;s:19:"END_OF_DATA_SECTION";i:-1;s:20:"PHP_EXCEPTION_THROWN";i:-2;s:11:"TIMING_DATA";i:-3;s:13:"END_OF_STREAM";i:-4;s:4:"NULL";i:-5;}s:18:"createCombinerFunc";C:32:"SuperClosure\SerializableClosure":135:{a:5:{s:4:"code";s:33:"function ($x) {
    return $x;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"mergeValueFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}s:18:"mergeCombinersFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1813:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":369:{a:5:{s:4:"code";s:76:"function ($any, $iterator) use($f) {
    return array_map($f, $iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":137:{a:5:{s:4:"code";s:43:"function ($x) {
    return array($x, 1);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1081:{a:5:{s:4:"code";s:758:"function ($split, $iterator) use($f) {
    $sub_is_array = False;
    foreach ($iterator as $key => $value) {
        $temp = $f($value);
        if (is_array($temp)) {
            $sub_is_array = True;
            break;
        }
    }
    if ($sub_is_array) {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            if (is_array($temp)) {
                foreach ($temp as $e) {
                    array_push($result, $e);
                }
            }
        }
        return $result;
    } else {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            array_push($result, $temp);
        }
        return $result;
    }
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":166:{a:5:{s:4:"code";s:72:"function ($line) {
    $temp = explode(' ', $line);
    return $temp;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}
here5
here6do do do 
socket_create()成功36665

socket_connect()成功
首次read_int()成功1
首次read_utf()成功5.6
here3C:32:"SuperClosure\SerializableClosure":6246:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":1938:{a:5:{s:4:"code";s:1484:"function ($iterator) use($numPartitions, $partitionFunc, $limit, $outputSerializer) {
    $buckets = array();
    $c = 0;
    $batch = min(10 * $numPartitions, 1000);
    foreach ($iterator as $element) {
        file_put_contents('/home/gt/php_worker9.txt', 'here1' . $element . '
', FILE_APPEND);
    }
    foreach ($iterator as $key => $value) {
        $buckets[$partitionFunc($key) % $numPartitions] = array();
        $buckets[$partitionFunc($key) % $numPartitions][$key] = $value;
        $c++;
        if ($c % 1000 == 0 && memory_get_usage() / 1024 / 1024 > $limit || $c > $batch) {
            $n = sizeof($buckets);
            $size = 0;
            $result = array();
            foreach ($buckets as $key2 => $value2) {
                #value是一个array
                array_push($result, serialize($key2));
                $d = serialize($value2);
                unset($value2);
                array_push($result, $d);
                $size += strlen($d);
            }
            $avg = intval($size / $n) >> 20;
            # let 1M < avg < 10M
            if ($avg < 1) {
                $batch *= 1.5;
            } elseif ($avg > 10) {
                $batch = max(intval($batch / 1.5), 1);
            }
            $c = 0;
            return $result;
        }
    }
    $result = array();
    foreach ($buckets as $key => $value) {
        array_push($result, serialize($key));
        array_push($result, serialize($value));
    }
    return $result;
};";s:7:"context";a:3:{s:13:"numPartitions";i:2;s:13:"partitionFunc";C:32:"SuperClosure\SerializableClosure":240:{a:5:{s:4:"code";s:137:"function ($x) {
    if ($x == null) {
        return 0;
    }
    $h = null;
    if (is_array($x)) {
    }
    return hash('md5', $x);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:5:"limit";i:256;}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":3944:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":1767:{a:5:{s:4:"code";s:67:"function ($split, $iterator) use($f) {
    return $f($iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":1543:{a:5:{s:4:"code";s:480:"function ($iterator) use($memory, $serializer, $createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc) {
    file_put_contents('/home/gt/php_worker7.txt', 'here1
', FILE_APPEND);
    $agg = new \aggregator($createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc);
    $merger = new \ExternalMerger($agg, $memory * 0.9, $serializer);
    $merger->mergeValues($iterator);
    file_put_contents('/home/gt/php_worker7.txt', 'here2
', FILE_APPEND);
    return $merger->items();
};";s:7:"context";a:5:{s:6:"memory";i:512;s:10:"serializer";O:23:"auto_batched_serializer":10:{s:9:"best_size";i:65536;s:20:"UNLIMITED_BATCH_SIZE";i:-1;s:18:"UNKNOWN_BATCH_SIZE";i:0;s:10:"serializer";N;s:10:"batch_size";i:0;s:19:"END_OF_DATA_SECTION";i:-1;s:20:"PHP_EXCEPTION_THROWN";i:-2;s:11:"TIMING_DATA";i:-3;s:13:"END_OF_STREAM";i:-4;s:4:"NULL";i:-5;}s:18:"createCombinerFunc";C:32:"SuperClosure\SerializableClosure":135:{a:5:{s:4:"code";s:33:"function ($x) {
    return $x;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"mergeValueFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}s:18:"mergeCombinersFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1813:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":369:{a:5:{s:4:"code";s:76:"function ($any, $iterator) use($f) {
    return array_map($f, $iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":137:{a:5:{s:4:"code";s:43:"function ($x) {
    return array($x, 1);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1081:{a:5:{s:4:"code";s:758:"function ($split, $iterator) use($f) {
    $sub_is_array = False;
    foreach ($iterator as $key => $value) {
        $temp = $f($value);
        if (is_array($temp)) {
            $sub_is_array = True;
            break;
        }
    }
    if ($sub_is_array) {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            if (is_array($temp)) {
                foreach ($temp as $e) {
                    array_push($result, $e);
                }
            }
        }
        return $result;
    } else {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            array_push($result, $temp);
        }
        return $result;
    }
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":166:{a:5:{s:4:"code";s:72:"function ($line) {
    $temp = explode(' ', $line);
    return $temp;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}
here5
here6do do do 
socket_create()成功51434

socket_connect()成功
首次read_int()成功0
首次read_utf()成功5.6
here3C:32:"SuperClosure\SerializableClosure":6246:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":1938:{a:5:{s:4:"code";s:1484:"function ($iterator) use($numPartitions, $partitionFunc, $limit, $outputSerializer) {
    $buckets = array();
    $c = 0;
    $batch = min(10 * $numPartitions, 1000);
    foreach ($iterator as $element) {
        file_put_contents('/home/gt/php_worker9.txt', 'here1' . $element . '
', FILE_APPEND);
    }
    foreach ($iterator as $key => $value) {
        $buckets[$partitionFunc($key) % $numPartitions] = array();
        $buckets[$partitionFunc($key) % $numPartitions][$key] = $value;
        $c++;
        if ($c % 1000 == 0 && memory_get_usage() / 1024 / 1024 > $limit || $c > $batch) {
            $n = sizeof($buckets);
            $size = 0;
            $result = array();
            foreach ($buckets as $key2 => $value2) {
                #value是一个array
                array_push($result, serialize($key2));
                $d = serialize($value2);
                unset($value2);
                array_push($result, $d);
                $size += strlen($d);
            }
            $avg = intval($size / $n) >> 20;
            # let 1M < avg < 10M
            if ($avg < 1) {
                $batch *= 1.5;
            } elseif ($avg > 10) {
                $batch = max(intval($batch / 1.5), 1);
            }
            $c = 0;
            return $result;
        }
    }
    $result = array();
    foreach ($buckets as $key => $value) {
        array_push($result, serialize($key));
        array_push($result, serialize($value));
    }
    return $result;
};";s:7:"context";a:3:{s:13:"numPartitions";i:2;s:13:"partitionFunc";C:32:"SuperClosure\SerializableClosure":240:{a:5:{s:4:"code";s:137:"function ($x) {
    if ($x == null) {
        return 0;
    }
    $h = null;
    if (is_array($x)) {
    }
    return hash('md5', $x);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:5:"limit";i:256;}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":3944:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":1767:{a:5:{s:4:"code";s:67:"function ($split, $iterator) use($f) {
    return $f($iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":1543:{a:5:{s:4:"code";s:480:"function ($iterator) use($memory, $serializer, $createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc) {
    file_put_contents('/home/gt/php_worker7.txt', 'here1
', FILE_APPEND);
    $agg = new \aggregator($createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc);
    $merger = new \ExternalMerger($agg, $memory * 0.9, $serializer);
    $merger->mergeValues($iterator);
    file_put_contents('/home/gt/php_worker7.txt', 'here2
', FILE_APPEND);
    return $merger->items();
};";s:7:"context";a:5:{s:6:"memory";i:512;s:10:"serializer";O:23:"auto_batched_serializer":10:{s:9:"best_size";i:65536;s:20:"UNLIMITED_BATCH_SIZE";i:-1;s:18:"UNKNOWN_BATCH_SIZE";i:0;s:10:"serializer";N;s:10:"batch_size";i:0;s:19:"END_OF_DATA_SECTION";i:-1;s:20:"PHP_EXCEPTION_THROWN";i:-2;s:11:"TIMING_DATA";i:-3;s:13:"END_OF_STREAM";i:-4;s:4:"NULL";i:-5;}s:18:"createCombinerFunc";C:32:"SuperClosure\SerializableClosure":135:{a:5:{s:4:"code";s:33:"function ($x) {
    return $x;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"mergeValueFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}s:18:"mergeCombinersFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1813:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":369:{a:5:{s:4:"code";s:76:"function ($any, $iterator) use($f) {
    return array_map($f, $iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":137:{a:5:{s:4:"code";s:43:"function ($x) {
    return array($x, 1);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1081:{a:5:{s:4:"code";s:758:"function ($split, $iterator) use($f) {
    $sub_is_array = False;
    foreach ($iterator as $key => $value) {
        $temp = $f($value);
        if (is_array($temp)) {
            $sub_is_array = True;
            break;
        }
    }
    if ($sub_is_array) {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            if (is_array($temp)) {
                foreach ($temp as $e) {
                    array_push($result, $e);
                }
            }
        }
        return $result;
    } else {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            array_push($result, $temp);
        }
        return $result;
    }
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":166:{a:5:{s:4:"code";s:72:"function ($line) {
    $temp = explode(' ', $line);
    return $temp;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}
here5
here6test test test test try try try 
socket_create()成功52112

socket_connect()成功
首次read_int()成功1
首次read_utf()成功5.6
here3C:32:"SuperClosure\SerializableClosure":6246:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":1938:{a:5:{s:4:"code";s:1484:"function ($iterator) use($numPartitions, $partitionFunc, $limit, $outputSerializer) {
    $buckets = array();
    $c = 0;
    $batch = min(10 * $numPartitions, 1000);
    foreach ($iterator as $element) {
        file_put_contents('/home/gt/php_worker9.txt', 'here1' . $element . '
', FILE_APPEND);
    }
    foreach ($iterator as $key => $value) {
        $buckets[$partitionFunc($key) % $numPartitions] = array();
        $buckets[$partitionFunc($key) % $numPartitions][$key] = $value;
        $c++;
        if ($c % 1000 == 0 && memory_get_usage() / 1024 / 1024 > $limit || $c > $batch) {
            $n = sizeof($buckets);
            $size = 0;
            $result = array();
            foreach ($buckets as $key2 => $value2) {
                #value是一个array
                array_push($result, serialize($key2));
                $d = serialize($value2);
                unset($value2);
                array_push($result, $d);
                $size += strlen($d);
            }
            $avg = intval($size / $n) >> 20;
            # let 1M < avg < 10M
            if ($avg < 1) {
                $batch *= 1.5;
            } elseif ($avg > 10) {
                $batch = max(intval($batch / 1.5), 1);
            }
            $c = 0;
            return $result;
        }
    }
    $result = array();
    foreach ($buckets as $key => $value) {
        array_push($result, serialize($key));
        array_push($result, serialize($value));
    }
    return $result;
};";s:7:"context";a:3:{s:13:"numPartitions";i:2;s:13:"partitionFunc";C:32:"SuperClosure\SerializableClosure":240:{a:5:{s:4:"code";s:137:"function ($x) {
    if ($x == null) {
        return 0;
    }
    $h = null;
    if (is_array($x)) {
    }
    return hash('md5', $x);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:5:"limit";i:256;}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":3944:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":1767:{a:5:{s:4:"code";s:67:"function ($split, $iterator) use($f) {
    return $f($iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":1543:{a:5:{s:4:"code";s:480:"function ($iterator) use($memory, $serializer, $createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc) {
    file_put_contents('/home/gt/php_worker7.txt', 'here1
', FILE_APPEND);
    $agg = new \aggregator($createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc);
    $merger = new \ExternalMerger($agg, $memory * 0.9, $serializer);
    $merger->mergeValues($iterator);
    file_put_contents('/home/gt/php_worker7.txt', 'here2
', FILE_APPEND);
    return $merger->items();
};";s:7:"context";a:5:{s:6:"memory";i:512;s:10:"serializer";O:23:"auto_batched_serializer":10:{s:9:"best_size";i:65536;s:20:"UNLIMITED_BATCH_SIZE";i:-1;s:18:"UNKNOWN_BATCH_SIZE";i:0;s:10:"serializer";N;s:10:"batch_size";i:0;s:19:"END_OF_DATA_SECTION";i:-1;s:20:"PHP_EXCEPTION_THROWN";i:-2;s:11:"TIMING_DATA";i:-3;s:13:"END_OF_STREAM";i:-4;s:4:"NULL";i:-5;}s:18:"createCombinerFunc";C:32:"SuperClosure\SerializableClosure":135:{a:5:{s:4:"code";s:33:"function ($x) {
    return $x;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"mergeValueFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}s:18:"mergeCombinersFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1813:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":369:{a:5:{s:4:"code";s:76:"function ($any, $iterator) use($f) {
    return array_map($f, $iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":137:{a:5:{s:4:"code";s:43:"function ($x) {
    return array($x, 1);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1081:{a:5:{s:4:"code";s:758:"function ($split, $iterator) use($f) {
    $sub_is_array = False;
    foreach ($iterator as $key => $value) {
        $temp = $f($value);
        if (is_array($temp)) {
            $sub_is_array = True;
            break;
        }
    }
    if ($sub_is_array) {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            if (is_array($temp)) {
                foreach ($temp as $e) {
                    array_push($result, $e);
                }
            }
        }
        return $result;
    } else {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            array_push($result, $temp);
        }
        return $result;
    }
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":166:{a:5:{s:4:"code";s:72:"function ($line) {
    $temp = explode(' ', $line);
    return $temp;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}
here5
here6do do do 
socket_create()成功51017

socket_connect()成功
首次read_int()成功0
首次read_utf()成功5.6
socket_create()成功45972

socket_connect()成功
首次read_int()成功1
首次read_utf()成功5.6
here3C:32:"SuperClosure\SerializableClosure":6246:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":1938:{a:5:{s:4:"code";s:1484:"function ($iterator) use($numPartitions, $partitionFunc, $limit, $outputSerializer) {
    $buckets = array();
    $c = 0;
    $batch = min(10 * $numPartitions, 1000);
    foreach ($iterator as $element) {
        file_put_contents('/home/gt/php_worker9.txt', 'here1' . $element . '
', FILE_APPEND);
    }
    foreach ($iterator as $key => $value) {
        $buckets[$partitionFunc($key) % $numPartitions] = array();
        $buckets[$partitionFunc($key) % $numPartitions][$key] = $value;
        $c++;
        if ($c % 1000 == 0 && memory_get_usage() / 1024 / 1024 > $limit || $c > $batch) {
            $n = sizeof($buckets);
            $size = 0;
            $result = array();
            foreach ($buckets as $key2 => $value2) {
                #value是一个array
                array_push($result, serialize($key2));
                $d = serialize($value2);
                unset($value2);
                array_push($result, $d);
                $size += strlen($d);
            }
            $avg = intval($size / $n) >> 20;
            # let 1M < avg < 10M
            if ($avg < 1) {
                $batch *= 1.5;
            } elseif ($avg > 10) {
                $batch = max(intval($batch / 1.5), 1);
            }
            $c = 0;
            return $result;
        }
    }
    $result = array();
    foreach ($buckets as $key => $value) {
        array_push($result, serialize($key));
        array_push($result, serialize($value));
    }
    return $result;
};";s:7:"context";a:3:{s:13:"numPartitions";i:2;s:13:"partitionFunc";C:32:"SuperClosure\SerializableClosure":240:{a:5:{s:4:"code";s:137:"function ($x) {
    if ($x == null) {
        return 0;
    }
    $h = null;
    if (is_array($x)) {
    }
    return hash('md5', $x);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:5:"limit";i:256;}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":3944:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":1767:{a:5:{s:4:"code";s:67:"function ($split, $iterator) use($f) {
    return $f($iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":1543:{a:5:{s:4:"code";s:480:"function ($iterator) use($memory, $serializer, $createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc) {
    file_put_contents('/home/gt/php_worker7.txt', 'here1
', FILE_APPEND);
    $agg = new \aggregator($createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc);
    $merger = new \ExternalMerger($agg, $memory * 0.9, $serializer);
    $merger->mergeValues($iterator);
    file_put_contents('/home/gt/php_worker7.txt', 'here2
', FILE_APPEND);
    return $merger->items();
};";s:7:"context";a:5:{s:6:"memory";i:512;s:10:"serializer";O:23:"auto_batched_serializer":10:{s:9:"best_size";i:65536;s:20:"UNLIMITED_BATCH_SIZE";i:-1;s:18:"UNKNOWN_BATCH_SIZE";i:0;s:10:"serializer";N;s:10:"batch_size";i:0;s:19:"END_OF_DATA_SECTION";i:-1;s:20:"PHP_EXCEPTION_THROWN";i:-2;s:11:"TIMING_DATA";i:-3;s:13:"END_OF_STREAM";i:-4;s:4:"NULL";i:-5;}s:18:"createCombinerFunc";C:32:"SuperClosure\SerializableClosure":135:{a:5:{s:4:"code";s:33:"function ($x) {
    return $x;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"mergeValueFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}s:18:"mergeCombinersFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1813:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":369:{a:5:{s:4:"code";s:76:"function ($any, $iterator) use($f) {
    return array_map($f, $iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":137:{a:5:{s:4:"code";s:43:"function ($x) {
    return array($x, 1);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1081:{a:5:{s:4:"code";s:758:"function ($split, $iterator) use($f) {
    $sub_is_array = False;
    foreach ($iterator as $key => $value) {
        $temp = $f($value);
        if (is_array($temp)) {
            $sub_is_array = True;
            break;
        }
    }
    if ($sub_is_array) {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            if (is_array($temp)) {
                foreach ($temp as $e) {
                    array_push($result, $e);
                }
            }
        }
        return $result;
    } else {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            array_push($result, $temp);
        }
        return $result;
    }
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":166:{a:5:{s:4:"code";s:72:"function ($line) {
    $temp = explode(' ', $line);
    return $temp;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}
here5
socket_create()成功52443

here6do do do 
here7 array
here8  Array
socket_connect()成功
首次read_int()成功0
首次read_utf()成功5.6
here3C:32:"SuperClosure\SerializableClosure":6246:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":1938:{a:5:{s:4:"code";s:1484:"function ($iterator) use($numPartitions, $partitionFunc, $limit, $outputSerializer) {
    $buckets = array();
    $c = 0;
    $batch = min(10 * $numPartitions, 1000);
    foreach ($iterator as $element) {
        file_put_contents('/home/gt/php_worker9.txt', 'here1' . $element . '
', FILE_APPEND);
    }
    foreach ($iterator as $key => $value) {
        $buckets[$partitionFunc($key) % $numPartitions] = array();
        $buckets[$partitionFunc($key) % $numPartitions][$key] = $value;
        $c++;
        if ($c % 1000 == 0 && memory_get_usage() / 1024 / 1024 > $limit || $c > $batch) {
            $n = sizeof($buckets);
            $size = 0;
            $result = array();
            foreach ($buckets as $key2 => $value2) {
                #value是一个array
                array_push($result, serialize($key2));
                $d = serialize($value2);
                unset($value2);
                array_push($result, $d);
                $size += strlen($d);
            }
            $avg = intval($size / $n) >> 20;
            # let 1M < avg < 10M
            if ($avg < 1) {
                $batch *= 1.5;
            } elseif ($avg > 10) {
                $batch = max(intval($batch / 1.5), 1);
            }
            $c = 0;
            return $result;
        }
    }
    $result = array();
    foreach ($buckets as $key => $value) {
        array_push($result, serialize($key));
        array_push($result, serialize($value));
    }
    return $result;
};";s:7:"context";a:3:{s:13:"numPartitions";i:2;s:13:"partitionFunc";C:32:"SuperClosure\SerializableClosure":240:{a:5:{s:4:"code";s:137:"function ($x) {
    if ($x == null) {
        return 0;
    }
    $h = null;
    if (is_array($x)) {
    }
    return hash('md5', $x);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:5:"limit";i:256;}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":3944:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":1767:{a:5:{s:4:"code";s:67:"function ($split, $iterator) use($f) {
    return $f($iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":1543:{a:5:{s:4:"code";s:480:"function ($iterator) use($memory, $serializer, $createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc) {
    file_put_contents('/home/gt/php_worker7.txt', 'here1
', FILE_APPEND);
    $agg = new \aggregator($createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc);
    $merger = new \ExternalMerger($agg, $memory * 0.9, $serializer);
    $merger->mergeValues($iterator);
    file_put_contents('/home/gt/php_worker7.txt', 'here2
', FILE_APPEND);
    return $merger->items();
};";s:7:"context";a:5:{s:6:"memory";i:512;s:10:"serializer";O:23:"auto_batched_serializer":10:{s:9:"best_size";i:65536;s:20:"UNLIMITED_BATCH_SIZE";i:-1;s:18:"UNKNOWN_BATCH_SIZE";i:0;s:10:"serializer";N;s:10:"batch_size";i:0;s:19:"END_OF_DATA_SECTION";i:-1;s:20:"PHP_EXCEPTION_THROWN";i:-2;s:11:"TIMING_DATA";i:-3;s:13:"END_OF_STREAM";i:-4;s:4:"NULL";i:-5;}s:18:"createCombinerFunc";C:32:"SuperClosure\SerializableClosure":135:{a:5:{s:4:"code";s:33:"function ($x) {
    return $x;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"mergeValueFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}s:18:"mergeCombinersFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1813:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":369:{a:5:{s:4:"code";s:76:"function ($any, $iterator) use($f) {
    return array_map($f, $iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":137:{a:5:{s:4:"code";s:43:"function ($x) {
    return array($x, 1);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1081:{a:5:{s:4:"code";s:758:"function ($split, $iterator) use($f) {
    $sub_is_array = False;
    foreach ($iterator as $key => $value) {
        $temp = $f($value);
        if (is_array($temp)) {
            $sub_is_array = True;
            break;
        }
    }
    if ($sub_is_array) {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            if (is_array($temp)) {
                foreach ($temp as $e) {
                    array_push($result, $e);
                }
            }
        }
        return $result;
    } else {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            array_push($result, $temp);
        }
        return $result;
    }
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":166:{a:5:{s:4:"code";s:72:"function ($line) {
    $temp = explode(' ', $line);
    return $temp;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}
here5
here6test test test test try try try 
here7 array
here8  Array
socket_create()成功37194

socket_connect()成功
首次read_int()成功1
首次read_utf()成功5.6
here3C:32:"SuperClosure\SerializableClosure":1616:{a:5:{s:4:"code";s:67:"function ($split, $iterator) use($f) {
    return $f($iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":1392:{a:5:{s:4:"code";s:329:"function ($iterator) use($memory, $serializer, $createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc) {
    $agg = new \aggregator($createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc);
    $merger = new \ExternalMerger($agg, $memory, $serializer);
    $merger->mergeCombiners($iterator);
    return $merger->items();
};";s:7:"context";a:5:{s:6:"memory";i:512;s:10:"serializer";O:23:"auto_batched_serializer":10:{s:9:"best_size";i:65536;s:20:"UNLIMITED_BATCH_SIZE";i:-1;s:18:"UNKNOWN_BATCH_SIZE";i:0;s:10:"serializer";N;s:10:"batch_size";i:0;s:19:"END_OF_DATA_SECTION";i:-1;s:20:"PHP_EXCEPTION_THROWN";i:-2;s:11:"TIMING_DATA";i:-3;s:13:"END_OF_STREAM";i:-4;s:4:"NULL";i:-5;}s:18:"createCombinerFunc";C:32:"SuperClosure\SerializableClosure":135:{a:5:{s:4:"code";s:33:"function ($x) {
    return $x;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"mergeValueFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}s:18:"mergeCombinersFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}
here5
here7 array
here8  Array
socket_create()成功49220

socket_connect()成功
首次read_int()成功0
首次read_utf()成功5.6
here3C:32:"SuperClosure\SerializableClosure":1616:{a:5:{s:4:"code";s:67:"function ($split, $iterator) use($f) {
    return $f($iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":1392:{a:5:{s:4:"code";s:329:"function ($iterator) use($memory, $serializer, $createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc) {
    $agg = new \aggregator($createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc);
    $merger = new \ExternalMerger($agg, $memory, $serializer);
    $merger->mergeCombiners($iterator);
    return $merger->items();
};";s:7:"context";a:5:{s:6:"memory";i:512;s:10:"serializer";O:23:"auto_batched_serializer":10:{s:9:"best_size";i:65536;s:20:"UNLIMITED_BATCH_SIZE";i:-1;s:18:"UNKNOWN_BATCH_SIZE";i:0;s:10:"serializer";N;s:10:"batch_size";i:0;s:19:"END_OF_DATA_SECTION";i:-1;s:20:"PHP_EXCEPTION_THROWN";i:-2;s:11:"TIMING_DATA";i:-3;s:13:"END_OF_STREAM";i:-4;s:4:"NULL";i:-5;}s:18:"createCombinerFunc";C:32:"SuperClosure\SerializableClosure":135:{a:5:{s:4:"code";s:33:"function ($x) {
    return $x;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"mergeValueFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}s:18:"mergeCombinersFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}
here5
here7 array
here8  Array
socket_create()成功51537

socket_connect()成功
首次read_int()成功1
首次read_utf()成功5.6
socket_create()成功58981

socket_connect()成功
here3C:32:"SuperClosure\SerializableClosure":6246:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":1938:{a:5:{s:4:"code";s:1484:"function ($iterator) use($numPartitions, $partitionFunc, $limit, $outputSerializer) {
    $buckets = array();
    $c = 0;
    $batch = min(10 * $numPartitions, 1000);
    foreach ($iterator as $element) {
        file_put_contents('/home/gt/php_worker9.txt', 'here1' . $element . '
', FILE_APPEND);
    }
    foreach ($iterator as $key => $value) {
        $buckets[$partitionFunc($key) % $numPartitions] = array();
        $buckets[$partitionFunc($key) % $numPartitions][$key] = $value;
        $c++;
        if ($c % 1000 == 0 && memory_get_usage() / 1024 / 1024 > $limit || $c > $batch) {
            $n = sizeof($buckets);
            $size = 0;
            $result = array();
            foreach ($buckets as $key2 => $value2) {
                #value是一个array
                array_push($result, serialize($key2));
                $d = serialize($value2);
                unset($value2);
                array_push($result, $d);
                $size += strlen($d);
            }
            $avg = intval($size / $n) >> 20;
            # let 1M < avg < 10M
            if ($avg < 1) {
                $batch *= 1.5;
            } elseif ($avg > 10) {
                $batch = max(intval($batch / 1.5), 1);
            }
            $c = 0;
            return $result;
        }
    }
    $result = array();
    foreach ($buckets as $key => $value) {
        array_push($result, serialize($key));
        array_push($result, serialize($value));
    }
    return $result;
};";s:7:"context";a:3:{s:13:"numPartitions";i:2;s:13:"partitionFunc";C:32:"SuperClosure\SerializableClosure":240:{a:5:{s:4:"code";s:137:"function ($x) {
    if ($x == null) {
        return 0;
    }
    $h = null;
    if (is_array($x)) {
    }
    return hash('md5', $x);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:5:"limit";i:256;}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":3944:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":1767:{a:5:{s:4:"code";s:67:"function ($split, $iterator) use($f) {
    return $f($iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":1543:{a:5:{s:4:"code";s:480:"function ($iterator) use($memory, $serializer, $createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc) {
    file_put_contents('/home/gt/php_worker7.txt', 'here1
', FILE_APPEND);
    $agg = new \aggregator($createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc);
    $merger = new \ExternalMerger($agg, $memory * 0.9, $serializer);
    $merger->mergeValues($iterator);
    file_put_contents('/home/gt/php_worker7.txt', 'here2
', FILE_APPEND);
    return $merger->items();
};";s:7:"context";a:5:{s:6:"memory";i:512;s:10:"serializer";O:23:"auto_batched_serializer":10:{s:9:"best_size";i:65536;s:20:"UNLIMITED_BATCH_SIZE";i:-1;s:18:"UNKNOWN_BATCH_SIZE";i:0;s:10:"serializer";N;s:10:"batch_size";i:0;s:19:"END_OF_DATA_SECTION";i:-1;s:20:"PHP_EXCEPTION_THROWN";i:-2;s:11:"TIMING_DATA";i:-3;s:13:"END_OF_STREAM";i:-4;s:4:"NULL";i:-5;}s:18:"createCombinerFunc";C:32:"SuperClosure\SerializableClosure":135:{a:5:{s:4:"code";s:33:"function ($x) {
    return $x;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"mergeValueFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}s:18:"mergeCombinersFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1813:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":369:{a:5:{s:4:"code";s:76:"function ($any, $iterator) use($f) {
    return array_map($f, $iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":137:{a:5:{s:4:"code";s:43:"function ($x) {
    return array($x, 1);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1081:{a:5:{s:4:"code";s:758:"function ($split, $iterator) use($f) {
    $sub_is_array = False;
    foreach ($iterator as $key => $value) {
        $temp = $f($value);
        if (is_array($temp)) {
            $sub_is_array = True;
            break;
        }
    }
    if ($sub_is_array) {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            if (is_array($temp)) {
                foreach ($temp as $e) {
                    array_push($result, $e);
                }
            }
        }
        return $result;
    } else {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            array_push($result, $temp);
        }
        return $result;
    }
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":166:{a:5:{s:4:"code";s:72:"function ($line) {
    $temp = explode(' ', $line);
    return $temp;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}
here5
here6do do do 
here7 array
here8  Array
首次read_int()成功0
首次read_utf()成功5.6
here3C:32:"SuperClosure\SerializableClosure":6246:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":1938:{a:5:{s:4:"code";s:1484:"function ($iterator) use($numPartitions, $partitionFunc, $limit, $outputSerializer) {
    $buckets = array();
    $c = 0;
    $batch = min(10 * $numPartitions, 1000);
    foreach ($iterator as $element) {
        file_put_contents('/home/gt/php_worker9.txt', 'here1' . $element . '
', FILE_APPEND);
    }
    foreach ($iterator as $key => $value) {
        $buckets[$partitionFunc($key) % $numPartitions] = array();
        $buckets[$partitionFunc($key) % $numPartitions][$key] = $value;
        $c++;
        if ($c % 1000 == 0 && memory_get_usage() / 1024 / 1024 > $limit || $c > $batch) {
            $n = sizeof($buckets);
            $size = 0;
            $result = array();
            foreach ($buckets as $key2 => $value2) {
                #value是一个array
                array_push($result, serialize($key2));
                $d = serialize($value2);
                unset($value2);
                array_push($result, $d);
                $size += strlen($d);
            }
            $avg = intval($size / $n) >> 20;
            # let 1M < avg < 10M
            if ($avg < 1) {
                $batch *= 1.5;
            } elseif ($avg > 10) {
                $batch = max(intval($batch / 1.5), 1);
            }
            $c = 0;
            return $result;
        }
    }
    $result = array();
    foreach ($buckets as $key => $value) {
        array_push($result, serialize($key));
        array_push($result, serialize($value));
    }
    return $result;
};";s:7:"context";a:3:{s:13:"numPartitions";i:2;s:13:"partitionFunc";C:32:"SuperClosure\SerializableClosure":240:{a:5:{s:4:"code";s:137:"function ($x) {
    if ($x == null) {
        return 0;
    }
    $h = null;
    if (is_array($x)) {
    }
    return hash('md5', $x);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:5:"limit";i:256;}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":3944:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":1767:{a:5:{s:4:"code";s:67:"function ($split, $iterator) use($f) {
    return $f($iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":1543:{a:5:{s:4:"code";s:480:"function ($iterator) use($memory, $serializer, $createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc) {
    file_put_contents('/home/gt/php_worker7.txt', 'here1
', FILE_APPEND);
    $agg = new \aggregator($createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc);
    $merger = new \ExternalMerger($agg, $memory * 0.9, $serializer);
    $merger->mergeValues($iterator);
    file_put_contents('/home/gt/php_worker7.txt', 'here2
', FILE_APPEND);
    return $merger->items();
};";s:7:"context";a:5:{s:6:"memory";i:512;s:10:"serializer";O:23:"auto_batched_serializer":10:{s:9:"best_size";i:65536;s:20:"UNLIMITED_BATCH_SIZE";i:-1;s:18:"UNKNOWN_BATCH_SIZE";i:0;s:10:"serializer";N;s:10:"batch_size";i:0;s:19:"END_OF_DATA_SECTION";i:-1;s:20:"PHP_EXCEPTION_THROWN";i:-2;s:11:"TIMING_DATA";i:-3;s:13:"END_OF_STREAM";i:-4;s:4:"NULL";i:-5;}s:18:"createCombinerFunc";C:32:"SuperClosure\SerializableClosure":135:{a:5:{s:4:"code";s:33:"function ($x) {
    return $x;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"mergeValueFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}s:18:"mergeCombinersFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1813:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":369:{a:5:{s:4:"code";s:76:"function ($any, $iterator) use($f) {
    return array_map($f, $iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":137:{a:5:{s:4:"code";s:43:"function ($x) {
    return array($x, 1);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1081:{a:5:{s:4:"code";s:758:"function ($split, $iterator) use($f) {
    $sub_is_array = False;
    foreach ($iterator as $key => $value) {
        $temp = $f($value);
        if (is_array($temp)) {
            $sub_is_array = True;
            break;
        }
    }
    if ($sub_is_array) {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            if (is_array($temp)) {
                foreach ($temp as $e) {
                    array_push($result, $e);
                }
            }
        }
        return $result;
    } else {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            array_push($result, $temp);
        }
        return $result;
    }
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":166:{a:5:{s:4:"code";s:72:"function ($line) {
    $temp = explode(' ', $line);
    return $temp;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}
here5
here6test test test test try try try 
here7 array
here8  Array
socket_create()成功41230

socket_connect()成功
首次read_int()成功1
首次read_utf()成功5.6
here3C:32:"SuperClosure\SerializableClosure":1616:{a:5:{s:4:"code";s:67:"function ($split, $iterator) use($f) {
    return $f($iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":1392:{a:5:{s:4:"code";s:329:"function ($iterator) use($memory, $serializer, $createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc) {
    $agg = new \aggregator($createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc);
    $merger = new \ExternalMerger($agg, $memory, $serializer);
    $merger->mergeCombiners($iterator);
    return $merger->items();
};";s:7:"context";a:5:{s:6:"memory";i:512;s:10:"serializer";O:23:"auto_batched_serializer":10:{s:9:"best_size";i:65536;s:20:"UNLIMITED_BATCH_SIZE";i:-1;s:18:"UNKNOWN_BATCH_SIZE";i:0;s:10:"serializer";N;s:10:"batch_size";i:0;s:19:"END_OF_DATA_SECTION";i:-1;s:20:"PHP_EXCEPTION_THROWN";i:-2;s:11:"TIMING_DATA";i:-3;s:13:"END_OF_STREAM";i:-4;s:4:"NULL";i:-5;}s:18:"createCombinerFunc";C:32:"SuperClosure\SerializableClosure":135:{a:5:{s:4:"code";s:33:"function ($x) {
    return $x;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"mergeValueFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}s:18:"mergeCombinersFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}
here5
here7 array
here8  Array
socket_create()成功36540

socket_connect()成功
首次read_int()成功0
首次read_utf()成功5.6
here3C:32:"SuperClosure\SerializableClosure":1616:{a:5:{s:4:"code";s:67:"function ($split, $iterator) use($f) {
    return $f($iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":1392:{a:5:{s:4:"code";s:329:"function ($iterator) use($memory, $serializer, $createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc) {
    $agg = new \aggregator($createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc);
    $merger = new \ExternalMerger($agg, $memory, $serializer);
    $merger->mergeCombiners($iterator);
    return $merger->items();
};";s:7:"context";a:5:{s:6:"memory";i:512;s:10:"serializer";O:23:"auto_batched_serializer":10:{s:9:"best_size";i:65536;s:20:"UNLIMITED_BATCH_SIZE";i:-1;s:18:"UNKNOWN_BATCH_SIZE";i:0;s:10:"serializer";N;s:10:"batch_size";i:0;s:19:"END_OF_DATA_SECTION";i:-1;s:20:"PHP_EXCEPTION_THROWN";i:-2;s:11:"TIMING_DATA";i:-3;s:13:"END_OF_STREAM";i:-4;s:4:"NULL";i:-5;}s:18:"createCombinerFunc";C:32:"SuperClosure\SerializableClosure":135:{a:5:{s:4:"code";s:33:"function ($x) {
    return $x;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"mergeValueFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}s:18:"mergeCombinersFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}
here5
here7 array
here8  Array
socket_create()成功55185

socket_connect()成功
socket_create()成功38187

socket_connect()成功
首次read_int()成功0
首次read_utf()成功5.6
首次read_int()成功1
首次read_utf()成功5.6
here3C:32:"SuperClosure\SerializableClosure":6246:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":1938:{a:5:{s:4:"code";s:1484:"function ($iterator) use($numPartitions, $partitionFunc, $limit, $outputSerializer) {
    $buckets = array();
    $c = 0;
    $batch = min(10 * $numPartitions, 1000);
    foreach ($iterator as $element) {
        file_put_contents('/home/gt/php_worker9.txt', 'here1' . $element . '
', FILE_APPEND);
    }
    foreach ($iterator as $key => $value) {
        $buckets[$partitionFunc($key) % $numPartitions] = array();
        $buckets[$partitionFunc($key) % $numPartitions][$key] = $value;
        $c++;
        if ($c % 1000 == 0 && memory_get_usage() / 1024 / 1024 > $limit || $c > $batch) {
            $n = sizeof($buckets);
            $size = 0;
            $result = array();
            foreach ($buckets as $key2 => $value2) {
                #value是一个array
                array_push($result, serialize($key2));
                $d = serialize($value2);
                unset($value2);
                array_push($result, $d);
                $size += strlen($d);
            }
            $avg = intval($size / $n) >> 20;
            # let 1M < avg < 10M
            if ($avg < 1) {
                $batch *= 1.5;
            } elseif ($avg > 10) {
                $batch = max(intval($batch / 1.5), 1);
            }
            $c = 0;
            return $result;
        }
    }
    $result = array();
    foreach ($buckets as $key => $value) {
        array_push($result, serialize($key));
        array_push($result, serialize($value));
    }
    return $result;
};";s:7:"context";a:3:{s:13:"numPartitions";i:2;s:13:"partitionFunc";C:32:"SuperClosure\SerializableClosure":240:{a:5:{s:4:"code";s:137:"function ($x) {
    if ($x == null) {
        return 0;
    }
    $h = null;
    if (is_array($x)) {
    }
    return hash('md5', $x);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:5:"limit";i:256;}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":3944:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":1767:{a:5:{s:4:"code";s:67:"function ($split, $iterator) use($f) {
    return $f($iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":1543:{a:5:{s:4:"code";s:480:"function ($iterator) use($memory, $serializer, $createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc) {
    file_put_contents('/home/gt/php_worker7.txt', 'here1
', FILE_APPEND);
    $agg = new \aggregator($createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc);
    $merger = new \ExternalMerger($agg, $memory * 0.9, $serializer);
    $merger->mergeValues($iterator);
    file_put_contents('/home/gt/php_worker7.txt', 'here2
', FILE_APPEND);
    return $merger->items();
};";s:7:"context";a:5:{s:6:"memory";i:512;s:10:"serializer";O:23:"auto_batched_serializer":10:{s:9:"best_size";i:65536;s:20:"UNLIMITED_BATCH_SIZE";i:-1;s:18:"UNKNOWN_BATCH_SIZE";i:0;s:10:"serializer";N;s:10:"batch_size";i:0;s:19:"END_OF_DATA_SECTION";i:-1;s:20:"PHP_EXCEPTION_THROWN";i:-2;s:11:"TIMING_DATA";i:-3;s:13:"END_OF_STREAM";i:-4;s:4:"NULL";i:-5;}s:18:"createCombinerFunc";C:32:"SuperClosure\SerializableClosure":135:{a:5:{s:4:"code";s:33:"function ($x) {
    return $x;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"mergeValueFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}s:18:"mergeCombinersFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1813:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":369:{a:5:{s:4:"code";s:76:"function ($any, $iterator) use($f) {
    return array_map($f, $iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":137:{a:5:{s:4:"code";s:43:"function ($x) {
    return array($x, 1);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1081:{a:5:{s:4:"code";s:758:"function ($split, $iterator) use($f) {
    $sub_is_array = False;
    foreach ($iterator as $key => $value) {
        $temp = $f($value);
        if (is_array($temp)) {
            $sub_is_array = True;
            break;
        }
    }
    if ($sub_is_array) {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            if (is_array($temp)) {
                foreach ($temp as $e) {
                    array_push($result, $e);
                }
            }
        }
        return $result;
    } else {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            array_push($result, $temp);
        }
        return $result;
    }
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":166:{a:5:{s:4:"code";s:72:"function ($line) {
    $temp = explode(' ', $line);
    return $temp;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}
here3C:32:"SuperClosure\SerializableClosure":6246:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":1938:{a:5:{s:4:"code";s:1484:"function ($iterator) use($numPartitions, $partitionFunc, $limit, $outputSerializer) {
    $buckets = array();
    $c = 0;
    $batch = min(10 * $numPartitions, 1000);
    foreach ($iterator as $element) {
        file_put_contents('/home/gt/php_worker9.txt', 'here1' . $element . '
', FILE_APPEND);
    }
    foreach ($iterator as $key => $value) {
        $buckets[$partitionFunc($key) % $numPartitions] = array();
        $buckets[$partitionFunc($key) % $numPartitions][$key] = $value;
        $c++;
        if ($c % 1000 == 0 && memory_get_usage() / 1024 / 1024 > $limit || $c > $batch) {
            $n = sizeof($buckets);
            $size = 0;
            $result = array();
            foreach ($buckets as $key2 => $value2) {
                #value是一个array
                array_push($result, serialize($key2));
                $d = serialize($value2);
                unset($value2);
                array_push($result, $d);
                $size += strlen($d);
            }
            $avg = intval($size / $n) >> 20;
            # let 1M < avg < 10M
            if ($avg < 1) {
                $batch *= 1.5;
            } elseif ($avg > 10) {
                $batch = max(intval($batch / 1.5), 1);
            }
            $c = 0;
            return $result;
        }
    }
    $result = array();
    foreach ($buckets as $key => $value) {
        array_push($result, serialize($key));
        array_push($result, serialize($value));
    }
    return $result;
};";s:7:"context";a:3:{s:13:"numPartitions";i:2;s:13:"partitionFunc";C:32:"SuperClosure\SerializableClosure":240:{a:5:{s:4:"code";s:137:"function ($x) {
    if ($x == null) {
        return 0;
    }
    $h = null;
    if (is_array($x)) {
    }
    return hash('md5', $x);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:5:"limit";i:256;}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":3944:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":1767:{a:5:{s:4:"code";s:67:"function ($split, $iterator) use($f) {
    return $f($iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":1543:{a:5:{s:4:"code";s:480:"function ($iterator) use($memory, $serializer, $createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc) {
    file_put_contents('/home/gt/php_worker7.txt', 'here1
', FILE_APPEND);
    $agg = new \aggregator($createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc);
    $merger = new \ExternalMerger($agg, $memory * 0.9, $serializer);
    $merger->mergeValues($iterator);
    file_put_contents('/home/gt/php_worker7.txt', 'here2
', FILE_APPEND);
    return $merger->items();
};";s:7:"context";a:5:{s:6:"memory";i:512;s:10:"serializer";O:23:"auto_batched_serializer":10:{s:9:"best_size";i:65536;s:20:"UNLIMITED_BATCH_SIZE";i:-1;s:18:"UNKNOWN_BATCH_SIZE";i:0;s:10:"serializer";N;s:10:"batch_size";i:0;s:19:"END_OF_DATA_SECTION";i:-1;s:20:"PHP_EXCEPTION_THROWN";i:-2;s:11:"TIMING_DATA";i:-3;s:13:"END_OF_STREAM";i:-4;s:4:"NULL";i:-5;}s:18:"createCombinerFunc";C:32:"SuperClosure\SerializableClosure":135:{a:5:{s:4:"code";s:33:"function ($x) {
    return $x;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"mergeValueFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}s:18:"mergeCombinersFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1813:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":369:{a:5:{s:4:"code";s:76:"function ($any, $iterator) use($f) {
    return array_map($f, $iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":137:{a:5:{s:4:"code";s:43:"function ($x) {
    return array($x, 1);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1081:{a:5:{s:4:"code";s:758:"function ($split, $iterator) use($f) {
    $sub_is_array = False;
    foreach ($iterator as $key => $value) {
        $temp = $f($value);
        if (is_array($temp)) {
            $sub_is_array = True;
            break;
        }
    }
    if ($sub_is_array) {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            if (is_array($temp)) {
                foreach ($temp as $e) {
                    array_push($result, $e);
                }
            }
        }
        return $result;
    } else {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            array_push($result, $temp);
        }
        return $result;
    }
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":166:{a:5:{s:4:"code";s:72:"function ($line) {
    $temp = explode(' ', $line);
    return $temp;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}
here5
here5
here6do do do 
here6test test test test try try try 
here7 array
here7 array
here8  Array
here8  Array
socket_create()成功45262

socket_connect()成功
首次read_int()成功1
首次read_utf()成功5.6
here3C:32:"SuperClosure\SerializableClosure":1616:{a:5:{s:4:"code";s:67:"function ($split, $iterator) use($f) {
    return $f($iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":1392:{a:5:{s:4:"code";s:329:"function ($iterator) use($memory, $serializer, $createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc) {
    $agg = new \aggregator($createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc);
    $merger = new \ExternalMerger($agg, $memory, $serializer);
    $merger->mergeCombiners($iterator);
    return $merger->items();
};";s:7:"context";a:5:{s:6:"memory";i:512;s:10:"serializer";O:23:"auto_batched_serializer":10:{s:9:"best_size";i:65536;s:20:"UNLIMITED_BATCH_SIZE";i:-1;s:18:"UNKNOWN_BATCH_SIZE";i:0;s:10:"serializer";N;s:10:"batch_size";i:0;s:19:"END_OF_DATA_SECTION";i:-1;s:20:"PHP_EXCEPTION_THROWN";i:-2;s:11:"TIMING_DATA";i:-3;s:13:"END_OF_STREAM";i:-4;s:4:"NULL";i:-5;}s:18:"createCombinerFunc";C:32:"SuperClosure\SerializableClosure":135:{a:5:{s:4:"code";s:33:"function ($x) {
    return $x;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"mergeValueFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}s:18:"mergeCombinersFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}
here5
here7 array
here8  Array
socket_create()成功45653

socket_connect()成功
首次read_int()成功0
首次read_utf()成功5.6
here3C:32:"SuperClosure\SerializableClosure":1616:{a:5:{s:4:"code";s:67:"function ($split, $iterator) use($f) {
    return $f($iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":1392:{a:5:{s:4:"code";s:329:"function ($iterator) use($memory, $serializer, $createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc) {
    $agg = new \aggregator($createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc);
    $merger = new \ExternalMerger($agg, $memory, $serializer);
    $merger->mergeCombiners($iterator);
    return $merger->items();
};";s:7:"context";a:5:{s:6:"memory";i:512;s:10:"serializer";O:23:"auto_batched_serializer":10:{s:9:"best_size";i:65536;s:20:"UNLIMITED_BATCH_SIZE";i:-1;s:18:"UNKNOWN_BATCH_SIZE";i:0;s:10:"serializer";N;s:10:"batch_size";i:0;s:19:"END_OF_DATA_SECTION";i:-1;s:20:"PHP_EXCEPTION_THROWN";i:-2;s:11:"TIMING_DATA";i:-3;s:13:"END_OF_STREAM";i:-4;s:4:"NULL";i:-5;}s:18:"createCombinerFunc";C:32:"SuperClosure\SerializableClosure":135:{a:5:{s:4:"code";s:33:"function ($x) {
    return $x;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"mergeValueFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}s:18:"mergeCombinersFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}
here5
here7 array
here8  Array
socket_create()成功34806

socket_connect()成功
首次read_int()成功0
首次read_utf()成功5.6
socket_create()成功51150

socket_connect()成功
首次read_int()成功1
首次read_utf()成功5.6
here3C:32:"SuperClosure\SerializableClosure":6246:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":1938:{a:5:{s:4:"code";s:1484:"function ($iterator) use($numPartitions, $partitionFunc, $limit, $outputSerializer) {
    $buckets = array();
    $c = 0;
    $batch = min(10 * $numPartitions, 1000);
    foreach ($iterator as $element) {
        file_put_contents('/home/gt/php_worker9.txt', 'here1' . $element . '
', FILE_APPEND);
    }
    foreach ($iterator as $key => $value) {
        $buckets[$partitionFunc($key) % $numPartitions] = array();
        $buckets[$partitionFunc($key) % $numPartitions][$key] = $value;
        $c++;
        if ($c % 1000 == 0 && memory_get_usage() / 1024 / 1024 > $limit || $c > $batch) {
            $n = sizeof($buckets);
            $size = 0;
            $result = array();
            foreach ($buckets as $key2 => $value2) {
                #value是一个array
                array_push($result, serialize($key2));
                $d = serialize($value2);
                unset($value2);
                array_push($result, $d);
                $size += strlen($d);
            }
            $avg = intval($size / $n) >> 20;
            # let 1M < avg < 10M
            if ($avg < 1) {
                $batch *= 1.5;
            } elseif ($avg > 10) {
                $batch = max(intval($batch / 1.5), 1);
            }
            $c = 0;
            return $result;
        }
    }
    $result = array();
    foreach ($buckets as $key => $value) {
        array_push($result, serialize($key));
        array_push($result, serialize($value));
    }
    return $result;
};";s:7:"context";a:3:{s:13:"numPartitions";i:2;s:13:"partitionFunc";C:32:"SuperClosure\SerializableClosure":240:{a:5:{s:4:"code";s:137:"function ($x) {
    if ($x == null) {
        return 0;
    }
    $h = null;
    if (is_array($x)) {
    }
    return hash('md5', $x);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:5:"limit";i:256;}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":3944:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":1767:{a:5:{s:4:"code";s:67:"function ($split, $iterator) use($f) {
    return $f($iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":1543:{a:5:{s:4:"code";s:480:"function ($iterator) use($memory, $serializer, $createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc) {
    file_put_contents('/home/gt/php_worker7.txt', 'here1
', FILE_APPEND);
    $agg = new \aggregator($createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc);
    $merger = new \ExternalMerger($agg, $memory * 0.9, $serializer);
    $merger->mergeValues($iterator);
    file_put_contents('/home/gt/php_worker7.txt', 'here2
', FILE_APPEND);
    return $merger->items();
};";s:7:"context";a:5:{s:6:"memory";i:512;s:10:"serializer";O:23:"auto_batched_serializer":10:{s:9:"best_size";i:65536;s:20:"UNLIMITED_BATCH_SIZE";i:-1;s:18:"UNKNOWN_BATCH_SIZE";i:0;s:10:"serializer";N;s:10:"batch_size";i:0;s:19:"END_OF_DATA_SECTION";i:-1;s:20:"PHP_EXCEPTION_THROWN";i:-2;s:11:"TIMING_DATA";i:-3;s:13:"END_OF_STREAM";i:-4;s:4:"NULL";i:-5;}s:18:"createCombinerFunc";C:32:"SuperClosure\SerializableClosure":135:{a:5:{s:4:"code";s:33:"function ($x) {
    return $x;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"mergeValueFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}s:18:"mergeCombinersFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1813:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":369:{a:5:{s:4:"code";s:76:"function ($any, $iterator) use($f) {
    return array_map($f, $iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":137:{a:5:{s:4:"code";s:43:"function ($x) {
    return array($x, 1);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1081:{a:5:{s:4:"code";s:758:"function ($split, $iterator) use($f) {
    $sub_is_array = False;
    foreach ($iterator as $key => $value) {
        $temp = $f($value);
        if (is_array($temp)) {
            $sub_is_array = True;
            break;
        }
    }
    if ($sub_is_array) {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            if (is_array($temp)) {
                foreach ($temp as $e) {
                    array_push($result, $e);
                }
            }
        }
        return $result;
    } else {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            array_push($result, $temp);
        }
        return $result;
    }
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":166:{a:5:{s:4:"code";s:72:"function ($line) {
    $temp = explode(' ', $line);
    return $temp;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}
here3C:32:"SuperClosure\SerializableClosure":6246:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":1938:{a:5:{s:4:"code";s:1484:"function ($iterator) use($numPartitions, $partitionFunc, $limit, $outputSerializer) {
    $buckets = array();
    $c = 0;
    $batch = min(10 * $numPartitions, 1000);
    foreach ($iterator as $element) {
        file_put_contents('/home/gt/php_worker9.txt', 'here1' . $element . '
', FILE_APPEND);
    }
    foreach ($iterator as $key => $value) {
        $buckets[$partitionFunc($key) % $numPartitions] = array();
        $buckets[$partitionFunc($key) % $numPartitions][$key] = $value;
        $c++;
        if ($c % 1000 == 0 && memory_get_usage() / 1024 / 1024 > $limit || $c > $batch) {
            $n = sizeof($buckets);
            $size = 0;
            $result = array();
            foreach ($buckets as $key2 => $value2) {
                #value是一个array
                array_push($result, serialize($key2));
                $d = serialize($value2);
                unset($value2);
                array_push($result, $d);
                $size += strlen($d);
            }
            $avg = intval($size / $n) >> 20;
            # let 1M < avg < 10M
            if ($avg < 1) {
                $batch *= 1.5;
            } elseif ($avg > 10) {
                $batch = max(intval($batch / 1.5), 1);
            }
            $c = 0;
            return $result;
        }
    }
    $result = array();
    foreach ($buckets as $key => $value) {
        array_push($result, serialize($key));
        array_push($result, serialize($value));
    }
    return $result;
};";s:7:"context";a:3:{s:13:"numPartitions";i:2;s:13:"partitionFunc";C:32:"SuperClosure\SerializableClosure":240:{a:5:{s:4:"code";s:137:"function ($x) {
    if ($x == null) {
        return 0;
    }
    $h = null;
    if (is_array($x)) {
    }
    return hash('md5', $x);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:5:"limit";i:256;}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":3944:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":1767:{a:5:{s:4:"code";s:67:"function ($split, $iterator) use($f) {
    return $f($iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":1543:{a:5:{s:4:"code";s:480:"function ($iterator) use($memory, $serializer, $createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc) {
    file_put_contents('/home/gt/php_worker7.txt', 'here1
', FILE_APPEND);
    $agg = new \aggregator($createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc);
    $merger = new \ExternalMerger($agg, $memory * 0.9, $serializer);
    $merger->mergeValues($iterator);
    file_put_contents('/home/gt/php_worker7.txt', 'here2
', FILE_APPEND);
    return $merger->items();
};";s:7:"context";a:5:{s:6:"memory";i:512;s:10:"serializer";O:23:"auto_batched_serializer":10:{s:9:"best_size";i:65536;s:20:"UNLIMITED_BATCH_SIZE";i:-1;s:18:"UNKNOWN_BATCH_SIZE";i:0;s:10:"serializer";N;s:10:"batch_size";i:0;s:19:"END_OF_DATA_SECTION";i:-1;s:20:"PHP_EXCEPTION_THROWN";i:-2;s:11:"TIMING_DATA";i:-3;s:13:"END_OF_STREAM";i:-4;s:4:"NULL";i:-5;}s:18:"createCombinerFunc";C:32:"SuperClosure\SerializableClosure":135:{a:5:{s:4:"code";s:33:"function ($x) {
    return $x;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"mergeValueFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}s:18:"mergeCombinersFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1813:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":369:{a:5:{s:4:"code";s:76:"function ($any, $iterator) use($f) {
    return array_map($f, $iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":137:{a:5:{s:4:"code";s:43:"function ($x) {
    return array($x, 1);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1081:{a:5:{s:4:"code";s:758:"function ($split, $iterator) use($f) {
    $sub_is_array = False;
    foreach ($iterator as $key => $value) {
        $temp = $f($value);
        if (is_array($temp)) {
            $sub_is_array = True;
            break;
        }
    }
    if ($sub_is_array) {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            if (is_array($temp)) {
                foreach ($temp as $e) {
                    array_push($result, $e);
                }
            }
        }
        return $result;
    } else {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            array_push($result, $temp);
        }
        return $result;
    }
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":166:{a:5:{s:4:"code";s:72:"function ($line) {
    $temp = explode(' ', $line);
    return $temp;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}
here5
here6do do do 
here5
here6test test test test try try try 
here7 array
here8  Array
here7 array
here8  Array
socket_create()成功46813

socket_connect()成功
首次read_int()成功1
首次read_utf()成功5.6
here3C:32:"SuperClosure\SerializableClosure":1616:{a:5:{s:4:"code";s:67:"function ($split, $iterator) use($f) {
    return $f($iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":1392:{a:5:{s:4:"code";s:329:"function ($iterator) use($memory, $serializer, $createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc) {
    $agg = new \aggregator($createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc);
    $merger = new \ExternalMerger($agg, $memory, $serializer);
    $merger->mergeCombiners($iterator);
    return $merger->items();
};";s:7:"context";a:5:{s:6:"memory";i:512;s:10:"serializer";O:23:"auto_batched_serializer":10:{s:9:"best_size";i:65536;s:20:"UNLIMITED_BATCH_SIZE";i:-1;s:18:"UNKNOWN_BATCH_SIZE";i:0;s:10:"serializer";N;s:10:"batch_size";i:0;s:19:"END_OF_DATA_SECTION";i:-1;s:20:"PHP_EXCEPTION_THROWN";i:-2;s:11:"TIMING_DATA";i:-3;s:13:"END_OF_STREAM";i:-4;s:4:"NULL";i:-5;}s:18:"createCombinerFunc";C:32:"SuperClosure\SerializableClosure":135:{a:5:{s:4:"code";s:33:"function ($x) {
    return $x;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"mergeValueFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}s:18:"mergeCombinersFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}
here5
here7 array
here8  Array
socket_create()成功46097

socket_connect()成功
首次read_int()成功0
首次read_utf()成功5.6
here3C:32:"SuperClosure\SerializableClosure":1616:{a:5:{s:4:"code";s:67:"function ($split, $iterator) use($f) {
    return $f($iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":1392:{a:5:{s:4:"code";s:329:"function ($iterator) use($memory, $serializer, $createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc) {
    $agg = new \aggregator($createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc);
    $merger = new \ExternalMerger($agg, $memory, $serializer);
    $merger->mergeCombiners($iterator);
    return $merger->items();
};";s:7:"context";a:5:{s:6:"memory";i:512;s:10:"serializer";O:23:"auto_batched_serializer":10:{s:9:"best_size";i:65536;s:20:"UNLIMITED_BATCH_SIZE";i:-1;s:18:"UNKNOWN_BATCH_SIZE";i:0;s:10:"serializer";N;s:10:"batch_size";i:0;s:19:"END_OF_DATA_SECTION";i:-1;s:20:"PHP_EXCEPTION_THROWN";i:-2;s:11:"TIMING_DATA";i:-3;s:13:"END_OF_STREAM";i:-4;s:4:"NULL";i:-5;}s:18:"createCombinerFunc";C:32:"SuperClosure\SerializableClosure":135:{a:5:{s:4:"code";s:33:"function ($x) {
    return $x;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"mergeValueFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}s:18:"mergeCombinersFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}
here5
here7 array
here8  Array
socket_create()成功54668

socket_connect()成功
首次read_int()成功1
首次read_utf()成功5.6
socket_create()成功52023

socket_connect()成功
首次read_int()成功0
首次read_utf()成功5.6
here3C:32:"SuperClosure\SerializableClosure":6246:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":1938:{a:5:{s:4:"code";s:1484:"function ($iterator) use($numPartitions, $partitionFunc, $limit, $outputSerializer) {
    $buckets = array();
    $c = 0;
    $batch = min(10 * $numPartitions, 1000);
    foreach ($iterator as $element) {
        file_put_contents('/home/gt/php_worker9.txt', 'here1' . $element . '
', FILE_APPEND);
    }
    foreach ($iterator as $key => $value) {
        $buckets[$partitionFunc($key) % $numPartitions] = array();
        $buckets[$partitionFunc($key) % $numPartitions][$key] = $value;
        $c++;
        if ($c % 1000 == 0 && memory_get_usage() / 1024 / 1024 > $limit || $c > $batch) {
            $n = sizeof($buckets);
            $size = 0;
            $result = array();
            foreach ($buckets as $key2 => $value2) {
                #value是一个array
                array_push($result, serialize($key2));
                $d = serialize($value2);
                unset($value2);
                array_push($result, $d);
                $size += strlen($d);
            }
            $avg = intval($size / $n) >> 20;
            # let 1M < avg < 10M
            if ($avg < 1) {
                $batch *= 1.5;
            } elseif ($avg > 10) {
                $batch = max(intval($batch / 1.5), 1);
            }
            $c = 0;
            return $result;
        }
    }
    $result = array();
    foreach ($buckets as $key => $value) {
        array_push($result, serialize($key));
        array_push($result, serialize($value));
    }
    return $result;
};";s:7:"context";a:3:{s:13:"numPartitions";i:2;s:13:"partitionFunc";C:32:"SuperClosure\SerializableClosure":240:{a:5:{s:4:"code";s:137:"function ($x) {
    if ($x == null) {
        return 0;
    }
    $h = null;
    if (is_array($x)) {
    }
    return hash('md5', $x);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:5:"limit";i:256;}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":3944:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":1767:{a:5:{s:4:"code";s:67:"function ($split, $iterator) use($f) {
    return $f($iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":1543:{a:5:{s:4:"code";s:480:"function ($iterator) use($memory, $serializer, $createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc) {
    file_put_contents('/home/gt/php_worker7.txt', 'here1
', FILE_APPEND);
    $agg = new \aggregator($createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc);
    $merger = new \ExternalMerger($agg, $memory * 0.9, $serializer);
    $merger->mergeValues($iterator);
    file_put_contents('/home/gt/php_worker7.txt', 'here2
', FILE_APPEND);
    return $merger->items();
};";s:7:"context";a:5:{s:6:"memory";i:512;s:10:"serializer";O:23:"auto_batched_serializer":10:{s:9:"best_size";i:65536;s:20:"UNLIMITED_BATCH_SIZE";i:-1;s:18:"UNKNOWN_BATCH_SIZE";i:0;s:10:"serializer";N;s:10:"batch_size";i:0;s:19:"END_OF_DATA_SECTION";i:-1;s:20:"PHP_EXCEPTION_THROWN";i:-2;s:11:"TIMING_DATA";i:-3;s:13:"END_OF_STREAM";i:-4;s:4:"NULL";i:-5;}s:18:"createCombinerFunc";C:32:"SuperClosure\SerializableClosure":135:{a:5:{s:4:"code";s:33:"function ($x) {
    return $x;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"mergeValueFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}s:18:"mergeCombinersFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1813:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":369:{a:5:{s:4:"code";s:76:"function ($any, $iterator) use($f) {
    return array_map($f, $iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":137:{a:5:{s:4:"code";s:43:"function ($x) {
    return array($x, 1);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1081:{a:5:{s:4:"code";s:758:"function ($split, $iterator) use($f) {
    $sub_is_array = False;
    foreach ($iterator as $key => $value) {
        $temp = $f($value);
        if (is_array($temp)) {
            $sub_is_array = True;
            break;
        }
    }
    if ($sub_is_array) {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            if (is_array($temp)) {
                foreach ($temp as $e) {
                    array_push($result, $e);
                }
            }
        }
        return $result;
    } else {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            array_push($result, $temp);
        }
        return $result;
    }
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":166:{a:5:{s:4:"code";s:72:"function ($line) {
    $temp = explode(' ', $line);
    return $temp;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}
here5
here6do do do 
here3C:32:"SuperClosure\SerializableClosure":6246:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":1938:{a:5:{s:4:"code";s:1484:"function ($iterator) use($numPartitions, $partitionFunc, $limit, $outputSerializer) {
    $buckets = array();
    $c = 0;
    $batch = min(10 * $numPartitions, 1000);
    foreach ($iterator as $element) {
        file_put_contents('/home/gt/php_worker9.txt', 'here1' . $element . '
', FILE_APPEND);
    }
    foreach ($iterator as $key => $value) {
        $buckets[$partitionFunc($key) % $numPartitions] = array();
        $buckets[$partitionFunc($key) % $numPartitions][$key] = $value;
        $c++;
        if ($c % 1000 == 0 && memory_get_usage() / 1024 / 1024 > $limit || $c > $batch) {
            $n = sizeof($buckets);
            $size = 0;
            $result = array();
            foreach ($buckets as $key2 => $value2) {
                #value是一个array
                array_push($result, serialize($key2));
                $d = serialize($value2);
                unset($value2);
                array_push($result, $d);
                $size += strlen($d);
            }
            $avg = intval($size / $n) >> 20;
            # let 1M < avg < 10M
            if ($avg < 1) {
                $batch *= 1.5;
            } elseif ($avg > 10) {
                $batch = max(intval($batch / 1.5), 1);
            }
            $c = 0;
            return $result;
        }
    }
    $result = array();
    foreach ($buckets as $key => $value) {
        array_push($result, serialize($key));
        array_push($result, serialize($value));
    }
    return $result;
};";s:7:"context";a:3:{s:13:"numPartitions";i:2;s:13:"partitionFunc";C:32:"SuperClosure\SerializableClosure":240:{a:5:{s:4:"code";s:137:"function ($x) {
    if ($x == null) {
        return 0;
    }
    $h = null;
    if (is_array($x)) {
    }
    return hash('md5', $x);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:5:"limit";i:256;}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":3944:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":1767:{a:5:{s:4:"code";s:67:"function ($split, $iterator) use($f) {
    return $f($iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":1543:{a:5:{s:4:"code";s:480:"function ($iterator) use($memory, $serializer, $createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc) {
    file_put_contents('/home/gt/php_worker7.txt', 'here1
', FILE_APPEND);
    $agg = new \aggregator($createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc);
    $merger = new \ExternalMerger($agg, $memory * 0.9, $serializer);
    $merger->mergeValues($iterator);
    file_put_contents('/home/gt/php_worker7.txt', 'here2
', FILE_APPEND);
    return $merger->items();
};";s:7:"context";a:5:{s:6:"memory";i:512;s:10:"serializer";O:23:"auto_batched_serializer":10:{s:9:"best_size";i:65536;s:20:"UNLIMITED_BATCH_SIZE";i:-1;s:18:"UNKNOWN_BATCH_SIZE";i:0;s:10:"serializer";N;s:10:"batch_size";i:0;s:19:"END_OF_DATA_SECTION";i:-1;s:20:"PHP_EXCEPTION_THROWN";i:-2;s:11:"TIMING_DATA";i:-3;s:13:"END_OF_STREAM";i:-4;s:4:"NULL";i:-5;}s:18:"createCombinerFunc";C:32:"SuperClosure\SerializableClosure":135:{a:5:{s:4:"code";s:33:"function ($x) {
    return $x;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"mergeValueFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}s:18:"mergeCombinersFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1813:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":369:{a:5:{s:4:"code";s:76:"function ($any, $iterator) use($f) {
    return array_map($f, $iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":137:{a:5:{s:4:"code";s:43:"function ($x) {
    return array($x, 1);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1081:{a:5:{s:4:"code";s:758:"function ($split, $iterator) use($f) {
    $sub_is_array = False;
    foreach ($iterator as $key => $value) {
        $temp = $f($value);
        if (is_array($temp)) {
            $sub_is_array = True;
            break;
        }
    }
    if ($sub_is_array) {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            if (is_array($temp)) {
                foreach ($temp as $e) {
                    array_push($result, $e);
                }
            }
        }
        return $result;
    } else {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            array_push($result, $temp);
        }
        return $result;
    }
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":166:{a:5:{s:4:"code";s:72:"function ($line) {
    $temp = explode(' ', $line);
    return $temp;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}
here7 array
here8  Array
here5
here6test test test test try try try 
here7 array
here8  Array
socket_create()成功50238

socket_connect()成功
首次read_int()成功1
首次read_utf()成功5.6
here3C:32:"SuperClosure\SerializableClosure":1616:{a:5:{s:4:"code";s:67:"function ($split, $iterator) use($f) {
    return $f($iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":1392:{a:5:{s:4:"code";s:329:"function ($iterator) use($memory, $serializer, $createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc) {
    $agg = new \aggregator($createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc);
    $merger = new \ExternalMerger($agg, $memory, $serializer);
    $merger->mergeCombiners($iterator);
    return $merger->items();
};";s:7:"context";a:5:{s:6:"memory";i:512;s:10:"serializer";O:23:"auto_batched_serializer":10:{s:9:"best_size";i:65536;s:20:"UNLIMITED_BATCH_SIZE";i:-1;s:18:"UNKNOWN_BATCH_SIZE";i:0;s:10:"serializer";N;s:10:"batch_size";i:0;s:19:"END_OF_DATA_SECTION";i:-1;s:20:"PHP_EXCEPTION_THROWN";i:-2;s:11:"TIMING_DATA";i:-3;s:13:"END_OF_STREAM";i:-4;s:4:"NULL";i:-5;}s:18:"createCombinerFunc";C:32:"SuperClosure\SerializableClosure":135:{a:5:{s:4:"code";s:33:"function ($x) {
    return $x;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"mergeValueFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}s:18:"mergeCombinersFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}
here5
here7 array
here8  Array
socket_create()成功55994

socket_connect()成功
首次read_int()成功0
首次read_utf()成功5.6
here3C:32:"SuperClosure\SerializableClosure":1616:{a:5:{s:4:"code";s:67:"function ($split, $iterator) use($f) {
    return $f($iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":1392:{a:5:{s:4:"code";s:329:"function ($iterator) use($memory, $serializer, $createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc) {
    $agg = new \aggregator($createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc);
    $merger = new \ExternalMerger($agg, $memory, $serializer);
    $merger->mergeCombiners($iterator);
    return $merger->items();
};";s:7:"context";a:5:{s:6:"memory";i:512;s:10:"serializer";O:23:"auto_batched_serializer":10:{s:9:"best_size";i:65536;s:20:"UNLIMITED_BATCH_SIZE";i:-1;s:18:"UNKNOWN_BATCH_SIZE";i:0;s:10:"serializer";N;s:10:"batch_size";i:0;s:19:"END_OF_DATA_SECTION";i:-1;s:20:"PHP_EXCEPTION_THROWN";i:-2;s:11:"TIMING_DATA";i:-3;s:13:"END_OF_STREAM";i:-4;s:4:"NULL";i:-5;}s:18:"createCombinerFunc";C:32:"SuperClosure\SerializableClosure":135:{a:5:{s:4:"code";s:33:"function ($x) {
    return $x;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"mergeValueFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}s:18:"mergeCombinersFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}
here5
here7 array
here8  Array
socket_create()成功48568

socket_connect()成功
首次read_int()成功1
首次read_utf()成功5.6
socket_create()成功36157

here3C:32:"SuperClosure\SerializableClosure":6246:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":1938:{a:5:{s:4:"code";s:1484:"function ($iterator) use($numPartitions, $partitionFunc, $limit, $outputSerializer) {
    $buckets = array();
    $c = 0;
    $batch = min(10 * $numPartitions, 1000);
    foreach ($iterator as $element) {
        file_put_contents('/home/gt/php_worker9.txt', 'here1' . $element . '
', FILE_APPEND);
    }
    foreach ($iterator as $key => $value) {
        $buckets[$partitionFunc($key) % $numPartitions] = array();
        $buckets[$partitionFunc($key) % $numPartitions][$key] = $value;
        $c++;
        if ($c % 1000 == 0 && memory_get_usage() / 1024 / 1024 > $limit || $c > $batch) {
            $n = sizeof($buckets);
            $size = 0;
            $result = array();
            foreach ($buckets as $key2 => $value2) {
                #value是一个array
                array_push($result, serialize($key2));
                $d = serialize($value2);
                unset($value2);
                array_push($result, $d);
                $size += strlen($d);
            }
            $avg = intval($size / $n) >> 20;
            # let 1M < avg < 10M
            if ($avg < 1) {
                $batch *= 1.5;
            } elseif ($avg > 10) {
                $batch = max(intval($batch / 1.5), 1);
            }
            $c = 0;
            return $result;
        }
    }
    $result = array();
    foreach ($buckets as $key => $value) {
        array_push($result, serialize($key));
        array_push($result, serialize($value));
    }
    return $result;
};";s:7:"context";a:3:{s:13:"numPartitions";i:2;s:13:"partitionFunc";C:32:"SuperClosure\SerializableClosure":240:{a:5:{s:4:"code";s:137:"function ($x) {
    if ($x == null) {
        return 0;
    }
    $h = null;
    if (is_array($x)) {
    }
    return hash('md5', $x);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:5:"limit";i:256;}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":3944:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":1767:{a:5:{s:4:"code";s:67:"function ($split, $iterator) use($f) {
    return $f($iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":1543:{a:5:{s:4:"code";s:480:"function ($iterator) use($memory, $serializer, $createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc) {
    file_put_contents('/home/gt/php_worker7.txt', 'here1
', FILE_APPEND);
    $agg = new \aggregator($createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc);
    $merger = new \ExternalMerger($agg, $memory * 0.9, $serializer);
    $merger->mergeValues($iterator);
    file_put_contents('/home/gt/php_worker7.txt', 'here2
', FILE_APPEND);
    return $merger->items();
};";s:7:"context";a:5:{s:6:"memory";i:512;s:10:"serializer";O:23:"auto_batched_serializer":10:{s:9:"best_size";i:65536;s:20:"UNLIMITED_BATCH_SIZE";i:-1;s:18:"UNKNOWN_BATCH_SIZE";i:0;s:10:"serializer";N;s:10:"batch_size";i:0;s:19:"END_OF_DATA_SECTION";i:-1;s:20:"PHP_EXCEPTION_THROWN";i:-2;s:11:"TIMING_DATA";i:-3;s:13:"END_OF_STREAM";i:-4;s:4:"NULL";i:-5;}s:18:"createCombinerFunc";C:32:"SuperClosure\SerializableClosure":135:{a:5:{s:4:"code";s:33:"function ($x) {
    return $x;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"mergeValueFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}s:18:"mergeCombinersFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1813:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":369:{a:5:{s:4:"code";s:76:"function ($any, $iterator) use($f) {
    return array_map($f, $iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":137:{a:5:{s:4:"code";s:43:"function ($x) {
    return array($x, 1);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1081:{a:5:{s:4:"code";s:758:"function ($split, $iterator) use($f) {
    $sub_is_array = False;
    foreach ($iterator as $key => $value) {
        $temp = $f($value);
        if (is_array($temp)) {
            $sub_is_array = True;
            break;
        }
    }
    if ($sub_is_array) {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            if (is_array($temp)) {
                foreach ($temp as $e) {
                    array_push($result, $e);
                }
            }
        }
        return $result;
    } else {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            array_push($result, $temp);
        }
        return $result;
    }
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":166:{a:5:{s:4:"code";s:72:"function ($line) {
    $temp = explode(' ', $line);
    return $temp;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}
socket_connect()成功
here5
here6do do do 
首次read_int()成功0
首次read_utf()成功5.6
here7 array
here8  Array
here3C:32:"SuperClosure\SerializableClosure":6246:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":1938:{a:5:{s:4:"code";s:1484:"function ($iterator) use($numPartitions, $partitionFunc, $limit, $outputSerializer) {
    $buckets = array();
    $c = 0;
    $batch = min(10 * $numPartitions, 1000);
    foreach ($iterator as $element) {
        file_put_contents('/home/gt/php_worker9.txt', 'here1' . $element . '
', FILE_APPEND);
    }
    foreach ($iterator as $key => $value) {
        $buckets[$partitionFunc($key) % $numPartitions] = array();
        $buckets[$partitionFunc($key) % $numPartitions][$key] = $value;
        $c++;
        if ($c % 1000 == 0 && memory_get_usage() / 1024 / 1024 > $limit || $c > $batch) {
            $n = sizeof($buckets);
            $size = 0;
            $result = array();
            foreach ($buckets as $key2 => $value2) {
                #value是一个array
                array_push($result, serialize($key2));
                $d = serialize($value2);
                unset($value2);
                array_push($result, $d);
                $size += strlen($d);
            }
            $avg = intval($size / $n) >> 20;
            # let 1M < avg < 10M
            if ($avg < 1) {
                $batch *= 1.5;
            } elseif ($avg > 10) {
                $batch = max(intval($batch / 1.5), 1);
            }
            $c = 0;
            return $result;
        }
    }
    $result = array();
    foreach ($buckets as $key => $value) {
        array_push($result, serialize($key));
        array_push($result, serialize($value));
    }
    return $result;
};";s:7:"context";a:3:{s:13:"numPartitions";i:2;s:13:"partitionFunc";C:32:"SuperClosure\SerializableClosure":240:{a:5:{s:4:"code";s:137:"function ($x) {
    if ($x == null) {
        return 0;
    }
    $h = null;
    if (is_array($x)) {
    }
    return hash('md5', $x);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:5:"limit";i:256;}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":3944:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":1767:{a:5:{s:4:"code";s:67:"function ($split, $iterator) use($f) {
    return $f($iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":1543:{a:5:{s:4:"code";s:480:"function ($iterator) use($memory, $serializer, $createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc) {
    file_put_contents('/home/gt/php_worker7.txt', 'here1
', FILE_APPEND);
    $agg = new \aggregator($createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc);
    $merger = new \ExternalMerger($agg, $memory * 0.9, $serializer);
    $merger->mergeValues($iterator);
    file_put_contents('/home/gt/php_worker7.txt', 'here2
', FILE_APPEND);
    return $merger->items();
};";s:7:"context";a:5:{s:6:"memory";i:512;s:10:"serializer";O:23:"auto_batched_serializer":10:{s:9:"best_size";i:65536;s:20:"UNLIMITED_BATCH_SIZE";i:-1;s:18:"UNKNOWN_BATCH_SIZE";i:0;s:10:"serializer";N;s:10:"batch_size";i:0;s:19:"END_OF_DATA_SECTION";i:-1;s:20:"PHP_EXCEPTION_THROWN";i:-2;s:11:"TIMING_DATA";i:-3;s:13:"END_OF_STREAM";i:-4;s:4:"NULL";i:-5;}s:18:"createCombinerFunc";C:32:"SuperClosure\SerializableClosure":135:{a:5:{s:4:"code";s:33:"function ($x) {
    return $x;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"mergeValueFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}s:18:"mergeCombinersFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1813:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":369:{a:5:{s:4:"code";s:76:"function ($any, $iterator) use($f) {
    return array_map($f, $iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":137:{a:5:{s:4:"code";s:43:"function ($x) {
    return array($x, 1);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1081:{a:5:{s:4:"code";s:758:"function ($split, $iterator) use($f) {
    $sub_is_array = False;
    foreach ($iterator as $key => $value) {
        $temp = $f($value);
        if (is_array($temp)) {
            $sub_is_array = True;
            break;
        }
    }
    if ($sub_is_array) {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            if (is_array($temp)) {
                foreach ($temp as $e) {
                    array_push($result, $e);
                }
            }
        }
        return $result;
    } else {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            array_push($result, $temp);
        }
        return $result;
    }
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":166:{a:5:{s:4:"code";s:72:"function ($line) {
    $temp = explode(' ', $line);
    return $temp;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}
here5
here6test test test test try try try 
here7 array
here8  Array
socket_create()成功57343

socket_connect()成功
首次read_int()成功1
首次read_utf()成功5.6
here3C:32:"SuperClosure\SerializableClosure":1616:{a:5:{s:4:"code";s:67:"function ($split, $iterator) use($f) {
    return $f($iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":1392:{a:5:{s:4:"code";s:329:"function ($iterator) use($memory, $serializer, $createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc) {
    $agg = new \aggregator($createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc);
    $merger = new \ExternalMerger($agg, $memory, $serializer);
    $merger->mergeCombiners($iterator);
    return $merger->items();
};";s:7:"context";a:5:{s:6:"memory";i:512;s:10:"serializer";O:23:"auto_batched_serializer":10:{s:9:"best_size";i:65536;s:20:"UNLIMITED_BATCH_SIZE";i:-1;s:18:"UNKNOWN_BATCH_SIZE";i:0;s:10:"serializer";N;s:10:"batch_size";i:0;s:19:"END_OF_DATA_SECTION";i:-1;s:20:"PHP_EXCEPTION_THROWN";i:-2;s:11:"TIMING_DATA";i:-3;s:13:"END_OF_STREAM";i:-4;s:4:"NULL";i:-5;}s:18:"createCombinerFunc";C:32:"SuperClosure\SerializableClosure":135:{a:5:{s:4:"code";s:33:"function ($x) {
    return $x;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"mergeValueFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}s:18:"mergeCombinersFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}
here5
here7 array
here8  Array
socket_create()成功59305

socket_connect()成功
首次read_int()成功0
首次read_utf()成功5.6
here3C:32:"SuperClosure\SerializableClosure":1616:{a:5:{s:4:"code";s:67:"function ($split, $iterator) use($f) {
    return $f($iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":1392:{a:5:{s:4:"code";s:329:"function ($iterator) use($memory, $serializer, $createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc) {
    $agg = new \aggregator($createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc);
    $merger = new \ExternalMerger($agg, $memory, $serializer);
    $merger->mergeCombiners($iterator);
    return $merger->items();
};";s:7:"context";a:5:{s:6:"memory";i:512;s:10:"serializer";O:23:"auto_batched_serializer":10:{s:9:"best_size";i:65536;s:20:"UNLIMITED_BATCH_SIZE";i:-1;s:18:"UNKNOWN_BATCH_SIZE";i:0;s:10:"serializer";N;s:10:"batch_size";i:0;s:19:"END_OF_DATA_SECTION";i:-1;s:20:"PHP_EXCEPTION_THROWN";i:-2;s:11:"TIMING_DATA";i:-3;s:13:"END_OF_STREAM";i:-4;s:4:"NULL";i:-5;}s:18:"createCombinerFunc";C:32:"SuperClosure\SerializableClosure":135:{a:5:{s:4:"code";s:33:"function ($x) {
    return $x;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"mergeValueFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}s:18:"mergeCombinersFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}
here5
here7 array
here8  Array
socket_create()成功41958

socket_connect()成功
首次read_int()成功0
首次read_utf()成功5.6
here3C:32:"SuperClosure\SerializableClosure":6246:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":1938:{a:5:{s:4:"code";s:1484:"function ($iterator) use($numPartitions, $partitionFunc, $limit, $outputSerializer) {
    $buckets = array();
    $c = 0;
    $batch = min(10 * $numPartitions, 1000);
    foreach ($iterator as $element) {
        file_put_contents('/home/gt/php_worker9.txt', 'here1' . $element . '
', FILE_APPEND);
    }
    foreach ($iterator as $key => $value) {
        $buckets[$partitionFunc($key) % $numPartitions] = array();
        $buckets[$partitionFunc($key) % $numPartitions][$key] = $value;
        $c++;
        if ($c % 1000 == 0 && memory_get_usage() / 1024 / 1024 > $limit || $c > $batch) {
            $n = sizeof($buckets);
            $size = 0;
            $result = array();
            foreach ($buckets as $key2 => $value2) {
                #value是一个array
                array_push($result, serialize($key2));
                $d = serialize($value2);
                unset($value2);
                array_push($result, $d);
                $size += strlen($d);
            }
            $avg = intval($size / $n) >> 20;
            # let 1M < avg < 10M
            if ($avg < 1) {
                $batch *= 1.5;
            } elseif ($avg > 10) {
                $batch = max(intval($batch / 1.5), 1);
            }
            $c = 0;
            return $result;
        }
    }
    $result = array();
    foreach ($buckets as $key => $value) {
        array_push($result, serialize($key));
        array_push($result, serialize($value));
    }
    return $result;
};";s:7:"context";a:3:{s:13:"numPartitions";i:2;s:13:"partitionFunc";C:32:"SuperClosure\SerializableClosure":240:{a:5:{s:4:"code";s:137:"function ($x) {
    if ($x == null) {
        return 0;
    }
    $h = null;
    if (is_array($x)) {
    }
    return hash('md5', $x);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:5:"limit";i:256;}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":3944:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":1767:{a:5:{s:4:"code";s:67:"function ($split, $iterator) use($f) {
    return $f($iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":1543:{a:5:{s:4:"code";s:480:"function ($iterator) use($memory, $serializer, $createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc) {
    file_put_contents('/home/gt/php_worker7.txt', 'here1
', FILE_APPEND);
    $agg = new \aggregator($createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc);
    $merger = new \ExternalMerger($agg, $memory * 0.9, $serializer);
    $merger->mergeValues($iterator);
    file_put_contents('/home/gt/php_worker7.txt', 'here2
', FILE_APPEND);
    return $merger->items();
};";s:7:"context";a:5:{s:6:"memory";i:512;s:10:"serializer";O:23:"auto_batched_serializer":10:{s:9:"best_size";i:65536;s:20:"UNLIMITED_BATCH_SIZE";i:-1;s:18:"UNKNOWN_BATCH_SIZE";i:0;s:10:"serializer";N;s:10:"batch_size";i:0;s:19:"END_OF_DATA_SECTION";i:-1;s:20:"PHP_EXCEPTION_THROWN";i:-2;s:11:"TIMING_DATA";i:-3;s:13:"END_OF_STREAM";i:-4;s:4:"NULL";i:-5;}s:18:"createCombinerFunc";C:32:"SuperClosure\SerializableClosure":135:{a:5:{s:4:"code";s:33:"function ($x) {
    return $x;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"mergeValueFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}s:18:"mergeCombinersFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1813:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":369:{a:5:{s:4:"code";s:76:"function ($any, $iterator) use($f) {
    return array_map($f, $iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":137:{a:5:{s:4:"code";s:43:"function ($x) {
    return array($x, 1);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1081:{a:5:{s:4:"code";s:758:"function ($split, $iterator) use($f) {
    $sub_is_array = False;
    foreach ($iterator as $key => $value) {
        $temp = $f($value);
        if (is_array($temp)) {
            $sub_is_array = True;
            break;
        }
    }
    if ($sub_is_array) {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            if (is_array($temp)) {
                foreach ($temp as $e) {
                    array_push($result, $e);
                }
            }
        }
        return $result;
    } else {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            array_push($result, $temp);
        }
        return $result;
    }
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":166:{a:5:{s:4:"code";s:72:"function ($line) {
    $temp = explode(' ', $line);
    return $temp;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}
here5
here6test test test test try try try 
here7 array
here8  Array
socket_create()成功54915

socket_connect()成功
首次read_int()成功1
首次read_utf()成功5.6
here3C:32:"SuperClosure\SerializableClosure":6246:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":1938:{a:5:{s:4:"code";s:1484:"function ($iterator) use($numPartitions, $partitionFunc, $limit, $outputSerializer) {
    $buckets = array();
    $c = 0;
    $batch = min(10 * $numPartitions, 1000);
    foreach ($iterator as $element) {
        file_put_contents('/home/gt/php_worker9.txt', 'here1' . $element . '
', FILE_APPEND);
    }
    foreach ($iterator as $key => $value) {
        $buckets[$partitionFunc($key) % $numPartitions] = array();
        $buckets[$partitionFunc($key) % $numPartitions][$key] = $value;
        $c++;
        if ($c % 1000 == 0 && memory_get_usage() / 1024 / 1024 > $limit || $c > $batch) {
            $n = sizeof($buckets);
            $size = 0;
            $result = array();
            foreach ($buckets as $key2 => $value2) {
                #value是一个array
                array_push($result, serialize($key2));
                $d = serialize($value2);
                unset($value2);
                array_push($result, $d);
                $size += strlen($d);
            }
            $avg = intval($size / $n) >> 20;
            # let 1M < avg < 10M
            if ($avg < 1) {
                $batch *= 1.5;
            } elseif ($avg > 10) {
                $batch = max(intval($batch / 1.5), 1);
            }
            $c = 0;
            return $result;
        }
    }
    $result = array();
    foreach ($buckets as $key => $value) {
        array_push($result, serialize($key));
        array_push($result, serialize($value));
    }
    return $result;
};";s:7:"context";a:3:{s:13:"numPartitions";i:2;s:13:"partitionFunc";C:32:"SuperClosure\SerializableClosure":240:{a:5:{s:4:"code";s:137:"function ($x) {
    if ($x == null) {
        return 0;
    }
    $h = null;
    if (is_array($x)) {
    }
    return hash('md5', $x);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:5:"limit";i:256;}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":3944:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":1767:{a:5:{s:4:"code";s:67:"function ($split, $iterator) use($f) {
    return $f($iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":1543:{a:5:{s:4:"code";s:480:"function ($iterator) use($memory, $serializer, $createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc) {
    file_put_contents('/home/gt/php_worker7.txt', 'here1
', FILE_APPEND);
    $agg = new \aggregator($createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc);
    $merger = new \ExternalMerger($agg, $memory * 0.9, $serializer);
    $merger->mergeValues($iterator);
    file_put_contents('/home/gt/php_worker7.txt', 'here2
', FILE_APPEND);
    return $merger->items();
};";s:7:"context";a:5:{s:6:"memory";i:512;s:10:"serializer";O:23:"auto_batched_serializer":10:{s:9:"best_size";i:65536;s:20:"UNLIMITED_BATCH_SIZE";i:-1;s:18:"UNKNOWN_BATCH_SIZE";i:0;s:10:"serializer";N;s:10:"batch_size";i:0;s:19:"END_OF_DATA_SECTION";i:-1;s:20:"PHP_EXCEPTION_THROWN";i:-2;s:11:"TIMING_DATA";i:-3;s:13:"END_OF_STREAM";i:-4;s:4:"NULL";i:-5;}s:18:"createCombinerFunc";C:32:"SuperClosure\SerializableClosure":135:{a:5:{s:4:"code";s:33:"function ($x) {
    return $x;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"mergeValueFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}s:18:"mergeCombinersFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1813:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":369:{a:5:{s:4:"code";s:76:"function ($any, $iterator) use($f) {
    return array_map($f, $iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":137:{a:5:{s:4:"code";s:43:"function ($x) {
    return array($x, 1);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1081:{a:5:{s:4:"code";s:758:"function ($split, $iterator) use($f) {
    $sub_is_array = False;
    foreach ($iterator as $key => $value) {
        $temp = $f($value);
        if (is_array($temp)) {
            $sub_is_array = True;
            break;
        }
    }
    if ($sub_is_array) {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            if (is_array($temp)) {
                foreach ($temp as $e) {
                    array_push($result, $e);
                }
            }
        }
        return $result;
    } else {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            array_push($result, $temp);
        }
        return $result;
    }
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":166:{a:5:{s:4:"code";s:72:"function ($line) {
    $temp = explode(' ', $line);
    return $temp;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}
here5
here6do do do 
here7 array
here8  Array
socket_create()成功33165

socket_connect()成功
首次read_int()成功0
首次read_utf()成功5.6
here3C:32:"SuperClosure\SerializableClosure":1616:{a:5:{s:4:"code";s:67:"function ($split, $iterator) use($f) {
    return $f($iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":1392:{a:5:{s:4:"code";s:329:"function ($iterator) use($memory, $serializer, $createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc) {
    $agg = new \aggregator($createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc);
    $merger = new \ExternalMerger($agg, $memory, $serializer);
    $merger->mergeCombiners($iterator);
    return $merger->items();
};";s:7:"context";a:5:{s:6:"memory";i:512;s:10:"serializer";O:23:"auto_batched_serializer":10:{s:9:"best_size";i:65536;s:20:"UNLIMITED_BATCH_SIZE";i:-1;s:18:"UNKNOWN_BATCH_SIZE";i:0;s:10:"serializer";N;s:10:"batch_size";i:0;s:19:"END_OF_DATA_SECTION";i:-1;s:20:"PHP_EXCEPTION_THROWN";i:-2;s:11:"TIMING_DATA";i:-3;s:13:"END_OF_STREAM";i:-4;s:4:"NULL";i:-5;}s:18:"createCombinerFunc";C:32:"SuperClosure\SerializableClosure":135:{a:5:{s:4:"code";s:33:"function ($x) {
    return $x;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"mergeValueFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}s:18:"mergeCombinersFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}
here5
here7 array
here8  Array
socket_create()成功55442

socket_connect()成功
首次read_int()成功1
首次read_utf()成功5.6
here3C:32:"SuperClosure\SerializableClosure":1616:{a:5:{s:4:"code";s:67:"function ($split, $iterator) use($f) {
    return $f($iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":1392:{a:5:{s:4:"code";s:329:"function ($iterator) use($memory, $serializer, $createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc) {
    $agg = new \aggregator($createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc);
    $merger = new \ExternalMerger($agg, $memory, $serializer);
    $merger->mergeCombiners($iterator);
    return $merger->items();
};";s:7:"context";a:5:{s:6:"memory";i:512;s:10:"serializer";O:23:"auto_batched_serializer":10:{s:9:"best_size";i:65536;s:20:"UNLIMITED_BATCH_SIZE";i:-1;s:18:"UNKNOWN_BATCH_SIZE";i:0;s:10:"serializer";N;s:10:"batch_size";i:0;s:19:"END_OF_DATA_SECTION";i:-1;s:20:"PHP_EXCEPTION_THROWN";i:-2;s:11:"TIMING_DATA";i:-3;s:13:"END_OF_STREAM";i:-4;s:4:"NULL";i:-5;}s:18:"createCombinerFunc";C:32:"SuperClosure\SerializableClosure":135:{a:5:{s:4:"code";s:33:"function ($x) {
    return $x;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"mergeValueFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}s:18:"mergeCombinersFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}
here5
here7 array
here8  Array
socket_create()成功34367

socket_connect()成功
首次read_int()成功1
首次read_utf()成功5.6
socket_create()成功33003

socket_connect()成功
here3C:32:"SuperClosure\SerializableClosure":6246:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":1938:{a:5:{s:4:"code";s:1484:"function ($iterator) use($numPartitions, $partitionFunc, $limit, $outputSerializer) {
    $buckets = array();
    $c = 0;
    $batch = min(10 * $numPartitions, 1000);
    foreach ($iterator as $element) {
        file_put_contents('/home/gt/php_worker9.txt', 'here1' . $element . '
', FILE_APPEND);
    }
    foreach ($iterator as $key => $value) {
        $buckets[$partitionFunc($key) % $numPartitions] = array();
        $buckets[$partitionFunc($key) % $numPartitions][$key] = $value;
        $c++;
        if ($c % 1000 == 0 && memory_get_usage() / 1024 / 1024 > $limit || $c > $batch) {
            $n = sizeof($buckets);
            $size = 0;
            $result = array();
            foreach ($buckets as $key2 => $value2) {
                #value是一个array
                array_push($result, serialize($key2));
                $d = serialize($value2);
                unset($value2);
                array_push($result, $d);
                $size += strlen($d);
            }
            $avg = intval($size / $n) >> 20;
            # let 1M < avg < 10M
            if ($avg < 1) {
                $batch *= 1.5;
            } elseif ($avg > 10) {
                $batch = max(intval($batch / 1.5), 1);
            }
            $c = 0;
            return $result;
        }
    }
    $result = array();
    foreach ($buckets as $key => $value) {
        array_push($result, serialize($key));
        array_push($result, serialize($value));
    }
    return $result;
};";s:7:"context";a:3:{s:13:"numPartitions";i:2;s:13:"partitionFunc";C:32:"SuperClosure\SerializableClosure":240:{a:5:{s:4:"code";s:137:"function ($x) {
    if ($x == null) {
        return 0;
    }
    $h = null;
    if (is_array($x)) {
    }
    return hash('md5', $x);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:5:"limit";i:256;}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":3944:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":1767:{a:5:{s:4:"code";s:67:"function ($split, $iterator) use($f) {
    return $f($iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":1543:{a:5:{s:4:"code";s:480:"function ($iterator) use($memory, $serializer, $createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc) {
    file_put_contents('/home/gt/php_worker7.txt', 'here1
', FILE_APPEND);
    $agg = new \aggregator($createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc);
    $merger = new \ExternalMerger($agg, $memory * 0.9, $serializer);
    $merger->mergeValues($iterator);
    file_put_contents('/home/gt/php_worker7.txt', 'here2
', FILE_APPEND);
    return $merger->items();
};";s:7:"context";a:5:{s:6:"memory";i:512;s:10:"serializer";O:23:"auto_batched_serializer":10:{s:9:"best_size";i:65536;s:20:"UNLIMITED_BATCH_SIZE";i:-1;s:18:"UNKNOWN_BATCH_SIZE";i:0;s:10:"serializer";N;s:10:"batch_size";i:0;s:19:"END_OF_DATA_SECTION";i:-1;s:20:"PHP_EXCEPTION_THROWN";i:-2;s:11:"TIMING_DATA";i:-3;s:13:"END_OF_STREAM";i:-4;s:4:"NULL";i:-5;}s:18:"createCombinerFunc";C:32:"SuperClosure\SerializableClosure":135:{a:5:{s:4:"code";s:33:"function ($x) {
    return $x;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"mergeValueFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}s:18:"mergeCombinersFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1813:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":369:{a:5:{s:4:"code";s:76:"function ($any, $iterator) use($f) {
    return array_map($f, $iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":137:{a:5:{s:4:"code";s:43:"function ($x) {
    return array($x, 1);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1081:{a:5:{s:4:"code";s:758:"function ($split, $iterator) use($f) {
    $sub_is_array = False;
    foreach ($iterator as $key => $value) {
        $temp = $f($value);
        if (is_array($temp)) {
            $sub_is_array = True;
            break;
        }
    }
    if ($sub_is_array) {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            if (is_array($temp)) {
                foreach ($temp as $e) {
                    array_push($result, $e);
                }
            }
        }
        return $result;
    } else {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            array_push($result, $temp);
        }
        return $result;
    }
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":166:{a:5:{s:4:"code";s:72:"function ($line) {
    $temp = explode(' ', $line);
    return $temp;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}
here5
here6do do do 
here7 array
here8  Array
首次read_int()成功0
首次read_utf()成功5.6
here3C:32:"SuperClosure\SerializableClosure":6246:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":1938:{a:5:{s:4:"code";s:1484:"function ($iterator) use($numPartitions, $partitionFunc, $limit, $outputSerializer) {
    $buckets = array();
    $c = 0;
    $batch = min(10 * $numPartitions, 1000);
    foreach ($iterator as $element) {
        file_put_contents('/home/gt/php_worker9.txt', 'here1' . $element . '
', FILE_APPEND);
    }
    foreach ($iterator as $key => $value) {
        $buckets[$partitionFunc($key) % $numPartitions] = array();
        $buckets[$partitionFunc($key) % $numPartitions][$key] = $value;
        $c++;
        if ($c % 1000 == 0 && memory_get_usage() / 1024 / 1024 > $limit || $c > $batch) {
            $n = sizeof($buckets);
            $size = 0;
            $result = array();
            foreach ($buckets as $key2 => $value2) {
                #value是一个array
                array_push($result, serialize($key2));
                $d = serialize($value2);
                unset($value2);
                array_push($result, $d);
                $size += strlen($d);
            }
            $avg = intval($size / $n) >> 20;
            # let 1M < avg < 10M
            if ($avg < 1) {
                $batch *= 1.5;
            } elseif ($avg > 10) {
                $batch = max(intval($batch / 1.5), 1);
            }
            $c = 0;
            return $result;
        }
    }
    $result = array();
    foreach ($buckets as $key => $value) {
        array_push($result, serialize($key));
        array_push($result, serialize($value));
    }
    return $result;
};";s:7:"context";a:3:{s:13:"numPartitions";i:2;s:13:"partitionFunc";C:32:"SuperClosure\SerializableClosure":240:{a:5:{s:4:"code";s:137:"function ($x) {
    if ($x == null) {
        return 0;
    }
    $h = null;
    if (is_array($x)) {
    }
    return hash('md5', $x);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:5:"limit";i:256;}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":3944:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":1767:{a:5:{s:4:"code";s:67:"function ($split, $iterator) use($f) {
    return $f($iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":1543:{a:5:{s:4:"code";s:480:"function ($iterator) use($memory, $serializer, $createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc) {
    file_put_contents('/home/gt/php_worker7.txt', 'here1
', FILE_APPEND);
    $agg = new \aggregator($createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc);
    $merger = new \ExternalMerger($agg, $memory * 0.9, $serializer);
    $merger->mergeValues($iterator);
    file_put_contents('/home/gt/php_worker7.txt', 'here2
', FILE_APPEND);
    return $merger->items();
};";s:7:"context";a:5:{s:6:"memory";i:512;s:10:"serializer";O:23:"auto_batched_serializer":10:{s:9:"best_size";i:65536;s:20:"UNLIMITED_BATCH_SIZE";i:-1;s:18:"UNKNOWN_BATCH_SIZE";i:0;s:10:"serializer";N;s:10:"batch_size";i:0;s:19:"END_OF_DATA_SECTION";i:-1;s:20:"PHP_EXCEPTION_THROWN";i:-2;s:11:"TIMING_DATA";i:-3;s:13:"END_OF_STREAM";i:-4;s:4:"NULL";i:-5;}s:18:"createCombinerFunc";C:32:"SuperClosure\SerializableClosure":135:{a:5:{s:4:"code";s:33:"function ($x) {
    return $x;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"mergeValueFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}s:18:"mergeCombinersFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1813:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":369:{a:5:{s:4:"code";s:76:"function ($any, $iterator) use($f) {
    return array_map($f, $iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":137:{a:5:{s:4:"code";s:43:"function ($x) {
    return array($x, 1);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1081:{a:5:{s:4:"code";s:758:"function ($split, $iterator) use($f) {
    $sub_is_array = False;
    foreach ($iterator as $key => $value) {
        $temp = $f($value);
        if (is_array($temp)) {
            $sub_is_array = True;
            break;
        }
    }
    if ($sub_is_array) {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            if (is_array($temp)) {
                foreach ($temp as $e) {
                    array_push($result, $e);
                }
            }
        }
        return $result;
    } else {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            array_push($result, $temp);
        }
        return $result;
    }
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":166:{a:5:{s:4:"code";s:72:"function ($line) {
    $temp = explode(' ', $line);
    return $temp;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}
here5
here6test test test test try try try 
here7 array
here8  Array
socket_create()成功59066

socket_connect()成功
首次read_int()成功1
首次read_utf()成功5.6
socket_create()成功39420

socket_connect()成功
here3C:32:"SuperClosure\SerializableClosure":1616:{a:5:{s:4:"code";s:67:"function ($split, $iterator) use($f) {
    return $f($iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":1392:{a:5:{s:4:"code";s:329:"function ($iterator) use($memory, $serializer, $createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc) {
    $agg = new \aggregator($createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc);
    $merger = new \ExternalMerger($agg, $memory, $serializer);
    $merger->mergeCombiners($iterator);
    return $merger->items();
};";s:7:"context";a:5:{s:6:"memory";i:512;s:10:"serializer";O:23:"auto_batched_serializer":10:{s:9:"best_size";i:65536;s:20:"UNLIMITED_BATCH_SIZE";i:-1;s:18:"UNKNOWN_BATCH_SIZE";i:0;s:10:"serializer";N;s:10:"batch_size";i:0;s:19:"END_OF_DATA_SECTION";i:-1;s:20:"PHP_EXCEPTION_THROWN";i:-2;s:11:"TIMING_DATA";i:-3;s:13:"END_OF_STREAM";i:-4;s:4:"NULL";i:-5;}s:18:"createCombinerFunc";C:32:"SuperClosure\SerializableClosure":135:{a:5:{s:4:"code";s:33:"function ($x) {
    return $x;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"mergeValueFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}s:18:"mergeCombinersFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}
here5
here7 array
here8  Array
首次read_int()成功0
首次read_utf()成功5.6
here3C:32:"SuperClosure\SerializableClosure":1616:{a:5:{s:4:"code";s:67:"function ($split, $iterator) use($f) {
    return $f($iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":1392:{a:5:{s:4:"code";s:329:"function ($iterator) use($memory, $serializer, $createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc) {
    $agg = new \aggregator($createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc);
    $merger = new \ExternalMerger($agg, $memory, $serializer);
    $merger->mergeCombiners($iterator);
    return $merger->items();
};";s:7:"context";a:5:{s:6:"memory";i:512;s:10:"serializer";O:23:"auto_batched_serializer":10:{s:9:"best_size";i:65536;s:20:"UNLIMITED_BATCH_SIZE";i:-1;s:18:"UNKNOWN_BATCH_SIZE";i:0;s:10:"serializer";N;s:10:"batch_size";i:0;s:19:"END_OF_DATA_SECTION";i:-1;s:20:"PHP_EXCEPTION_THROWN";i:-2;s:11:"TIMING_DATA";i:-3;s:13:"END_OF_STREAM";i:-4;s:4:"NULL";i:-5;}s:18:"createCombinerFunc";C:32:"SuperClosure\SerializableClosure":135:{a:5:{s:4:"code";s:33:"function ($x) {
    return $x;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"mergeValueFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}s:18:"mergeCombinersFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}
here5
here7 array
here8  Array
socket_create()成功50463

socket_connect()成功
首次read_int()成功0
首次read_utf()成功5.6
socket_create()成功48050

socket_connect()成功
here3C:32:"SuperClosure\SerializableClosure":6246:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":1938:{a:5:{s:4:"code";s:1484:"function ($iterator) use($numPartitions, $partitionFunc, $limit, $outputSerializer) {
    $buckets = array();
    $c = 0;
    $batch = min(10 * $numPartitions, 1000);
    foreach ($iterator as $element) {
        file_put_contents('/home/gt/php_worker9.txt', 'here1' . $element . '
', FILE_APPEND);
    }
    foreach ($iterator as $key => $value) {
        $buckets[$partitionFunc($key) % $numPartitions] = array();
        $buckets[$partitionFunc($key) % $numPartitions][$key] = $value;
        $c++;
        if ($c % 1000 == 0 && memory_get_usage() / 1024 / 1024 > $limit || $c > $batch) {
            $n = sizeof($buckets);
            $size = 0;
            $result = array();
            foreach ($buckets as $key2 => $value2) {
                #value是一个array
                array_push($result, serialize($key2));
                $d = serialize($value2);
                unset($value2);
                array_push($result, $d);
                $size += strlen($d);
            }
            $avg = intval($size / $n) >> 20;
            # let 1M < avg < 10M
            if ($avg < 1) {
                $batch *= 1.5;
            } elseif ($avg > 10) {
                $batch = max(intval($batch / 1.5), 1);
            }
            $c = 0;
            return $result;
        }
    }
    $result = array();
    foreach ($buckets as $key => $value) {
        array_push($result, serialize($key));
        array_push($result, serialize($value));
    }
    return $result;
};";s:7:"context";a:3:{s:13:"numPartitions";i:2;s:13:"partitionFunc";C:32:"SuperClosure\SerializableClosure":240:{a:5:{s:4:"code";s:137:"function ($x) {
    if ($x == null) {
        return 0;
    }
    $h = null;
    if (is_array($x)) {
    }
    return hash('md5', $x);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:5:"limit";i:256;}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":3944:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":1767:{a:5:{s:4:"code";s:67:"function ($split, $iterator) use($f) {
    return $f($iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":1543:{a:5:{s:4:"code";s:480:"function ($iterator) use($memory, $serializer, $createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc) {
    file_put_contents('/home/gt/php_worker7.txt', 'here1
', FILE_APPEND);
    $agg = new \aggregator($createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc);
    $merger = new \ExternalMerger($agg, $memory * 0.9, $serializer);
    $merger->mergeValues($iterator);
    file_put_contents('/home/gt/php_worker7.txt', 'here2
', FILE_APPEND);
    return $merger->items();
};";s:7:"context";a:5:{s:6:"memory";i:512;s:10:"serializer";O:23:"auto_batched_serializer":10:{s:9:"best_size";i:65536;s:20:"UNLIMITED_BATCH_SIZE";i:-1;s:18:"UNKNOWN_BATCH_SIZE";i:0;s:10:"serializer";N;s:10:"batch_size";i:0;s:19:"END_OF_DATA_SECTION";i:-1;s:20:"PHP_EXCEPTION_THROWN";i:-2;s:11:"TIMING_DATA";i:-3;s:13:"END_OF_STREAM";i:-4;s:4:"NULL";i:-5;}s:18:"createCombinerFunc";C:32:"SuperClosure\SerializableClosure":135:{a:5:{s:4:"code";s:33:"function ($x) {
    return $x;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"mergeValueFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}s:18:"mergeCombinersFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1813:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":369:{a:5:{s:4:"code";s:76:"function ($any, $iterator) use($f) {
    return array_map($f, $iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":137:{a:5:{s:4:"code";s:43:"function ($x) {
    return array($x, 1);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1081:{a:5:{s:4:"code";s:758:"function ($split, $iterator) use($f) {
    $sub_is_array = False;
    foreach ($iterator as $key => $value) {
        $temp = $f($value);
        if (is_array($temp)) {
            $sub_is_array = True;
            break;
        }
    }
    if ($sub_is_array) {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            if (is_array($temp)) {
                foreach ($temp as $e) {
                    array_push($result, $e);
                }
            }
        }
        return $result;
    } else {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            array_push($result, $temp);
        }
        return $result;
    }
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":166:{a:5:{s:4:"code";s:72:"function ($line) {
    $temp = explode(' ', $line);
    return $temp;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}
首次read_int()成功1
首次read_utf()成功5.6
here5
here6test test test test try try try 
here7 array
here8  Array
here3C:32:"SuperClosure\SerializableClosure":6246:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":1938:{a:5:{s:4:"code";s:1484:"function ($iterator) use($numPartitions, $partitionFunc, $limit, $outputSerializer) {
    $buckets = array();
    $c = 0;
    $batch = min(10 * $numPartitions, 1000);
    foreach ($iterator as $element) {
        file_put_contents('/home/gt/php_worker9.txt', 'here1' . $element . '
', FILE_APPEND);
    }
    foreach ($iterator as $key => $value) {
        $buckets[$partitionFunc($key) % $numPartitions] = array();
        $buckets[$partitionFunc($key) % $numPartitions][$key] = $value;
        $c++;
        if ($c % 1000 == 0 && memory_get_usage() / 1024 / 1024 > $limit || $c > $batch) {
            $n = sizeof($buckets);
            $size = 0;
            $result = array();
            foreach ($buckets as $key2 => $value2) {
                #value是一个array
                array_push($result, serialize($key2));
                $d = serialize($value2);
                unset($value2);
                array_push($result, $d);
                $size += strlen($d);
            }
            $avg = intval($size / $n) >> 20;
            # let 1M < avg < 10M
            if ($avg < 1) {
                $batch *= 1.5;
            } elseif ($avg > 10) {
                $batch = max(intval($batch / 1.5), 1);
            }
            $c = 0;
            return $result;
        }
    }
    $result = array();
    foreach ($buckets as $key => $value) {
        array_push($result, serialize($key));
        array_push($result, serialize($value));
    }
    return $result;
};";s:7:"context";a:3:{s:13:"numPartitions";i:2;s:13:"partitionFunc";C:32:"SuperClosure\SerializableClosure":240:{a:5:{s:4:"code";s:137:"function ($x) {
    if ($x == null) {
        return 0;
    }
    $h = null;
    if (is_array($x)) {
    }
    return hash('md5', $x);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:5:"limit";i:256;}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":3944:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":1767:{a:5:{s:4:"code";s:67:"function ($split, $iterator) use($f) {
    return $f($iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":1543:{a:5:{s:4:"code";s:480:"function ($iterator) use($memory, $serializer, $createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc) {
    file_put_contents('/home/gt/php_worker7.txt', 'here1
', FILE_APPEND);
    $agg = new \aggregator($createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc);
    $merger = new \ExternalMerger($agg, $memory * 0.9, $serializer);
    $merger->mergeValues($iterator);
    file_put_contents('/home/gt/php_worker7.txt', 'here2
', FILE_APPEND);
    return $merger->items();
};";s:7:"context";a:5:{s:6:"memory";i:512;s:10:"serializer";O:23:"auto_batched_serializer":10:{s:9:"best_size";i:65536;s:20:"UNLIMITED_BATCH_SIZE";i:-1;s:18:"UNKNOWN_BATCH_SIZE";i:0;s:10:"serializer";N;s:10:"batch_size";i:0;s:19:"END_OF_DATA_SECTION";i:-1;s:20:"PHP_EXCEPTION_THROWN";i:-2;s:11:"TIMING_DATA";i:-3;s:13:"END_OF_STREAM";i:-4;s:4:"NULL";i:-5;}s:18:"createCombinerFunc";C:32:"SuperClosure\SerializableClosure":135:{a:5:{s:4:"code";s:33:"function ($x) {
    return $x;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"mergeValueFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}s:18:"mergeCombinersFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1813:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":369:{a:5:{s:4:"code";s:76:"function ($any, $iterator) use($f) {
    return array_map($f, $iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":137:{a:5:{s:4:"code";s:43:"function ($x) {
    return array($x, 1);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1081:{a:5:{s:4:"code";s:758:"function ($split, $iterator) use($f) {
    $sub_is_array = False;
    foreach ($iterator as $key => $value) {
        $temp = $f($value);
        if (is_array($temp)) {
            $sub_is_array = True;
            break;
        }
    }
    if ($sub_is_array) {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            if (is_array($temp)) {
                foreach ($temp as $e) {
                    array_push($result, $e);
                }
            }
        }
        return $result;
    } else {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            array_push($result, $temp);
        }
        return $result;
    }
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":166:{a:5:{s:4:"code";s:72:"function ($line) {
    $temp = explode(' ', $line);
    return $temp;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}
here5
here6do do do 
here7 array
here8  Array
socket_create()成功45247

socket_connect()成功
首次read_int()成功1
首次read_utf()成功5.6
here3C:32:"SuperClosure\SerializableClosure":1616:{a:5:{s:4:"code";s:67:"function ($split, $iterator) use($f) {
    return $f($iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":1392:{a:5:{s:4:"code";s:329:"function ($iterator) use($memory, $serializer, $createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc) {
    $agg = new \aggregator($createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc);
    $merger = new \ExternalMerger($agg, $memory, $serializer);
    $merger->mergeCombiners($iterator);
    return $merger->items();
};";s:7:"context";a:5:{s:6:"memory";i:512;s:10:"serializer";O:23:"auto_batched_serializer":10:{s:9:"best_size";i:65536;s:20:"UNLIMITED_BATCH_SIZE";i:-1;s:18:"UNKNOWN_BATCH_SIZE";i:0;s:10:"serializer";N;s:10:"batch_size";i:0;s:19:"END_OF_DATA_SECTION";i:-1;s:20:"PHP_EXCEPTION_THROWN";i:-2;s:11:"TIMING_DATA";i:-3;s:13:"END_OF_STREAM";i:-4;s:4:"NULL";i:-5;}s:18:"createCombinerFunc";C:32:"SuperClosure\SerializableClosure":135:{a:5:{s:4:"code";s:33:"function ($x) {
    return $x;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"mergeValueFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}s:18:"mergeCombinersFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}
here5
here7 array
here8  Array
socket_create()成功50449

socket_connect()成功
首次read_int()成功0
首次read_utf()成功5.6
here3C:32:"SuperClosure\SerializableClosure":1616:{a:5:{s:4:"code";s:67:"function ($split, $iterator) use($f) {
    return $f($iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":1392:{a:5:{s:4:"code";s:329:"function ($iterator) use($memory, $serializer, $createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc) {
    $agg = new \aggregator($createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc);
    $merger = new \ExternalMerger($agg, $memory, $serializer);
    $merger->mergeCombiners($iterator);
    return $merger->items();
};";s:7:"context";a:5:{s:6:"memory";i:512;s:10:"serializer";O:23:"auto_batched_serializer":10:{s:9:"best_size";i:65536;s:20:"UNLIMITED_BATCH_SIZE";i:-1;s:18:"UNKNOWN_BATCH_SIZE";i:0;s:10:"serializer";N;s:10:"batch_size";i:0;s:19:"END_OF_DATA_SECTION";i:-1;s:20:"PHP_EXCEPTION_THROWN";i:-2;s:11:"TIMING_DATA";i:-3;s:13:"END_OF_STREAM";i:-4;s:4:"NULL";i:-5;}s:18:"createCombinerFunc";C:32:"SuperClosure\SerializableClosure":135:{a:5:{s:4:"code";s:33:"function ($x) {
    return $x;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"mergeValueFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}s:18:"mergeCombinersFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}
here5
here7 array
here8  Array
socket_create()成功47886

socket_connect()成功
首次read_int()成功0
首次read_utf()成功5.6
socket_create()成功54233

socket_connect()成功
首次read_int()成功1
首次read_utf()成功5.6
here3C:32:"SuperClosure\SerializableClosure":6246:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":1938:{a:5:{s:4:"code";s:1484:"function ($iterator) use($numPartitions, $partitionFunc, $limit, $outputSerializer) {
    $buckets = array();
    $c = 0;
    $batch = min(10 * $numPartitions, 1000);
    foreach ($iterator as $element) {
        file_put_contents('/home/gt/php_worker9.txt', 'here1' . $element . '
', FILE_APPEND);
    }
    foreach ($iterator as $key => $value) {
        $buckets[$partitionFunc($key) % $numPartitions] = array();
        $buckets[$partitionFunc($key) % $numPartitions][$key] = $value;
        $c++;
        if ($c % 1000 == 0 && memory_get_usage() / 1024 / 1024 > $limit || $c > $batch) {
            $n = sizeof($buckets);
            $size = 0;
            $result = array();
            foreach ($buckets as $key2 => $value2) {
                #value是一个array
                array_push($result, serialize($key2));
                $d = serialize($value2);
                unset($value2);
                array_push($result, $d);
                $size += strlen($d);
            }
            $avg = intval($size / $n) >> 20;
            # let 1M < avg < 10M
            if ($avg < 1) {
                $batch *= 1.5;
            } elseif ($avg > 10) {
                $batch = max(intval($batch / 1.5), 1);
            }
            $c = 0;
            return $result;
        }
    }
    $result = array();
    foreach ($buckets as $key => $value) {
        array_push($result, serialize($key));
        array_push($result, serialize($value));
    }
    return $result;
};";s:7:"context";a:3:{s:13:"numPartitions";i:2;s:13:"partitionFunc";C:32:"SuperClosure\SerializableClosure":240:{a:5:{s:4:"code";s:137:"function ($x) {
    if ($x == null) {
        return 0;
    }
    $h = null;
    if (is_array($x)) {
    }
    return hash('md5', $x);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:5:"limit";i:256;}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":3944:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":1767:{a:5:{s:4:"code";s:67:"function ($split, $iterator) use($f) {
    return $f($iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":1543:{a:5:{s:4:"code";s:480:"function ($iterator) use($memory, $serializer, $createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc) {
    file_put_contents('/home/gt/php_worker7.txt', 'here1
', FILE_APPEND);
    $agg = new \aggregator($createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc);
    $merger = new \ExternalMerger($agg, $memory * 0.9, $serializer);
    $merger->mergeValues($iterator);
    file_put_contents('/home/gt/php_worker7.txt', 'here2
', FILE_APPEND);
    return $merger->items();
};";s:7:"context";a:5:{s:6:"memory";i:512;s:10:"serializer";O:23:"auto_batched_serializer":10:{s:9:"best_size";i:65536;s:20:"UNLIMITED_BATCH_SIZE";i:-1;s:18:"UNKNOWN_BATCH_SIZE";i:0;s:10:"serializer";N;s:10:"batch_size";i:0;s:19:"END_OF_DATA_SECTION";i:-1;s:20:"PHP_EXCEPTION_THROWN";i:-2;s:11:"TIMING_DATA";i:-3;s:13:"END_OF_STREAM";i:-4;s:4:"NULL";i:-5;}s:18:"createCombinerFunc";C:32:"SuperClosure\SerializableClosure":135:{a:5:{s:4:"code";s:33:"function ($x) {
    return $x;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"mergeValueFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}s:18:"mergeCombinersFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1813:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":369:{a:5:{s:4:"code";s:76:"function ($any, $iterator) use($f) {
    return array_map($f, $iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":137:{a:5:{s:4:"code";s:43:"function ($x) {
    return array($x, 1);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1081:{a:5:{s:4:"code";s:758:"function ($split, $iterator) use($f) {
    $sub_is_array = False;
    foreach ($iterator as $key => $value) {
        $temp = $f($value);
        if (is_array($temp)) {
            $sub_is_array = True;
            break;
        }
    }
    if ($sub_is_array) {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            if (is_array($temp)) {
                foreach ($temp as $e) {
                    array_push($result, $e);
                }
            }
        }
        return $result;
    } else {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            array_push($result, $temp);
        }
        return $result;
    }
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":166:{a:5:{s:4:"code";s:72:"function ($line) {
    $temp = explode(' ', $line);
    return $temp;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}
here5
here6test test test test try try try 
here3C:32:"SuperClosure\SerializableClosure":6246:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":1938:{a:5:{s:4:"code";s:1484:"function ($iterator) use($numPartitions, $partitionFunc, $limit, $outputSerializer) {
    $buckets = array();
    $c = 0;
    $batch = min(10 * $numPartitions, 1000);
    foreach ($iterator as $element) {
        file_put_contents('/home/gt/php_worker9.txt', 'here1' . $element . '
', FILE_APPEND);
    }
    foreach ($iterator as $key => $value) {
        $buckets[$partitionFunc($key) % $numPartitions] = array();
        $buckets[$partitionFunc($key) % $numPartitions][$key] = $value;
        $c++;
        if ($c % 1000 == 0 && memory_get_usage() / 1024 / 1024 > $limit || $c > $batch) {
            $n = sizeof($buckets);
            $size = 0;
            $result = array();
            foreach ($buckets as $key2 => $value2) {
                #value是一个array
                array_push($result, serialize($key2));
                $d = serialize($value2);
                unset($value2);
                array_push($result, $d);
                $size += strlen($d);
            }
            $avg = intval($size / $n) >> 20;
            # let 1M < avg < 10M
            if ($avg < 1) {
                $batch *= 1.5;
            } elseif ($avg > 10) {
                $batch = max(intval($batch / 1.5), 1);
            }
            $c = 0;
            return $result;
        }
    }
    $result = array();
    foreach ($buckets as $key => $value) {
        array_push($result, serialize($key));
        array_push($result, serialize($value));
    }
    return $result;
};";s:7:"context";a:3:{s:13:"numPartitions";i:2;s:13:"partitionFunc";C:32:"SuperClosure\SerializableClosure":240:{a:5:{s:4:"code";s:137:"function ($x) {
    if ($x == null) {
        return 0;
    }
    $h = null;
    if (is_array($x)) {
    }
    return hash('md5', $x);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:5:"limit";i:256;}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":3944:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":1767:{a:5:{s:4:"code";s:67:"function ($split, $iterator) use($f) {
    return $f($iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":1543:{a:5:{s:4:"code";s:480:"function ($iterator) use($memory, $serializer, $createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc) {
    file_put_contents('/home/gt/php_worker7.txt', 'here1
', FILE_APPEND);
    $agg = new \aggregator($createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc);
    $merger = new \ExternalMerger($agg, $memory * 0.9, $serializer);
    $merger->mergeValues($iterator);
    file_put_contents('/home/gt/php_worker7.txt', 'here2
', FILE_APPEND);
    return $merger->items();
};";s:7:"context";a:5:{s:6:"memory";i:512;s:10:"serializer";O:23:"auto_batched_serializer":10:{s:9:"best_size";i:65536;s:20:"UNLIMITED_BATCH_SIZE";i:-1;s:18:"UNKNOWN_BATCH_SIZE";i:0;s:10:"serializer";N;s:10:"batch_size";i:0;s:19:"END_OF_DATA_SECTION";i:-1;s:20:"PHP_EXCEPTION_THROWN";i:-2;s:11:"TIMING_DATA";i:-3;s:13:"END_OF_STREAM";i:-4;s:4:"NULL";i:-5;}s:18:"createCombinerFunc";C:32:"SuperClosure\SerializableClosure":135:{a:5:{s:4:"code";s:33:"function ($x) {
    return $x;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"mergeValueFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}s:18:"mergeCombinersFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1813:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":369:{a:5:{s:4:"code";s:76:"function ($any, $iterator) use($f) {
    return array_map($f, $iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":137:{a:5:{s:4:"code";s:43:"function ($x) {
    return array($x, 1);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1081:{a:5:{s:4:"code";s:758:"function ($split, $iterator) use($f) {
    $sub_is_array = False;
    foreach ($iterator as $key => $value) {
        $temp = $f($value);
        if (is_array($temp)) {
            $sub_is_array = True;
            break;
        }
    }
    if ($sub_is_array) {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            if (is_array($temp)) {
                foreach ($temp as $e) {
                    array_push($result, $e);
                }
            }
        }
        return $result;
    } else {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            array_push($result, $temp);
        }
        return $result;
    }
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":166:{a:5:{s:4:"code";s:72:"function ($line) {
    $temp = explode(' ', $line);
    return $temp;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}
here7 array
here8  Array
here5
here6do do do 
here7 array
here8  Array
socket_create()成功56515

socket_connect()成功
首次read_int()成功1
首次read_utf()成功5.6
here3C:32:"SuperClosure\SerializableClosure":1616:{a:5:{s:4:"code";s:67:"function ($split, $iterator) use($f) {
    return $f($iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":1392:{a:5:{s:4:"code";s:329:"function ($iterator) use($memory, $serializer, $createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc) {
    $agg = new \aggregator($createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc);
    $merger = new \ExternalMerger($agg, $memory, $serializer);
    $merger->mergeCombiners($iterator);
    return $merger->items();
};";s:7:"context";a:5:{s:6:"memory";i:512;s:10:"serializer";O:23:"auto_batched_serializer":10:{s:9:"best_size";i:65536;s:20:"UNLIMITED_BATCH_SIZE";i:-1;s:18:"UNKNOWN_BATCH_SIZE";i:0;s:10:"serializer";N;s:10:"batch_size";i:0;s:19:"END_OF_DATA_SECTION";i:-1;s:20:"PHP_EXCEPTION_THROWN";i:-2;s:11:"TIMING_DATA";i:-3;s:13:"END_OF_STREAM";i:-4;s:4:"NULL";i:-5;}s:18:"createCombinerFunc";C:32:"SuperClosure\SerializableClosure":135:{a:5:{s:4:"code";s:33:"function ($x) {
    return $x;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"mergeValueFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}s:18:"mergeCombinersFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}
here5
here7 array
here8  Array
socket_create()成功33794

socket_connect()成功
首次read_int()成功0
首次read_utf()成功5.6
here3C:32:"SuperClosure\SerializableClosure":1616:{a:5:{s:4:"code";s:67:"function ($split, $iterator) use($f) {
    return $f($iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":1392:{a:5:{s:4:"code";s:329:"function ($iterator) use($memory, $serializer, $createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc) {
    $agg = new \aggregator($createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc);
    $merger = new \ExternalMerger($agg, $memory, $serializer);
    $merger->mergeCombiners($iterator);
    return $merger->items();
};";s:7:"context";a:5:{s:6:"memory";i:512;s:10:"serializer";O:23:"auto_batched_serializer":10:{s:9:"best_size";i:65536;s:20:"UNLIMITED_BATCH_SIZE";i:-1;s:18:"UNKNOWN_BATCH_SIZE";i:0;s:10:"serializer";N;s:10:"batch_size";i:0;s:19:"END_OF_DATA_SECTION";i:-1;s:20:"PHP_EXCEPTION_THROWN";i:-2;s:11:"TIMING_DATA";i:-3;s:13:"END_OF_STREAM";i:-4;s:4:"NULL";i:-5;}s:18:"createCombinerFunc";C:32:"SuperClosure\SerializableClosure":135:{a:5:{s:4:"code";s:33:"function ($x) {
    return $x;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"mergeValueFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}s:18:"mergeCombinersFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}
here5
here7 array
here8  Array
socket_create()成功58005

socket_connect()成功
首次read_int()成功0
首次read_utf()成功5.6
socket_create()成功42533

socket_connect()成功
首次read_int()成功1
首次read_utf()成功5.6
here3C:32:"SuperClosure\SerializableClosure":6246:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":1938:{a:5:{s:4:"code";s:1484:"function ($iterator) use($numPartitions, $partitionFunc, $limit, $outputSerializer) {
    $buckets = array();
    $c = 0;
    $batch = min(10 * $numPartitions, 1000);
    foreach ($iterator as $element) {
        file_put_contents('/home/gt/php_worker9.txt', 'here1' . $element . '
', FILE_APPEND);
    }
    foreach ($iterator as $key => $value) {
        $buckets[$partitionFunc($key) % $numPartitions] = array();
        $buckets[$partitionFunc($key) % $numPartitions][$key] = $value;
        $c++;
        if ($c % 1000 == 0 && memory_get_usage() / 1024 / 1024 > $limit || $c > $batch) {
            $n = sizeof($buckets);
            $size = 0;
            $result = array();
            foreach ($buckets as $key2 => $value2) {
                #value是一个array
                array_push($result, serialize($key2));
                $d = serialize($value2);
                unset($value2);
                array_push($result, $d);
                $size += strlen($d);
            }
            $avg = intval($size / $n) >> 20;
            # let 1M < avg < 10M
            if ($avg < 1) {
                $batch *= 1.5;
            } elseif ($avg > 10) {
                $batch = max(intval($batch / 1.5), 1);
            }
            $c = 0;
            return $result;
        }
    }
    $result = array();
    foreach ($buckets as $key => $value) {
        array_push($result, serialize($key));
        array_push($result, serialize($value));
    }
    return $result;
};";s:7:"context";a:3:{s:13:"numPartitions";i:2;s:13:"partitionFunc";C:32:"SuperClosure\SerializableClosure":240:{a:5:{s:4:"code";s:137:"function ($x) {
    if ($x == null) {
        return 0;
    }
    $h = null;
    if (is_array($x)) {
    }
    return hash('md5', $x);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:5:"limit";i:256;}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":3944:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":1767:{a:5:{s:4:"code";s:67:"function ($split, $iterator) use($f) {
    return $f($iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":1543:{a:5:{s:4:"code";s:480:"function ($iterator) use($memory, $serializer, $createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc) {
    file_put_contents('/home/gt/php_worker7.txt', 'here1
', FILE_APPEND);
    $agg = new \aggregator($createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc);
    $merger = new \ExternalMerger($agg, $memory * 0.9, $serializer);
    $merger->mergeValues($iterator);
    file_put_contents('/home/gt/php_worker7.txt', 'here2
', FILE_APPEND);
    return $merger->items();
};";s:7:"context";a:5:{s:6:"memory";i:512;s:10:"serializer";O:23:"auto_batched_serializer":10:{s:9:"best_size";i:65536;s:20:"UNLIMITED_BATCH_SIZE";i:-1;s:18:"UNKNOWN_BATCH_SIZE";i:0;s:10:"serializer";N;s:10:"batch_size";i:0;s:19:"END_OF_DATA_SECTION";i:-1;s:20:"PHP_EXCEPTION_THROWN";i:-2;s:11:"TIMING_DATA";i:-3;s:13:"END_OF_STREAM";i:-4;s:4:"NULL";i:-5;}s:18:"createCombinerFunc";C:32:"SuperClosure\SerializableClosure":135:{a:5:{s:4:"code";s:33:"function ($x) {
    return $x;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"mergeValueFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}s:18:"mergeCombinersFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1813:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":369:{a:5:{s:4:"code";s:76:"function ($any, $iterator) use($f) {
    return array_map($f, $iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":137:{a:5:{s:4:"code";s:43:"function ($x) {
    return array($x, 1);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1081:{a:5:{s:4:"code";s:758:"function ($split, $iterator) use($f) {
    $sub_is_array = False;
    foreach ($iterator as $key => $value) {
        $temp = $f($value);
        if (is_array($temp)) {
            $sub_is_array = True;
            break;
        }
    }
    if ($sub_is_array) {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            if (is_array($temp)) {
                foreach ($temp as $e) {
                    array_push($result, $e);
                }
            }
        }
        return $result;
    } else {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            array_push($result, $temp);
        }
        return $result;
    }
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":166:{a:5:{s:4:"code";s:72:"function ($line) {
    $temp = explode(' ', $line);
    return $temp;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}
here3C:32:"SuperClosure\SerializableClosure":6246:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":1938:{a:5:{s:4:"code";s:1484:"function ($iterator) use($numPartitions, $partitionFunc, $limit, $outputSerializer) {
    $buckets = array();
    $c = 0;
    $batch = min(10 * $numPartitions, 1000);
    foreach ($iterator as $element) {
        file_put_contents('/home/gt/php_worker9.txt', 'here1' . $element . '
', FILE_APPEND);
    }
    foreach ($iterator as $key => $value) {
        $buckets[$partitionFunc($key) % $numPartitions] = array();
        $buckets[$partitionFunc($key) % $numPartitions][$key] = $value;
        $c++;
        if ($c % 1000 == 0 && memory_get_usage() / 1024 / 1024 > $limit || $c > $batch) {
            $n = sizeof($buckets);
            $size = 0;
            $result = array();
            foreach ($buckets as $key2 => $value2) {
                #value是一个array
                array_push($result, serialize($key2));
                $d = serialize($value2);
                unset($value2);
                array_push($result, $d);
                $size += strlen($d);
            }
            $avg = intval($size / $n) >> 20;
            # let 1M < avg < 10M
            if ($avg < 1) {
                $batch *= 1.5;
            } elseif ($avg > 10) {
                $batch = max(intval($batch / 1.5), 1);
            }
            $c = 0;
            return $result;
        }
    }
    $result = array();
    foreach ($buckets as $key => $value) {
        array_push($result, serialize($key));
        array_push($result, serialize($value));
    }
    return $result;
};";s:7:"context";a:3:{s:13:"numPartitions";i:2;s:13:"partitionFunc";C:32:"SuperClosure\SerializableClosure":240:{a:5:{s:4:"code";s:137:"function ($x) {
    if ($x == null) {
        return 0;
    }
    $h = null;
    if (is_array($x)) {
    }
    return hash('md5', $x);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:5:"limit";i:256;}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":3944:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":1767:{a:5:{s:4:"code";s:67:"function ($split, $iterator) use($f) {
    return $f($iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":1543:{a:5:{s:4:"code";s:480:"function ($iterator) use($memory, $serializer, $createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc) {
    file_put_contents('/home/gt/php_worker7.txt', 'here1
', FILE_APPEND);
    $agg = new \aggregator($createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc);
    $merger = new \ExternalMerger($agg, $memory * 0.9, $serializer);
    $merger->mergeValues($iterator);
    file_put_contents('/home/gt/php_worker7.txt', 'here2
', FILE_APPEND);
    return $merger->items();
};";s:7:"context";a:5:{s:6:"memory";i:512;s:10:"serializer";O:23:"auto_batched_serializer":10:{s:9:"best_size";i:65536;s:20:"UNLIMITED_BATCH_SIZE";i:-1;s:18:"UNKNOWN_BATCH_SIZE";i:0;s:10:"serializer";N;s:10:"batch_size";i:0;s:19:"END_OF_DATA_SECTION";i:-1;s:20:"PHP_EXCEPTION_THROWN";i:-2;s:11:"TIMING_DATA";i:-3;s:13:"END_OF_STREAM";i:-4;s:4:"NULL";i:-5;}s:18:"createCombinerFunc";C:32:"SuperClosure\SerializableClosure":135:{a:5:{s:4:"code";s:33:"function ($x) {
    return $x;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"mergeValueFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}s:18:"mergeCombinersFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1813:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":369:{a:5:{s:4:"code";s:76:"function ($any, $iterator) use($f) {
    return array_map($f, $iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":137:{a:5:{s:4:"code";s:43:"function ($x) {
    return array($x, 1);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1081:{a:5:{s:4:"code";s:758:"function ($split, $iterator) use($f) {
    $sub_is_array = False;
    foreach ($iterator as $key => $value) {
        $temp = $f($value);
        if (is_array($temp)) {
            $sub_is_array = True;
            break;
        }
    }
    if ($sub_is_array) {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            if (is_array($temp)) {
                foreach ($temp as $e) {
                    array_push($result, $e);
                }
            }
        }
        return $result;
    } else {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            array_push($result, $temp);
        }
        return $result;
    }
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":166:{a:5:{s:4:"code";s:72:"function ($line) {
    $temp = explode(' ', $line);
    return $temp;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}
here5
here6do do do 
here5
here6test test test test try try try 
here7 array
here8  Array
here7 array
here8  Array
socket_create()成功52085

socket_connect()成功
首次read_int()成功0
首次read_utf()成功5.6
here3C:32:"SuperClosure\SerializableClosure":1616:{a:5:{s:4:"code";s:67:"function ($split, $iterator) use($f) {
    return $f($iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":1392:{a:5:{s:4:"code";s:329:"function ($iterator) use($memory, $serializer, $createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc) {
    $agg = new \aggregator($createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc);
    $merger = new \ExternalMerger($agg, $memory, $serializer);
    $merger->mergeCombiners($iterator);
    return $merger->items();
};";s:7:"context";a:5:{s:6:"memory";i:512;s:10:"serializer";O:23:"auto_batched_serializer":10:{s:9:"best_size";i:65536;s:20:"UNLIMITED_BATCH_SIZE";i:-1;s:18:"UNKNOWN_BATCH_SIZE";i:0;s:10:"serializer";N;s:10:"batch_size";i:0;s:19:"END_OF_DATA_SECTION";i:-1;s:20:"PHP_EXCEPTION_THROWN";i:-2;s:11:"TIMING_DATA";i:-3;s:13:"END_OF_STREAM";i:-4;s:4:"NULL";i:-5;}s:18:"createCombinerFunc";C:32:"SuperClosure\SerializableClosure":135:{a:5:{s:4:"code";s:33:"function ($x) {
    return $x;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"mergeValueFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}s:18:"mergeCombinersFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}
here5
here7 array
here8  Array
socket_create()成功57246

socket_connect()成功
首次read_int()成功1
首次read_utf()成功5.6
here3C:32:"SuperClosure\SerializableClosure":1616:{a:5:{s:4:"code";s:67:"function ($split, $iterator) use($f) {
    return $f($iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":1392:{a:5:{s:4:"code";s:329:"function ($iterator) use($memory, $serializer, $createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc) {
    $agg = new \aggregator($createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc);
    $merger = new \ExternalMerger($agg, $memory, $serializer);
    $merger->mergeCombiners($iterator);
    return $merger->items();
};";s:7:"context";a:5:{s:6:"memory";i:512;s:10:"serializer";O:23:"auto_batched_serializer":10:{s:9:"best_size";i:65536;s:20:"UNLIMITED_BATCH_SIZE";i:-1;s:18:"UNKNOWN_BATCH_SIZE";i:0;s:10:"serializer";N;s:10:"batch_size";i:0;s:19:"END_OF_DATA_SECTION";i:-1;s:20:"PHP_EXCEPTION_THROWN";i:-2;s:11:"TIMING_DATA";i:-3;s:13:"END_OF_STREAM";i:-4;s:4:"NULL";i:-5;}s:18:"createCombinerFunc";C:32:"SuperClosure\SerializableClosure":135:{a:5:{s:4:"code";s:33:"function ($x) {
    return $x;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"mergeValueFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}s:18:"mergeCombinersFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}
here5
here7 array
here8  Array
socket_create()成功60418

socket_connect()成功
socket_create()成功50341

socket_connect()成功
首次read_int()成功0
首次read_utf()成功5.6
首次read_int()成功1
首次read_utf()成功5.6
here3C:32:"SuperClosure\SerializableClosure":6246:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":1938:{a:5:{s:4:"code";s:1484:"function ($iterator) use($numPartitions, $partitionFunc, $limit, $outputSerializer) {
    $buckets = array();
    $c = 0;
    $batch = min(10 * $numPartitions, 1000);
    foreach ($iterator as $element) {
        file_put_contents('/home/gt/php_worker9.txt', 'here1' . $element . '
', FILE_APPEND);
    }
    foreach ($iterator as $key => $value) {
        $buckets[$partitionFunc($key) % $numPartitions] = array();
        $buckets[$partitionFunc($key) % $numPartitions][$key] = $value;
        $c++;
        if ($c % 1000 == 0 && memory_get_usage() / 1024 / 1024 > $limit || $c > $batch) {
            $n = sizeof($buckets);
            $size = 0;
            $result = array();
            foreach ($buckets as $key2 => $value2) {
                #value是一个array
                array_push($result, serialize($key2));
                $d = serialize($value2);
                unset($value2);
                array_push($result, $d);
                $size += strlen($d);
            }
            $avg = intval($size / $n) >> 20;
            # let 1M < avg < 10M
            if ($avg < 1) {
                $batch *= 1.5;
            } elseif ($avg > 10) {
                $batch = max(intval($batch / 1.5), 1);
            }
            $c = 0;
            return $result;
        }
    }
    $result = array();
    foreach ($buckets as $key => $value) {
        array_push($result, serialize($key));
        array_push($result, serialize($value));
    }
    return $result;
};";s:7:"context";a:3:{s:13:"numPartitions";i:2;s:13:"partitionFunc";C:32:"SuperClosure\SerializableClosure":240:{a:5:{s:4:"code";s:137:"function ($x) {
    if ($x == null) {
        return 0;
    }
    $h = null;
    if (is_array($x)) {
    }
    return hash('md5', $x);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:5:"limit";i:256;}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":3944:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":1767:{a:5:{s:4:"code";s:67:"function ($split, $iterator) use($f) {
    return $f($iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":1543:{a:5:{s:4:"code";s:480:"function ($iterator) use($memory, $serializer, $createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc) {
    file_put_contents('/home/gt/php_worker7.txt', 'here1
', FILE_APPEND);
    $agg = new \aggregator($createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc);
    $merger = new \ExternalMerger($agg, $memory * 0.9, $serializer);
    $merger->mergeValues($iterator);
    file_put_contents('/home/gt/php_worker7.txt', 'here2
', FILE_APPEND);
    return $merger->items();
};";s:7:"context";a:5:{s:6:"memory";i:512;s:10:"serializer";O:23:"auto_batched_serializer":10:{s:9:"best_size";i:65536;s:20:"UNLIMITED_BATCH_SIZE";i:-1;s:18:"UNKNOWN_BATCH_SIZE";i:0;s:10:"serializer";N;s:10:"batch_size";i:0;s:19:"END_OF_DATA_SECTION";i:-1;s:20:"PHP_EXCEPTION_THROWN";i:-2;s:11:"TIMING_DATA";i:-3;s:13:"END_OF_STREAM";i:-4;s:4:"NULL";i:-5;}s:18:"createCombinerFunc";C:32:"SuperClosure\SerializableClosure":135:{a:5:{s:4:"code";s:33:"function ($x) {
    return $x;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"mergeValueFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}s:18:"mergeCombinersFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1813:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":369:{a:5:{s:4:"code";s:76:"function ($any, $iterator) use($f) {
    return array_map($f, $iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":137:{a:5:{s:4:"code";s:43:"function ($x) {
    return array($x, 1);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1081:{a:5:{s:4:"code";s:758:"function ($split, $iterator) use($f) {
    $sub_is_array = False;
    foreach ($iterator as $key => $value) {
        $temp = $f($value);
        if (is_array($temp)) {
            $sub_is_array = True;
            break;
        }
    }
    if ($sub_is_array) {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            if (is_array($temp)) {
                foreach ($temp as $e) {
                    array_push($result, $e);
                }
            }
        }
        return $result;
    } else {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            array_push($result, $temp);
        }
        return $result;
    }
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":166:{a:5:{s:4:"code";s:72:"function ($line) {
    $temp = explode(' ', $line);
    return $temp;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}
here5
here6test test test test try try try 
here7 array
here8  Array
here3C:32:"SuperClosure\SerializableClosure":6246:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":1938:{a:5:{s:4:"code";s:1484:"function ($iterator) use($numPartitions, $partitionFunc, $limit, $outputSerializer) {
    $buckets = array();
    $c = 0;
    $batch = min(10 * $numPartitions, 1000);
    foreach ($iterator as $element) {
        file_put_contents('/home/gt/php_worker9.txt', 'here1' . $element . '
', FILE_APPEND);
    }
    foreach ($iterator as $key => $value) {
        $buckets[$partitionFunc($key) % $numPartitions] = array();
        $buckets[$partitionFunc($key) % $numPartitions][$key] = $value;
        $c++;
        if ($c % 1000 == 0 && memory_get_usage() / 1024 / 1024 > $limit || $c > $batch) {
            $n = sizeof($buckets);
            $size = 0;
            $result = array();
            foreach ($buckets as $key2 => $value2) {
                #value是一个array
                array_push($result, serialize($key2));
                $d = serialize($value2);
                unset($value2);
                array_push($result, $d);
                $size += strlen($d);
            }
            $avg = intval($size / $n) >> 20;
            # let 1M < avg < 10M
            if ($avg < 1) {
                $batch *= 1.5;
            } elseif ($avg > 10) {
                $batch = max(intval($batch / 1.5), 1);
            }
            $c = 0;
            return $result;
        }
    }
    $result = array();
    foreach ($buckets as $key => $value) {
        array_push($result, serialize($key));
        array_push($result, serialize($value));
    }
    return $result;
};";s:7:"context";a:3:{s:13:"numPartitions";i:2;s:13:"partitionFunc";C:32:"SuperClosure\SerializableClosure":240:{a:5:{s:4:"code";s:137:"function ($x) {
    if ($x == null) {
        return 0;
    }
    $h = null;
    if (is_array($x)) {
    }
    return hash('md5', $x);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:5:"limit";i:256;}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":3944:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":1767:{a:5:{s:4:"code";s:67:"function ($split, $iterator) use($f) {
    return $f($iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":1543:{a:5:{s:4:"code";s:480:"function ($iterator) use($memory, $serializer, $createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc) {
    file_put_contents('/home/gt/php_worker7.txt', 'here1
', FILE_APPEND);
    $agg = new \aggregator($createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc);
    $merger = new \ExternalMerger($agg, $memory * 0.9, $serializer);
    $merger->mergeValues($iterator);
    file_put_contents('/home/gt/php_worker7.txt', 'here2
', FILE_APPEND);
    return $merger->items();
};";s:7:"context";a:5:{s:6:"memory";i:512;s:10:"serializer";O:23:"auto_batched_serializer":10:{s:9:"best_size";i:65536;s:20:"UNLIMITED_BATCH_SIZE";i:-1;s:18:"UNKNOWN_BATCH_SIZE";i:0;s:10:"serializer";N;s:10:"batch_size";i:0;s:19:"END_OF_DATA_SECTION";i:-1;s:20:"PHP_EXCEPTION_THROWN";i:-2;s:11:"TIMING_DATA";i:-3;s:13:"END_OF_STREAM";i:-4;s:4:"NULL";i:-5;}s:18:"createCombinerFunc";C:32:"SuperClosure\SerializableClosure":135:{a:5:{s:4:"code";s:33:"function ($x) {
    return $x;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"mergeValueFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}s:18:"mergeCombinersFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1813:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":369:{a:5:{s:4:"code";s:76:"function ($any, $iterator) use($f) {
    return array_map($f, $iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":137:{a:5:{s:4:"code";s:43:"function ($x) {
    return array($x, 1);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1081:{a:5:{s:4:"code";s:758:"function ($split, $iterator) use($f) {
    $sub_is_array = False;
    foreach ($iterator as $key => $value) {
        $temp = $f($value);
        if (is_array($temp)) {
            $sub_is_array = True;
            break;
        }
    }
    if ($sub_is_array) {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            if (is_array($temp)) {
                foreach ($temp as $e) {
                    array_push($result, $e);
                }
            }
        }
        return $result;
    } else {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            array_push($result, $temp);
        }
        return $result;
    }
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":166:{a:5:{s:4:"code";s:72:"function ($line) {
    $temp = explode(' ', $line);
    return $temp;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}
here5
here6do do do 
here7 array
here8  Array
socket_create()成功32958

socket_connect()成功
首次read_int()成功1
首次read_utf()成功5.6
here3C:32:"SuperClosure\SerializableClosure":1616:{a:5:{s:4:"code";s:67:"function ($split, $iterator) use($f) {
    return $f($iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":1392:{a:5:{s:4:"code";s:329:"function ($iterator) use($memory, $serializer, $createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc) {
    $agg = new \aggregator($createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc);
    $merger = new \ExternalMerger($agg, $memory, $serializer);
    $merger->mergeCombiners($iterator);
    return $merger->items();
};";s:7:"context";a:5:{s:6:"memory";i:512;s:10:"serializer";O:23:"auto_batched_serializer":10:{s:9:"best_size";i:65536;s:20:"UNLIMITED_BATCH_SIZE";i:-1;s:18:"UNKNOWN_BATCH_SIZE";i:0;s:10:"serializer";N;s:10:"batch_size";i:0;s:19:"END_OF_DATA_SECTION";i:-1;s:20:"PHP_EXCEPTION_THROWN";i:-2;s:11:"TIMING_DATA";i:-3;s:13:"END_OF_STREAM";i:-4;s:4:"NULL";i:-5;}s:18:"createCombinerFunc";C:32:"SuperClosure\SerializableClosure":135:{a:5:{s:4:"code";s:33:"function ($x) {
    return $x;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"mergeValueFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}s:18:"mergeCombinersFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}
here5
here7 array
here8  Array
socket_create()成功45920

socket_connect()成功
首次read_int()成功0
首次read_utf()成功5.6
here3C:32:"SuperClosure\SerializableClosure":1616:{a:5:{s:4:"code";s:67:"function ($split, $iterator) use($f) {
    return $f($iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":1392:{a:5:{s:4:"code";s:329:"function ($iterator) use($memory, $serializer, $createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc) {
    $agg = new \aggregator($createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc);
    $merger = new \ExternalMerger($agg, $memory, $serializer);
    $merger->mergeCombiners($iterator);
    return $merger->items();
};";s:7:"context";a:5:{s:6:"memory";i:512;s:10:"serializer";O:23:"auto_batched_serializer":10:{s:9:"best_size";i:65536;s:20:"UNLIMITED_BATCH_SIZE";i:-1;s:18:"UNKNOWN_BATCH_SIZE";i:0;s:10:"serializer";N;s:10:"batch_size";i:0;s:19:"END_OF_DATA_SECTION";i:-1;s:20:"PHP_EXCEPTION_THROWN";i:-2;s:11:"TIMING_DATA";i:-3;s:13:"END_OF_STREAM";i:-4;s:4:"NULL";i:-5;}s:18:"createCombinerFunc";C:32:"SuperClosure\SerializableClosure":135:{a:5:{s:4:"code";s:33:"function ($x) {
    return $x;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"mergeValueFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}s:18:"mergeCombinersFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}
here5
here7 array
here8  Array
socket_create()成功51074

socket_connect()成功
首次read_int()成功1
首次read_utf()成功5.6
socket_create()成功34133

socket_connect()成功
here3C:32:"SuperClosure\SerializableClosure":6246:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":1938:{a:5:{s:4:"code";s:1484:"function ($iterator) use($numPartitions, $partitionFunc, $limit, $outputSerializer) {
    $buckets = array();
    $c = 0;
    $batch = min(10 * $numPartitions, 1000);
    foreach ($iterator as $element) {
        file_put_contents('/home/gt/php_worker9.txt', 'here1' . $element . '
', FILE_APPEND);
    }
    foreach ($iterator as $key => $value) {
        $buckets[$partitionFunc($key) % $numPartitions] = array();
        $buckets[$partitionFunc($key) % $numPartitions][$key] = $value;
        $c++;
        if ($c % 1000 == 0 && memory_get_usage() / 1024 / 1024 > $limit || $c > $batch) {
            $n = sizeof($buckets);
            $size = 0;
            $result = array();
            foreach ($buckets as $key2 => $value2) {
                #value是一个array
                array_push($result, serialize($key2));
                $d = serialize($value2);
                unset($value2);
                array_push($result, $d);
                $size += strlen($d);
            }
            $avg = intval($size / $n) >> 20;
            # let 1M < avg < 10M
            if ($avg < 1) {
                $batch *= 1.5;
            } elseif ($avg > 10) {
                $batch = max(intval($batch / 1.5), 1);
            }
            $c = 0;
            return $result;
        }
    }
    $result = array();
    foreach ($buckets as $key => $value) {
        array_push($result, serialize($key));
        array_push($result, serialize($value));
    }
    return $result;
};";s:7:"context";a:3:{s:13:"numPartitions";i:2;s:13:"partitionFunc";C:32:"SuperClosure\SerializableClosure":240:{a:5:{s:4:"code";s:137:"function ($x) {
    if ($x == null) {
        return 0;
    }
    $h = null;
    if (is_array($x)) {
    }
    return hash('md5', $x);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:5:"limit";i:256;}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":3944:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":1767:{a:5:{s:4:"code";s:67:"function ($split, $iterator) use($f) {
    return $f($iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":1543:{a:5:{s:4:"code";s:480:"function ($iterator) use($memory, $serializer, $createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc) {
    file_put_contents('/home/gt/php_worker7.txt', 'here1
', FILE_APPEND);
    $agg = new \aggregator($createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc);
    $merger = new \ExternalMerger($agg, $memory * 0.9, $serializer);
    $merger->mergeValues($iterator);
    file_put_contents('/home/gt/php_worker7.txt', 'here2
', FILE_APPEND);
    return $merger->items();
};";s:7:"context";a:5:{s:6:"memory";i:512;s:10:"serializer";O:23:"auto_batched_serializer":10:{s:9:"best_size";i:65536;s:20:"UNLIMITED_BATCH_SIZE";i:-1;s:18:"UNKNOWN_BATCH_SIZE";i:0;s:10:"serializer";N;s:10:"batch_size";i:0;s:19:"END_OF_DATA_SECTION";i:-1;s:20:"PHP_EXCEPTION_THROWN";i:-2;s:11:"TIMING_DATA";i:-3;s:13:"END_OF_STREAM";i:-4;s:4:"NULL";i:-5;}s:18:"createCombinerFunc";C:32:"SuperClosure\SerializableClosure":135:{a:5:{s:4:"code";s:33:"function ($x) {
    return $x;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"mergeValueFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}s:18:"mergeCombinersFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1813:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":369:{a:5:{s:4:"code";s:76:"function ($any, $iterator) use($f) {
    return array_map($f, $iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":137:{a:5:{s:4:"code";s:43:"function ($x) {
    return array($x, 1);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1081:{a:5:{s:4:"code";s:758:"function ($split, $iterator) use($f) {
    $sub_is_array = False;
    foreach ($iterator as $key => $value) {
        $temp = $f($value);
        if (is_array($temp)) {
            $sub_is_array = True;
            break;
        }
    }
    if ($sub_is_array) {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            if (is_array($temp)) {
                foreach ($temp as $e) {
                    array_push($result, $e);
                }
            }
        }
        return $result;
    } else {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            array_push($result, $temp);
        }
        return $result;
    }
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":166:{a:5:{s:4:"code";s:72:"function ($line) {
    $temp = explode(' ', $line);
    return $temp;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}
here5
here6do do do 
here7 array
here8  Array
首次read_int()成功0
首次read_utf()成功5.6
here3C:32:"SuperClosure\SerializableClosure":6246:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":1938:{a:5:{s:4:"code";s:1484:"function ($iterator) use($numPartitions, $partitionFunc, $limit, $outputSerializer) {
    $buckets = array();
    $c = 0;
    $batch = min(10 * $numPartitions, 1000);
    foreach ($iterator as $element) {
        file_put_contents('/home/gt/php_worker9.txt', 'here1' . $element . '
', FILE_APPEND);
    }
    foreach ($iterator as $key => $value) {
        $buckets[$partitionFunc($key) % $numPartitions] = array();
        $buckets[$partitionFunc($key) % $numPartitions][$key] = $value;
        $c++;
        if ($c % 1000 == 0 && memory_get_usage() / 1024 / 1024 > $limit || $c > $batch) {
            $n = sizeof($buckets);
            $size = 0;
            $result = array();
            foreach ($buckets as $key2 => $value2) {
                #value是一个array
                array_push($result, serialize($key2));
                $d = serialize($value2);
                unset($value2);
                array_push($result, $d);
                $size += strlen($d);
            }
            $avg = intval($size / $n) >> 20;
            # let 1M < avg < 10M
            if ($avg < 1) {
                $batch *= 1.5;
            } elseif ($avg > 10) {
                $batch = max(intval($batch / 1.5), 1);
            }
            $c = 0;
            return $result;
        }
    }
    $result = array();
    foreach ($buckets as $key => $value) {
        array_push($result, serialize($key));
        array_push($result, serialize($value));
    }
    return $result;
};";s:7:"context";a:3:{s:13:"numPartitions";i:2;s:13:"partitionFunc";C:32:"SuperClosure\SerializableClosure":240:{a:5:{s:4:"code";s:137:"function ($x) {
    if ($x == null) {
        return 0;
    }
    $h = null;
    if (is_array($x)) {
    }
    return hash('md5', $x);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:5:"limit";i:256;}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":3944:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":1767:{a:5:{s:4:"code";s:67:"function ($split, $iterator) use($f) {
    return $f($iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":1543:{a:5:{s:4:"code";s:480:"function ($iterator) use($memory, $serializer, $createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc) {
    file_put_contents('/home/gt/php_worker7.txt', 'here1
', FILE_APPEND);
    $agg = new \aggregator($createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc);
    $merger = new \ExternalMerger($agg, $memory * 0.9, $serializer);
    $merger->mergeValues($iterator);
    file_put_contents('/home/gt/php_worker7.txt', 'here2
', FILE_APPEND);
    return $merger->items();
};";s:7:"context";a:5:{s:6:"memory";i:512;s:10:"serializer";O:23:"auto_batched_serializer":10:{s:9:"best_size";i:65536;s:20:"UNLIMITED_BATCH_SIZE";i:-1;s:18:"UNKNOWN_BATCH_SIZE";i:0;s:10:"serializer";N;s:10:"batch_size";i:0;s:19:"END_OF_DATA_SECTION";i:-1;s:20:"PHP_EXCEPTION_THROWN";i:-2;s:11:"TIMING_DATA";i:-3;s:13:"END_OF_STREAM";i:-4;s:4:"NULL";i:-5;}s:18:"createCombinerFunc";C:32:"SuperClosure\SerializableClosure":135:{a:5:{s:4:"code";s:33:"function ($x) {
    return $x;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"mergeValueFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}s:18:"mergeCombinersFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1813:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":369:{a:5:{s:4:"code";s:76:"function ($any, $iterator) use($f) {
    return array_map($f, $iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":137:{a:5:{s:4:"code";s:43:"function ($x) {
    return array($x, 1);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1081:{a:5:{s:4:"code";s:758:"function ($split, $iterator) use($f) {
    $sub_is_array = False;
    foreach ($iterator as $key => $value) {
        $temp = $f($value);
        if (is_array($temp)) {
            $sub_is_array = True;
            break;
        }
    }
    if ($sub_is_array) {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            if (is_array($temp)) {
                foreach ($temp as $e) {
                    array_push($result, $e);
                }
            }
        }
        return $result;
    } else {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            array_push($result, $temp);
        }
        return $result;
    }
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":166:{a:5:{s:4:"code";s:72:"function ($line) {
    $temp = explode(' ', $line);
    return $temp;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}
here5
here6test test test test try try try 
here7 array
here8  Array
socket_create()成功33383

socket_connect()成功
首次read_int()成功1
首次read_utf()成功5.6
here3C:32:"SuperClosure\SerializableClosure":1616:{a:5:{s:4:"code";s:67:"function ($split, $iterator) use($f) {
    return $f($iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":1392:{a:5:{s:4:"code";s:329:"function ($iterator) use($memory, $serializer, $createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc) {
    $agg = new \aggregator($createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc);
    $merger = new \ExternalMerger($agg, $memory, $serializer);
    $merger->mergeCombiners($iterator);
    return $merger->items();
};";s:7:"context";a:5:{s:6:"memory";i:512;s:10:"serializer";O:23:"auto_batched_serializer":10:{s:9:"best_size";i:65536;s:20:"UNLIMITED_BATCH_SIZE";i:-1;s:18:"UNKNOWN_BATCH_SIZE";i:0;s:10:"serializer";N;s:10:"batch_size";i:0;s:19:"END_OF_DATA_SECTION";i:-1;s:20:"PHP_EXCEPTION_THROWN";i:-2;s:11:"TIMING_DATA";i:-3;s:13:"END_OF_STREAM";i:-4;s:4:"NULL";i:-5;}s:18:"createCombinerFunc";C:32:"SuperClosure\SerializableClosure":135:{a:5:{s:4:"code";s:33:"function ($x) {
    return $x;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"mergeValueFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}s:18:"mergeCombinersFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}
here5
here7 array
here8  Array
socket_create()成功48684

socket_connect()成功
首次read_int()成功0
首次read_utf()成功5.6
here3C:32:"SuperClosure\SerializableClosure":1616:{a:5:{s:4:"code";s:67:"function ($split, $iterator) use($f) {
    return $f($iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":1392:{a:5:{s:4:"code";s:329:"function ($iterator) use($memory, $serializer, $createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc) {
    $agg = new \aggregator($createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc);
    $merger = new \ExternalMerger($agg, $memory, $serializer);
    $merger->mergeCombiners($iterator);
    return $merger->items();
};";s:7:"context";a:5:{s:6:"memory";i:512;s:10:"serializer";O:23:"auto_batched_serializer":10:{s:9:"best_size";i:65536;s:20:"UNLIMITED_BATCH_SIZE";i:-1;s:18:"UNKNOWN_BATCH_SIZE";i:0;s:10:"serializer";N;s:10:"batch_size";i:0;s:19:"END_OF_DATA_SECTION";i:-1;s:20:"PHP_EXCEPTION_THROWN";i:-2;s:11:"TIMING_DATA";i:-3;s:13:"END_OF_STREAM";i:-4;s:4:"NULL";i:-5;}s:18:"createCombinerFunc";C:32:"SuperClosure\SerializableClosure":135:{a:5:{s:4:"code";s:33:"function ($x) {
    return $x;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"mergeValueFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}s:18:"mergeCombinersFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}
here5
here7 array
here8  Array
socket_create()成功42409

socket_connect()成功
首次read_int()成功1
首次read_utf()成功5.6
here3C:32:"SuperClosure\SerializableClosure":6246:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":1938:{a:5:{s:4:"code";s:1484:"function ($iterator) use($numPartitions, $partitionFunc, $limit, $outputSerializer) {
    $buckets = array();
    $c = 0;
    $batch = min(10 * $numPartitions, 1000);
    foreach ($iterator as $element) {
        file_put_contents('/home/gt/php_worker9.txt', 'here1' . $element . '
', FILE_APPEND);
    }
    foreach ($iterator as $key => $value) {
        $buckets[$partitionFunc($key) % $numPartitions] = array();
        $buckets[$partitionFunc($key) % $numPartitions][$key] = $value;
        $c++;
        if ($c % 1000 == 0 && memory_get_usage() / 1024 / 1024 > $limit || $c > $batch) {
            $n = sizeof($buckets);
            $size = 0;
            $result = array();
            foreach ($buckets as $key2 => $value2) {
                #value是一个array
                array_push($result, serialize($key2));
                $d = serialize($value2);
                unset($value2);
                array_push($result, $d);
                $size += strlen($d);
            }
            $avg = intval($size / $n) >> 20;
            # let 1M < avg < 10M
            if ($avg < 1) {
                $batch *= 1.5;
            } elseif ($avg > 10) {
                $batch = max(intval($batch / 1.5), 1);
            }
            $c = 0;
            return $result;
        }
    }
    $result = array();
    foreach ($buckets as $key => $value) {
        array_push($result, serialize($key));
        array_push($result, serialize($value));
    }
    return $result;
};";s:7:"context";a:3:{s:13:"numPartitions";i:2;s:13:"partitionFunc";C:32:"SuperClosure\SerializableClosure":240:{a:5:{s:4:"code";s:137:"function ($x) {
    if ($x == null) {
        return 0;
    }
    $h = null;
    if (is_array($x)) {
    }
    return hash('md5', $x);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:5:"limit";i:256;}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":3944:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":1767:{a:5:{s:4:"code";s:67:"function ($split, $iterator) use($f) {
    return $f($iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":1543:{a:5:{s:4:"code";s:480:"function ($iterator) use($memory, $serializer, $createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc) {
    file_put_contents('/home/gt/php_worker7.txt', 'here1
', FILE_APPEND);
    $agg = new \aggregator($createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc);
    $merger = new \ExternalMerger($agg, $memory * 0.9, $serializer);
    $merger->mergeValues($iterator);
    file_put_contents('/home/gt/php_worker7.txt', 'here2
', FILE_APPEND);
    return $merger->items();
};";s:7:"context";a:5:{s:6:"memory";i:512;s:10:"serializer";O:23:"auto_batched_serializer":10:{s:9:"best_size";i:65536;s:20:"UNLIMITED_BATCH_SIZE";i:-1;s:18:"UNKNOWN_BATCH_SIZE";i:0;s:10:"serializer";N;s:10:"batch_size";i:0;s:19:"END_OF_DATA_SECTION";i:-1;s:20:"PHP_EXCEPTION_THROWN";i:-2;s:11:"TIMING_DATA";i:-3;s:13:"END_OF_STREAM";i:-4;s:4:"NULL";i:-5;}s:18:"createCombinerFunc";C:32:"SuperClosure\SerializableClosure":135:{a:5:{s:4:"code";s:33:"function ($x) {
    return $x;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"mergeValueFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}s:18:"mergeCombinersFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1813:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":369:{a:5:{s:4:"code";s:76:"function ($any, $iterator) use($f) {
    return array_map($f, $iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":137:{a:5:{s:4:"code";s:43:"function ($x) {
    return array($x, 1);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1081:{a:5:{s:4:"code";s:758:"function ($split, $iterator) use($f) {
    $sub_is_array = False;
    foreach ($iterator as $key => $value) {
        $temp = $f($value);
        if (is_array($temp)) {
            $sub_is_array = True;
            break;
        }
    }
    if ($sub_is_array) {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            if (is_array($temp)) {
                foreach ($temp as $e) {
                    array_push($result, $e);
                }
            }
        }
        return $result;
    } else {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            array_push($result, $temp);
        }
        return $result;
    }
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":166:{a:5:{s:4:"code";s:72:"function ($line) {
    $temp = explode(' ', $line);
    return $temp;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}
here5
here6do do do 
here7 array
here8  Array
socket_create()成功42936

socket_connect()成功
首次read_int()成功0
首次read_utf()成功5.6
here3C:32:"SuperClosure\SerializableClosure":6246:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":1938:{a:5:{s:4:"code";s:1484:"function ($iterator) use($numPartitions, $partitionFunc, $limit, $outputSerializer) {
    $buckets = array();
    $c = 0;
    $batch = min(10 * $numPartitions, 1000);
    foreach ($iterator as $element) {
        file_put_contents('/home/gt/php_worker9.txt', 'here1' . $element . '
', FILE_APPEND);
    }
    foreach ($iterator as $key => $value) {
        $buckets[$partitionFunc($key) % $numPartitions] = array();
        $buckets[$partitionFunc($key) % $numPartitions][$key] = $value;
        $c++;
        if ($c % 1000 == 0 && memory_get_usage() / 1024 / 1024 > $limit || $c > $batch) {
            $n = sizeof($buckets);
            $size = 0;
            $result = array();
            foreach ($buckets as $key2 => $value2) {
                #value是一个array
                array_push($result, serialize($key2));
                $d = serialize($value2);
                unset($value2);
                array_push($result, $d);
                $size += strlen($d);
            }
            $avg = intval($size / $n) >> 20;
            # let 1M < avg < 10M
            if ($avg < 1) {
                $batch *= 1.5;
            } elseif ($avg > 10) {
                $batch = max(intval($batch / 1.5), 1);
            }
            $c = 0;
            return $result;
        }
    }
    $result = array();
    foreach ($buckets as $key => $value) {
        array_push($result, serialize($key));
        array_push($result, serialize($value));
    }
    return $result;
};";s:7:"context";a:3:{s:13:"numPartitions";i:2;s:13:"partitionFunc";C:32:"SuperClosure\SerializableClosure":240:{a:5:{s:4:"code";s:137:"function ($x) {
    if ($x == null) {
        return 0;
    }
    $h = null;
    if (is_array($x)) {
    }
    return hash('md5', $x);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:5:"limit";i:256;}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":3944:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":1767:{a:5:{s:4:"code";s:67:"function ($split, $iterator) use($f) {
    return $f($iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":1543:{a:5:{s:4:"code";s:480:"function ($iterator) use($memory, $serializer, $createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc) {
    file_put_contents('/home/gt/php_worker7.txt', 'here1
', FILE_APPEND);
    $agg = new \aggregator($createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc);
    $merger = new \ExternalMerger($agg, $memory * 0.9, $serializer);
    $merger->mergeValues($iterator);
    file_put_contents('/home/gt/php_worker7.txt', 'here2
', FILE_APPEND);
    return $merger->items();
};";s:7:"context";a:5:{s:6:"memory";i:512;s:10:"serializer";O:23:"auto_batched_serializer":10:{s:9:"best_size";i:65536;s:20:"UNLIMITED_BATCH_SIZE";i:-1;s:18:"UNKNOWN_BATCH_SIZE";i:0;s:10:"serializer";N;s:10:"batch_size";i:0;s:19:"END_OF_DATA_SECTION";i:-1;s:20:"PHP_EXCEPTION_THROWN";i:-2;s:11:"TIMING_DATA";i:-3;s:13:"END_OF_STREAM";i:-4;s:4:"NULL";i:-5;}s:18:"createCombinerFunc";C:32:"SuperClosure\SerializableClosure":135:{a:5:{s:4:"code";s:33:"function ($x) {
    return $x;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"mergeValueFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}s:18:"mergeCombinersFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1813:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":369:{a:5:{s:4:"code";s:76:"function ($any, $iterator) use($f) {
    return array_map($f, $iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":137:{a:5:{s:4:"code";s:43:"function ($x) {
    return array($x, 1);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1081:{a:5:{s:4:"code";s:758:"function ($split, $iterator) use($f) {
    $sub_is_array = False;
    foreach ($iterator as $key => $value) {
        $temp = $f($value);
        if (is_array($temp)) {
            $sub_is_array = True;
            break;
        }
    }
    if ($sub_is_array) {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            if (is_array($temp)) {
                foreach ($temp as $e) {
                    array_push($result, $e);
                }
            }
        }
        return $result;
    } else {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            array_push($result, $temp);
        }
        return $result;
    }
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":166:{a:5:{s:4:"code";s:72:"function ($line) {
    $temp = explode(' ', $line);
    return $temp;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}
here5
here6test test test test try try try 
here7 array
here8  Array
socket_create()成功34338

socket_connect()成功
首次read_int()成功1
首次read_utf()成功5.6
here3C:32:"SuperClosure\SerializableClosure":1616:{a:5:{s:4:"code";s:67:"function ($split, $iterator) use($f) {
    return $f($iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":1392:{a:5:{s:4:"code";s:329:"function ($iterator) use($memory, $serializer, $createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc) {
    $agg = new \aggregator($createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc);
    $merger = new \ExternalMerger($agg, $memory, $serializer);
    $merger->mergeCombiners($iterator);
    return $merger->items();
};";s:7:"context";a:5:{s:6:"memory";i:512;s:10:"serializer";O:23:"auto_batched_serializer":10:{s:9:"best_size";i:65536;s:20:"UNLIMITED_BATCH_SIZE";i:-1;s:18:"UNKNOWN_BATCH_SIZE";i:0;s:10:"serializer";N;s:10:"batch_size";i:0;s:19:"END_OF_DATA_SECTION";i:-1;s:20:"PHP_EXCEPTION_THROWN";i:-2;s:11:"TIMING_DATA";i:-3;s:13:"END_OF_STREAM";i:-4;s:4:"NULL";i:-5;}s:18:"createCombinerFunc";C:32:"SuperClosure\SerializableClosure":135:{a:5:{s:4:"code";s:33:"function ($x) {
    return $x;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"mergeValueFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}s:18:"mergeCombinersFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}
here5
here7 array
here8  Array
socket_create()成功54244

socket_connect()成功
首次read_int()成功0
首次read_utf()成功5.6
here3C:32:"SuperClosure\SerializableClosure":1616:{a:5:{s:4:"code";s:67:"function ($split, $iterator) use($f) {
    return $f($iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":1392:{a:5:{s:4:"code";s:329:"function ($iterator) use($memory, $serializer, $createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc) {
    $agg = new \aggregator($createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc);
    $merger = new \ExternalMerger($agg, $memory, $serializer);
    $merger->mergeCombiners($iterator);
    return $merger->items();
};";s:7:"context";a:5:{s:6:"memory";i:512;s:10:"serializer";O:23:"auto_batched_serializer":10:{s:9:"best_size";i:65536;s:20:"UNLIMITED_BATCH_SIZE";i:-1;s:18:"UNKNOWN_BATCH_SIZE";i:0;s:10:"serializer";N;s:10:"batch_size";i:0;s:19:"END_OF_DATA_SECTION";i:-1;s:20:"PHP_EXCEPTION_THROWN";i:-2;s:11:"TIMING_DATA";i:-3;s:13:"END_OF_STREAM";i:-4;s:4:"NULL";i:-5;}s:18:"createCombinerFunc";C:32:"SuperClosure\SerializableClosure":135:{a:5:{s:4:"code";s:33:"function ($x) {
    return $x;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"mergeValueFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}s:18:"mergeCombinersFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}
here5
here7 array
here8  Array
socket_create()成功56158

socket_connect()成功
首次read_int()成功0
首次read_utf()成功5.6
here3C:32:"SuperClosure\SerializableClosure":6246:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":1938:{a:5:{s:4:"code";s:1484:"function ($iterator) use($numPartitions, $partitionFunc, $limit, $outputSerializer) {
    $buckets = array();
    $c = 0;
    $batch = min(10 * $numPartitions, 1000);
    foreach ($iterator as $element) {
        file_put_contents('/home/gt/php_worker9.txt', 'here1' . $element . '
', FILE_APPEND);
    }
    foreach ($iterator as $key => $value) {
        $buckets[$partitionFunc($key) % $numPartitions] = array();
        $buckets[$partitionFunc($key) % $numPartitions][$key] = $value;
        $c++;
        if ($c % 1000 == 0 && memory_get_usage() / 1024 / 1024 > $limit || $c > $batch) {
            $n = sizeof($buckets);
            $size = 0;
            $result = array();
            foreach ($buckets as $key2 => $value2) {
                #value是一个array
                array_push($result, serialize($key2));
                $d = serialize($value2);
                unset($value2);
                array_push($result, $d);
                $size += strlen($d);
            }
            $avg = intval($size / $n) >> 20;
            # let 1M < avg < 10M
            if ($avg < 1) {
                $batch *= 1.5;
            } elseif ($avg > 10) {
                $batch = max(intval($batch / 1.5), 1);
            }
            $c = 0;
            return $result;
        }
    }
    $result = array();
    foreach ($buckets as $key => $value) {
        array_push($result, serialize($key));
        array_push($result, serialize($value));
    }
    return $result;
};";s:7:"context";a:3:{s:13:"numPartitions";i:2;s:13:"partitionFunc";C:32:"SuperClosure\SerializableClosure":240:{a:5:{s:4:"code";s:137:"function ($x) {
    if ($x == null) {
        return 0;
    }
    $h = null;
    if (is_array($x)) {
    }
    return hash('md5', $x);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:5:"limit";i:256;}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":3944:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":1767:{a:5:{s:4:"code";s:67:"function ($split, $iterator) use($f) {
    return $f($iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":1543:{a:5:{s:4:"code";s:480:"function ($iterator) use($memory, $serializer, $createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc) {
    file_put_contents('/home/gt/php_worker7.txt', 'here1
', FILE_APPEND);
    $agg = new \aggregator($createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc);
    $merger = new \ExternalMerger($agg, $memory * 0.9, $serializer);
    $merger->mergeValues($iterator);
    file_put_contents('/home/gt/php_worker7.txt', 'here2
', FILE_APPEND);
    return $merger->items();
};";s:7:"context";a:5:{s:6:"memory";i:512;s:10:"serializer";O:23:"auto_batched_serializer":10:{s:9:"best_size";i:65536;s:20:"UNLIMITED_BATCH_SIZE";i:-1;s:18:"UNKNOWN_BATCH_SIZE";i:0;s:10:"serializer";N;s:10:"batch_size";i:0;s:19:"END_OF_DATA_SECTION";i:-1;s:20:"PHP_EXCEPTION_THROWN";i:-2;s:11:"TIMING_DATA";i:-3;s:13:"END_OF_STREAM";i:-4;s:4:"NULL";i:-5;}s:18:"createCombinerFunc";C:32:"SuperClosure\SerializableClosure":135:{a:5:{s:4:"code";s:33:"function ($x) {
    return $x;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"mergeValueFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}s:18:"mergeCombinersFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1813:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":369:{a:5:{s:4:"code";s:76:"function ($any, $iterator) use($f) {
    return array_map($f, $iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":137:{a:5:{s:4:"code";s:43:"function ($x) {
    return array($x, 1);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1081:{a:5:{s:4:"code";s:758:"function ($split, $iterator) use($f) {
    $sub_is_array = False;
    foreach ($iterator as $key => $value) {
        $temp = $f($value);
        if (is_array($temp)) {
            $sub_is_array = True;
            break;
        }
    }
    if ($sub_is_array) {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            if (is_array($temp)) {
                foreach ($temp as $e) {
                    array_push($result, $e);
                }
            }
        }
        return $result;
    } else {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            array_push($result, $temp);
        }
        return $result;
    }
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":166:{a:5:{s:4:"code";s:72:"function ($line) {
    $temp = explode(' ', $line);
    return $temp;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}
socket_create()成功49377

socket_connect()成功
here5
here6test test test test try try try 
here7 array
here8  Array
首次read_int()成功1
首次read_utf()成功5.6
here3C:32:"SuperClosure\SerializableClosure":6246:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":1938:{a:5:{s:4:"code";s:1484:"function ($iterator) use($numPartitions, $partitionFunc, $limit, $outputSerializer) {
    $buckets = array();
    $c = 0;
    $batch = min(10 * $numPartitions, 1000);
    foreach ($iterator as $element) {
        file_put_contents('/home/gt/php_worker9.txt', 'here1' . $element . '
', FILE_APPEND);
    }
    foreach ($iterator as $key => $value) {
        $buckets[$partitionFunc($key) % $numPartitions] = array();
        $buckets[$partitionFunc($key) % $numPartitions][$key] = $value;
        $c++;
        if ($c % 1000 == 0 && memory_get_usage() / 1024 / 1024 > $limit || $c > $batch) {
            $n = sizeof($buckets);
            $size = 0;
            $result = array();
            foreach ($buckets as $key2 => $value2) {
                #value是一个array
                array_push($result, serialize($key2));
                $d = serialize($value2);
                unset($value2);
                array_push($result, $d);
                $size += strlen($d);
            }
            $avg = intval($size / $n) >> 20;
            # let 1M < avg < 10M
            if ($avg < 1) {
                $batch *= 1.5;
            } elseif ($avg > 10) {
                $batch = max(intval($batch / 1.5), 1);
            }
            $c = 0;
            return $result;
        }
    }
    $result = array();
    foreach ($buckets as $key => $value) {
        array_push($result, serialize($key));
        array_push($result, serialize($value));
    }
    return $result;
};";s:7:"context";a:3:{s:13:"numPartitions";i:2;s:13:"partitionFunc";C:32:"SuperClosure\SerializableClosure":240:{a:5:{s:4:"code";s:137:"function ($x) {
    if ($x == null) {
        return 0;
    }
    $h = null;
    if (is_array($x)) {
    }
    return hash('md5', $x);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:5:"limit";i:256;}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":3944:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":1767:{a:5:{s:4:"code";s:67:"function ($split, $iterator) use($f) {
    return $f($iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":1543:{a:5:{s:4:"code";s:480:"function ($iterator) use($memory, $serializer, $createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc) {
    file_put_contents('/home/gt/php_worker7.txt', 'here1
', FILE_APPEND);
    $agg = new \aggregator($createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc);
    $merger = new \ExternalMerger($agg, $memory * 0.9, $serializer);
    $merger->mergeValues($iterator);
    file_put_contents('/home/gt/php_worker7.txt', 'here2
', FILE_APPEND);
    return $merger->items();
};";s:7:"context";a:5:{s:6:"memory";i:512;s:10:"serializer";O:23:"auto_batched_serializer":10:{s:9:"best_size";i:65536;s:20:"UNLIMITED_BATCH_SIZE";i:-1;s:18:"UNKNOWN_BATCH_SIZE";i:0;s:10:"serializer";N;s:10:"batch_size";i:0;s:19:"END_OF_DATA_SECTION";i:-1;s:20:"PHP_EXCEPTION_THROWN";i:-2;s:11:"TIMING_DATA";i:-3;s:13:"END_OF_STREAM";i:-4;s:4:"NULL";i:-5;}s:18:"createCombinerFunc";C:32:"SuperClosure\SerializableClosure":135:{a:5:{s:4:"code";s:33:"function ($x) {
    return $x;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"mergeValueFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}s:18:"mergeCombinersFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1813:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":369:{a:5:{s:4:"code";s:76:"function ($any, $iterator) use($f) {
    return array_map($f, $iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":137:{a:5:{s:4:"code";s:43:"function ($x) {
    return array($x, 1);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1081:{a:5:{s:4:"code";s:758:"function ($split, $iterator) use($f) {
    $sub_is_array = False;
    foreach ($iterator as $key => $value) {
        $temp = $f($value);
        if (is_array($temp)) {
            $sub_is_array = True;
            break;
        }
    }
    if ($sub_is_array) {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            if (is_array($temp)) {
                foreach ($temp as $e) {
                    array_push($result, $e);
                }
            }
        }
        return $result;
    } else {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            array_push($result, $temp);
        }
        return $result;
    }
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":166:{a:5:{s:4:"code";s:72:"function ($line) {
    $temp = explode(' ', $line);
    return $temp;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}
here5
here6do do do 
here7 array
here8  Array
socket_create()成功36359

socket_connect()成功
首次read_int()成功1
首次read_utf()成功5.6
here3C:32:"SuperClosure\SerializableClosure":1616:{a:5:{s:4:"code";s:67:"function ($split, $iterator) use($f) {
    return $f($iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":1392:{a:5:{s:4:"code";s:329:"function ($iterator) use($memory, $serializer, $createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc) {
    $agg = new \aggregator($createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc);
    $merger = new \ExternalMerger($agg, $memory, $serializer);
    $merger->mergeCombiners($iterator);
    return $merger->items();
};";s:7:"context";a:5:{s:6:"memory";i:512;s:10:"serializer";O:23:"auto_batched_serializer":10:{s:9:"best_size";i:65536;s:20:"UNLIMITED_BATCH_SIZE";i:-1;s:18:"UNKNOWN_BATCH_SIZE";i:0;s:10:"serializer";N;s:10:"batch_size";i:0;s:19:"END_OF_DATA_SECTION";i:-1;s:20:"PHP_EXCEPTION_THROWN";i:-2;s:11:"TIMING_DATA";i:-3;s:13:"END_OF_STREAM";i:-4;s:4:"NULL";i:-5;}s:18:"createCombinerFunc";C:32:"SuperClosure\SerializableClosure":135:{a:5:{s:4:"code";s:33:"function ($x) {
    return $x;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"mergeValueFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}s:18:"mergeCombinersFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}
here5
here7 array
here8  Array
socket_create()成功34093

socket_connect()成功
首次read_int()成功0
首次read_utf()成功5.6
here3C:32:"SuperClosure\SerializableClosure":1616:{a:5:{s:4:"code";s:67:"function ($split, $iterator) use($f) {
    return $f($iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":1392:{a:5:{s:4:"code";s:329:"function ($iterator) use($memory, $serializer, $createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc) {
    $agg = new \aggregator($createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc);
    $merger = new \ExternalMerger($agg, $memory, $serializer);
    $merger->mergeCombiners($iterator);
    return $merger->items();
};";s:7:"context";a:5:{s:6:"memory";i:512;s:10:"serializer";O:23:"auto_batched_serializer":10:{s:9:"best_size";i:65536;s:20:"UNLIMITED_BATCH_SIZE";i:-1;s:18:"UNKNOWN_BATCH_SIZE";i:0;s:10:"serializer";N;s:10:"batch_size";i:0;s:19:"END_OF_DATA_SECTION";i:-1;s:20:"PHP_EXCEPTION_THROWN";i:-2;s:11:"TIMING_DATA";i:-3;s:13:"END_OF_STREAM";i:-4;s:4:"NULL";i:-5;}s:18:"createCombinerFunc";C:32:"SuperClosure\SerializableClosure":135:{a:5:{s:4:"code";s:33:"function ($x) {
    return $x;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"mergeValueFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}s:18:"mergeCombinersFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}
here5
here7 array
here8  Array
socket_create()成功33947

socket_connect()成功
socket_create()成功34433

socket_connect()成功
首次read_int()成功1
首次read_utf()成功5.6
首次read_int()成功0
首次read_utf()成功5.6
here3C:32:"SuperClosure\SerializableClosure":6246:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":1938:{a:5:{s:4:"code";s:1484:"function ($iterator) use($numPartitions, $partitionFunc, $limit, $outputSerializer) {
    $buckets = array();
    $c = 0;
    $batch = min(10 * $numPartitions, 1000);
    foreach ($iterator as $element) {
        file_put_contents('/home/gt/php_worker9.txt', 'here1' . $element . '
', FILE_APPEND);
    }
    foreach ($iterator as $key => $value) {
        $buckets[$partitionFunc($key) % $numPartitions] = array();
        $buckets[$partitionFunc($key) % $numPartitions][$key] = $value;
        $c++;
        if ($c % 1000 == 0 && memory_get_usage() / 1024 / 1024 > $limit || $c > $batch) {
            $n = sizeof($buckets);
            $size = 0;
            $result = array();
            foreach ($buckets as $key2 => $value2) {
                #value是一个array
                array_push($result, serialize($key2));
                $d = serialize($value2);
                unset($value2);
                array_push($result, $d);
                $size += strlen($d);
            }
            $avg = intval($size / $n) >> 20;
            # let 1M < avg < 10M
            if ($avg < 1) {
                $batch *= 1.5;
            } elseif ($avg > 10) {
                $batch = max(intval($batch / 1.5), 1);
            }
            $c = 0;
            return $result;
        }
    }
    $result = array();
    foreach ($buckets as $key => $value) {
        array_push($result, serialize($key));
        array_push($result, serialize($value));
    }
    return $result;
};";s:7:"context";a:3:{s:13:"numPartitions";i:2;s:13:"partitionFunc";C:32:"SuperClosure\SerializableClosure":240:{a:5:{s:4:"code";s:137:"function ($x) {
    if ($x == null) {
        return 0;
    }
    $h = null;
    if (is_array($x)) {
    }
    return hash('md5', $x);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:5:"limit";i:256;}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":3944:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":1767:{a:5:{s:4:"code";s:67:"function ($split, $iterator) use($f) {
    return $f($iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":1543:{a:5:{s:4:"code";s:480:"function ($iterator) use($memory, $serializer, $createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc) {
    file_put_contents('/home/gt/php_worker7.txt', 'here1
', FILE_APPEND);
    $agg = new \aggregator($createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc);
    $merger = new \ExternalMerger($agg, $memory * 0.9, $serializer);
    $merger->mergeValues($iterator);
    file_put_contents('/home/gt/php_worker7.txt', 'here2
', FILE_APPEND);
    return $merger->items();
};";s:7:"context";a:5:{s:6:"memory";i:512;s:10:"serializer";O:23:"auto_batched_serializer":10:{s:9:"best_size";i:65536;s:20:"UNLIMITED_BATCH_SIZE";i:-1;s:18:"UNKNOWN_BATCH_SIZE";i:0;s:10:"serializer";N;s:10:"batch_size";i:0;s:19:"END_OF_DATA_SECTION";i:-1;s:20:"PHP_EXCEPTION_THROWN";i:-2;s:11:"TIMING_DATA";i:-3;s:13:"END_OF_STREAM";i:-4;s:4:"NULL";i:-5;}s:18:"createCombinerFunc";C:32:"SuperClosure\SerializableClosure":135:{a:5:{s:4:"code";s:33:"function ($x) {
    return $x;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"mergeValueFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}s:18:"mergeCombinersFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1813:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":369:{a:5:{s:4:"code";s:76:"function ($any, $iterator) use($f) {
    return array_map($f, $iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":137:{a:5:{s:4:"code";s:43:"function ($x) {
    return array($x, 1);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1081:{a:5:{s:4:"code";s:758:"function ($split, $iterator) use($f) {
    $sub_is_array = False;
    foreach ($iterator as $key => $value) {
        $temp = $f($value);
        if (is_array($temp)) {
            $sub_is_array = True;
            break;
        }
    }
    if ($sub_is_array) {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            if (is_array($temp)) {
                foreach ($temp as $e) {
                    array_push($result, $e);
                }
            }
        }
        return $result;
    } else {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            array_push($result, $temp);
        }
        return $result;
    }
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":166:{a:5:{s:4:"code";s:72:"function ($line) {
    $temp = explode(' ', $line);
    return $temp;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}
here3C:32:"SuperClosure\SerializableClosure":6246:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":1938:{a:5:{s:4:"code";s:1484:"function ($iterator) use($numPartitions, $partitionFunc, $limit, $outputSerializer) {
    $buckets = array();
    $c = 0;
    $batch = min(10 * $numPartitions, 1000);
    foreach ($iterator as $element) {
        file_put_contents('/home/gt/php_worker9.txt', 'here1' . $element . '
', FILE_APPEND);
    }
    foreach ($iterator as $key => $value) {
        $buckets[$partitionFunc($key) % $numPartitions] = array();
        $buckets[$partitionFunc($key) % $numPartitions][$key] = $value;
        $c++;
        if ($c % 1000 == 0 && memory_get_usage() / 1024 / 1024 > $limit || $c > $batch) {
            $n = sizeof($buckets);
            $size = 0;
            $result = array();
            foreach ($buckets as $key2 => $value2) {
                #value是一个array
                array_push($result, serialize($key2));
                $d = serialize($value2);
                unset($value2);
                array_push($result, $d);
                $size += strlen($d);
            }
            $avg = intval($size / $n) >> 20;
            # let 1M < avg < 10M
            if ($avg < 1) {
                $batch *= 1.5;
            } elseif ($avg > 10) {
                $batch = max(intval($batch / 1.5), 1);
            }
            $c = 0;
            return $result;
        }
    }
    $result = array();
    foreach ($buckets as $key => $value) {
        array_push($result, serialize($key));
        array_push($result, serialize($value));
    }
    return $result;
};";s:7:"context";a:3:{s:13:"numPartitions";i:2;s:13:"partitionFunc";C:32:"SuperClosure\SerializableClosure":240:{a:5:{s:4:"code";s:137:"function ($x) {
    if ($x == null) {
        return 0;
    }
    $h = null;
    if (is_array($x)) {
    }
    return hash('md5', $x);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:5:"limit";i:256;}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":3944:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":1767:{a:5:{s:4:"code";s:67:"function ($split, $iterator) use($f) {
    return $f($iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":1543:{a:5:{s:4:"code";s:480:"function ($iterator) use($memory, $serializer, $createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc) {
    file_put_contents('/home/gt/php_worker7.txt', 'here1
', FILE_APPEND);
    $agg = new \aggregator($createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc);
    $merger = new \ExternalMerger($agg, $memory * 0.9, $serializer);
    $merger->mergeValues($iterator);
    file_put_contents('/home/gt/php_worker7.txt', 'here2
', FILE_APPEND);
    return $merger->items();
};";s:7:"context";a:5:{s:6:"memory";i:512;s:10:"serializer";O:23:"auto_batched_serializer":10:{s:9:"best_size";i:65536;s:20:"UNLIMITED_BATCH_SIZE";i:-1;s:18:"UNKNOWN_BATCH_SIZE";i:0;s:10:"serializer";N;s:10:"batch_size";i:0;s:19:"END_OF_DATA_SECTION";i:-1;s:20:"PHP_EXCEPTION_THROWN";i:-2;s:11:"TIMING_DATA";i:-3;s:13:"END_OF_STREAM";i:-4;s:4:"NULL";i:-5;}s:18:"createCombinerFunc";C:32:"SuperClosure\SerializableClosure":135:{a:5:{s:4:"code";s:33:"function ($x) {
    return $x;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"mergeValueFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}s:18:"mergeCombinersFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1813:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":369:{a:5:{s:4:"code";s:76:"function ($any, $iterator) use($f) {
    return array_map($f, $iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":137:{a:5:{s:4:"code";s:43:"function ($x) {
    return array($x, 1);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1081:{a:5:{s:4:"code";s:758:"function ($split, $iterator) use($f) {
    $sub_is_array = False;
    foreach ($iterator as $key => $value) {
        $temp = $f($value);
        if (is_array($temp)) {
            $sub_is_array = True;
            break;
        }
    }
    if ($sub_is_array) {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            if (is_array($temp)) {
                foreach ($temp as $e) {
                    array_push($result, $e);
                }
            }
        }
        return $result;
    } else {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            array_push($result, $temp);
        }
        return $result;
    }
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":166:{a:5:{s:4:"code";s:72:"function ($line) {
    $temp = explode(' ', $line);
    return $temp;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}
here5
here6do do do 
here5
here6test test test test try try try 
here7 array
here8  Array
here7 array
here8  Array
socket_create()成功46994

socket_connect()成功
首次read_int()成功1
首次read_utf()成功5.6
here3C:32:"SuperClosure\SerializableClosure":1616:{a:5:{s:4:"code";s:67:"function ($split, $iterator) use($f) {
    return $f($iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":1392:{a:5:{s:4:"code";s:329:"function ($iterator) use($memory, $serializer, $createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc) {
    $agg = new \aggregator($createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc);
    $merger = new \ExternalMerger($agg, $memory, $serializer);
    $merger->mergeCombiners($iterator);
    return $merger->items();
};";s:7:"context";a:5:{s:6:"memory";i:512;s:10:"serializer";O:23:"auto_batched_serializer":10:{s:9:"best_size";i:65536;s:20:"UNLIMITED_BATCH_SIZE";i:-1;s:18:"UNKNOWN_BATCH_SIZE";i:0;s:10:"serializer";N;s:10:"batch_size";i:0;s:19:"END_OF_DATA_SECTION";i:-1;s:20:"PHP_EXCEPTION_THROWN";i:-2;s:11:"TIMING_DATA";i:-3;s:13:"END_OF_STREAM";i:-4;s:4:"NULL";i:-5;}s:18:"createCombinerFunc";C:32:"SuperClosure\SerializableClosure":135:{a:5:{s:4:"code";s:33:"function ($x) {
    return $x;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"mergeValueFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}s:18:"mergeCombinersFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}
here5
here7 array
here8  Array
socket_create()成功34292

socket_connect()成功
首次read_int()成功0
首次read_utf()成功5.6
here3C:32:"SuperClosure\SerializableClosure":1616:{a:5:{s:4:"code";s:67:"function ($split, $iterator) use($f) {
    return $f($iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":1392:{a:5:{s:4:"code";s:329:"function ($iterator) use($memory, $serializer, $createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc) {
    $agg = new \aggregator($createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc);
    $merger = new \ExternalMerger($agg, $memory, $serializer);
    $merger->mergeCombiners($iterator);
    return $merger->items();
};";s:7:"context";a:5:{s:6:"memory";i:512;s:10:"serializer";O:23:"auto_batched_serializer":10:{s:9:"best_size";i:65536;s:20:"UNLIMITED_BATCH_SIZE";i:-1;s:18:"UNKNOWN_BATCH_SIZE";i:0;s:10:"serializer";N;s:10:"batch_size";i:0;s:19:"END_OF_DATA_SECTION";i:-1;s:20:"PHP_EXCEPTION_THROWN";i:-2;s:11:"TIMING_DATA";i:-3;s:13:"END_OF_STREAM";i:-4;s:4:"NULL";i:-5;}s:18:"createCombinerFunc";C:32:"SuperClosure\SerializableClosure":135:{a:5:{s:4:"code";s:33:"function ($x) {
    return $x;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"mergeValueFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}s:18:"mergeCombinersFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}
here5
here7 array
here8  Array
socket_create()成功60110

socket_connect()成功
首次read_int()成功1
首次read_utf()成功5.6
here3C:32:"SuperClosure\SerializableClosure":6246:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":1938:{a:5:{s:4:"code";s:1484:"function ($iterator) use($numPartitions, $partitionFunc, $limit, $outputSerializer) {
    $buckets = array();
    $c = 0;
    $batch = min(10 * $numPartitions, 1000);
    foreach ($iterator as $element) {
        file_put_contents('/home/gt/php_worker9.txt', 'here1' . $element . '
', FILE_APPEND);
    }
    foreach ($iterator as $key => $value) {
        $buckets[$partitionFunc($key) % $numPartitions] = array();
        $buckets[$partitionFunc($key) % $numPartitions][$key] = $value;
        $c++;
        if ($c % 1000 == 0 && memory_get_usage() / 1024 / 1024 > $limit || $c > $batch) {
            $n = sizeof($buckets);
            $size = 0;
            $result = array();
            foreach ($buckets as $key2 => $value2) {
                #value是一个array
                array_push($result, serialize($key2));
                $d = serialize($value2);
                unset($value2);
                array_push($result, $d);
                $size += strlen($d);
            }
            $avg = intval($size / $n) >> 20;
            # let 1M < avg < 10M
            if ($avg < 1) {
                $batch *= 1.5;
            } elseif ($avg > 10) {
                $batch = max(intval($batch / 1.5), 1);
            }
            $c = 0;
            return $result;
        }
    }
    $result = array();
    foreach ($buckets as $key => $value) {
        array_push($result, serialize($key));
        array_push($result, serialize($value));
    }
    return $result;
};";s:7:"context";a:3:{s:13:"numPartitions";i:2;s:13:"partitionFunc";C:32:"SuperClosure\SerializableClosure":240:{a:5:{s:4:"code";s:137:"function ($x) {
    if ($x == null) {
        return 0;
    }
    $h = null;
    if (is_array($x)) {
    }
    return hash('md5', $x);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:5:"limit";i:256;}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":3944:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":1767:{a:5:{s:4:"code";s:67:"function ($split, $iterator) use($f) {
    return $f($iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":1543:{a:5:{s:4:"code";s:480:"function ($iterator) use($memory, $serializer, $createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc) {
    file_put_contents('/home/gt/php_worker7.txt', 'here1
', FILE_APPEND);
    $agg = new \aggregator($createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc);
    $merger = new \ExternalMerger($agg, $memory * 0.9, $serializer);
    $merger->mergeValues($iterator);
    file_put_contents('/home/gt/php_worker7.txt', 'here2
', FILE_APPEND);
    return $merger->items();
};";s:7:"context";a:5:{s:6:"memory";i:512;s:10:"serializer";O:23:"auto_batched_serializer":10:{s:9:"best_size";i:65536;s:20:"UNLIMITED_BATCH_SIZE";i:-1;s:18:"UNKNOWN_BATCH_SIZE";i:0;s:10:"serializer";N;s:10:"batch_size";i:0;s:19:"END_OF_DATA_SECTION";i:-1;s:20:"PHP_EXCEPTION_THROWN";i:-2;s:11:"TIMING_DATA";i:-3;s:13:"END_OF_STREAM";i:-4;s:4:"NULL";i:-5;}s:18:"createCombinerFunc";C:32:"SuperClosure\SerializableClosure":135:{a:5:{s:4:"code";s:33:"function ($x) {
    return $x;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"mergeValueFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}s:18:"mergeCombinersFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1813:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":369:{a:5:{s:4:"code";s:76:"function ($any, $iterator) use($f) {
    return array_map($f, $iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":137:{a:5:{s:4:"code";s:43:"function ($x) {
    return array($x, 1);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1081:{a:5:{s:4:"code";s:758:"function ($split, $iterator) use($f) {
    $sub_is_array = False;
    foreach ($iterator as $key => $value) {
        $temp = $f($value);
        if (is_array($temp)) {
            $sub_is_array = True;
            break;
        }
    }
    if ($sub_is_array) {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            if (is_array($temp)) {
                foreach ($temp as $e) {
                    array_push($result, $e);
                }
            }
        }
        return $result;
    } else {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            array_push($result, $temp);
        }
        return $result;
    }
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":166:{a:5:{s:4:"code";s:72:"function ($line) {
    $temp = explode(' ', $line);
    return $temp;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}
here5
here6do do do 
here7 array
here8  Array
socket_create()成功47584

socket_connect()成功
首次read_int()成功0
首次read_utf()成功5.6
here3C:32:"SuperClosure\SerializableClosure":6246:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":1938:{a:5:{s:4:"code";s:1484:"function ($iterator) use($numPartitions, $partitionFunc, $limit, $outputSerializer) {
    $buckets = array();
    $c = 0;
    $batch = min(10 * $numPartitions, 1000);
    foreach ($iterator as $element) {
        file_put_contents('/home/gt/php_worker9.txt', 'here1' . $element . '
', FILE_APPEND);
    }
    foreach ($iterator as $key => $value) {
        $buckets[$partitionFunc($key) % $numPartitions] = array();
        $buckets[$partitionFunc($key) % $numPartitions][$key] = $value;
        $c++;
        if ($c % 1000 == 0 && memory_get_usage() / 1024 / 1024 > $limit || $c > $batch) {
            $n = sizeof($buckets);
            $size = 0;
            $result = array();
            foreach ($buckets as $key2 => $value2) {
                #value是一个array
                array_push($result, serialize($key2));
                $d = serialize($value2);
                unset($value2);
                array_push($result, $d);
                $size += strlen($d);
            }
            $avg = intval($size / $n) >> 20;
            # let 1M < avg < 10M
            if ($avg < 1) {
                $batch *= 1.5;
            } elseif ($avg > 10) {
                $batch = max(intval($batch / 1.5), 1);
            }
            $c = 0;
            return $result;
        }
    }
    $result = array();
    foreach ($buckets as $key => $value) {
        array_push($result, serialize($key));
        array_push($result, serialize($value));
    }
    return $result;
};";s:7:"context";a:3:{s:13:"numPartitions";i:2;s:13:"partitionFunc";C:32:"SuperClosure\SerializableClosure":240:{a:5:{s:4:"code";s:137:"function ($x) {
    if ($x == null) {
        return 0;
    }
    $h = null;
    if (is_array($x)) {
    }
    return hash('md5', $x);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:5:"limit";i:256;}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":3944:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":1767:{a:5:{s:4:"code";s:67:"function ($split, $iterator) use($f) {
    return $f($iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":1543:{a:5:{s:4:"code";s:480:"function ($iterator) use($memory, $serializer, $createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc) {
    file_put_contents('/home/gt/php_worker7.txt', 'here1
', FILE_APPEND);
    $agg = new \aggregator($createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc);
    $merger = new \ExternalMerger($agg, $memory * 0.9, $serializer);
    $merger->mergeValues($iterator);
    file_put_contents('/home/gt/php_worker7.txt', 'here2
', FILE_APPEND);
    return $merger->items();
};";s:7:"context";a:5:{s:6:"memory";i:512;s:10:"serializer";O:23:"auto_batched_serializer":10:{s:9:"best_size";i:65536;s:20:"UNLIMITED_BATCH_SIZE";i:-1;s:18:"UNKNOWN_BATCH_SIZE";i:0;s:10:"serializer";N;s:10:"batch_size";i:0;s:19:"END_OF_DATA_SECTION";i:-1;s:20:"PHP_EXCEPTION_THROWN";i:-2;s:11:"TIMING_DATA";i:-3;s:13:"END_OF_STREAM";i:-4;s:4:"NULL";i:-5;}s:18:"createCombinerFunc";C:32:"SuperClosure\SerializableClosure":135:{a:5:{s:4:"code";s:33:"function ($x) {
    return $x;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"mergeValueFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}s:18:"mergeCombinersFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1813:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":369:{a:5:{s:4:"code";s:76:"function ($any, $iterator) use($f) {
    return array_map($f, $iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":137:{a:5:{s:4:"code";s:43:"function ($x) {
    return array($x, 1);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1081:{a:5:{s:4:"code";s:758:"function ($split, $iterator) use($f) {
    $sub_is_array = False;
    foreach ($iterator as $key => $value) {
        $temp = $f($value);
        if (is_array($temp)) {
            $sub_is_array = True;
            break;
        }
    }
    if ($sub_is_array) {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            if (is_array($temp)) {
                foreach ($temp as $e) {
                    array_push($result, $e);
                }
            }
        }
        return $result;
    } else {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            array_push($result, $temp);
        }
        return $result;
    }
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":166:{a:5:{s:4:"code";s:72:"function ($line) {
    $temp = explode(' ', $line);
    return $temp;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}
here5
here6test test test test try try try 
here7 array
here8  Array
socket_create()成功51490

socket_connect()成功
首次read_int()成功1
首次read_utf()成功5.6
here3C:32:"SuperClosure\SerializableClosure":1616:{a:5:{s:4:"code";s:67:"function ($split, $iterator) use($f) {
    return $f($iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":1392:{a:5:{s:4:"code";s:329:"function ($iterator) use($memory, $serializer, $createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc) {
    $agg = new \aggregator($createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc);
    $merger = new \ExternalMerger($agg, $memory, $serializer);
    $merger->mergeCombiners($iterator);
    return $merger->items();
};";s:7:"context";a:5:{s:6:"memory";i:512;s:10:"serializer";O:23:"auto_batched_serializer":10:{s:9:"best_size";i:65536;s:20:"UNLIMITED_BATCH_SIZE";i:-1;s:18:"UNKNOWN_BATCH_SIZE";i:0;s:10:"serializer";N;s:10:"batch_size";i:0;s:19:"END_OF_DATA_SECTION";i:-1;s:20:"PHP_EXCEPTION_THROWN";i:-2;s:11:"TIMING_DATA";i:-3;s:13:"END_OF_STREAM";i:-4;s:4:"NULL";i:-5;}s:18:"createCombinerFunc";C:32:"SuperClosure\SerializableClosure":135:{a:5:{s:4:"code";s:33:"function ($x) {
    return $x;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"mergeValueFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}s:18:"mergeCombinersFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}
here5
here7 array
here8  Array
socket_create()成功55668

socket_connect()成功
首次read_int()成功0
首次read_utf()成功5.6
here3C:32:"SuperClosure\SerializableClosure":1616:{a:5:{s:4:"code";s:67:"function ($split, $iterator) use($f) {
    return $f($iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":1392:{a:5:{s:4:"code";s:329:"function ($iterator) use($memory, $serializer, $createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc) {
    $agg = new \aggregator($createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc);
    $merger = new \ExternalMerger($agg, $memory, $serializer);
    $merger->mergeCombiners($iterator);
    return $merger->items();
};";s:7:"context";a:5:{s:6:"memory";i:512;s:10:"serializer";O:23:"auto_batched_serializer":10:{s:9:"best_size";i:65536;s:20:"UNLIMITED_BATCH_SIZE";i:-1;s:18:"UNKNOWN_BATCH_SIZE";i:0;s:10:"serializer";N;s:10:"batch_size";i:0;s:19:"END_OF_DATA_SECTION";i:-1;s:20:"PHP_EXCEPTION_THROWN";i:-2;s:11:"TIMING_DATA";i:-3;s:13:"END_OF_STREAM";i:-4;s:4:"NULL";i:-5;}s:18:"createCombinerFunc";C:32:"SuperClosure\SerializableClosure":135:{a:5:{s:4:"code";s:33:"function ($x) {
    return $x;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"mergeValueFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}s:18:"mergeCombinersFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}
here5
here7 array
here8  Array
socket_create()成功48934

socket_connect()成功
首次read_int()成功1
首次read_utf()成功5.6
here3C:32:"SuperClosure\SerializableClosure":6246:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":1938:{a:5:{s:4:"code";s:1484:"function ($iterator) use($numPartitions, $partitionFunc, $limit, $outputSerializer) {
    $buckets = array();
    $c = 0;
    $batch = min(10 * $numPartitions, 1000);
    foreach ($iterator as $element) {
        file_put_contents('/home/gt/php_worker9.txt', 'here1' . $element . '
', FILE_APPEND);
    }
    foreach ($iterator as $key => $value) {
        $buckets[$partitionFunc($key) % $numPartitions] = array();
        $buckets[$partitionFunc($key) % $numPartitions][$key] = $value;
        $c++;
        if ($c % 1000 == 0 && memory_get_usage() / 1024 / 1024 > $limit || $c > $batch) {
            $n = sizeof($buckets);
            $size = 0;
            $result = array();
            foreach ($buckets as $key2 => $value2) {
                #value是一个array
                array_push($result, serialize($key2));
                $d = serialize($value2);
                unset($value2);
                array_push($result, $d);
                $size += strlen($d);
            }
            $avg = intval($size / $n) >> 20;
            # let 1M < avg < 10M
            if ($avg < 1) {
                $batch *= 1.5;
            } elseif ($avg > 10) {
                $batch = max(intval($batch / 1.5), 1);
            }
            $c = 0;
            return $result;
        }
    }
    $result = array();
    foreach ($buckets as $key => $value) {
        array_push($result, serialize($key));
        array_push($result, serialize($value));
    }
    return $result;
};";s:7:"context";a:3:{s:13:"numPartitions";i:2;s:13:"partitionFunc";C:32:"SuperClosure\SerializableClosure":240:{a:5:{s:4:"code";s:137:"function ($x) {
    if ($x == null) {
        return 0;
    }
    $h = null;
    if (is_array($x)) {
    }
    return hash('md5', $x);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:5:"limit";i:256;}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":3944:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":1767:{a:5:{s:4:"code";s:67:"function ($split, $iterator) use($f) {
    return $f($iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":1543:{a:5:{s:4:"code";s:480:"function ($iterator) use($memory, $serializer, $createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc) {
    file_put_contents('/home/gt/php_worker7.txt', 'here1
', FILE_APPEND);
    $agg = new \aggregator($createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc);
    $merger = new \ExternalMerger($agg, $memory * 0.9, $serializer);
    $merger->mergeValues($iterator);
    file_put_contents('/home/gt/php_worker7.txt', 'here2
', FILE_APPEND);
    return $merger->items();
};";s:7:"context";a:5:{s:6:"memory";i:512;s:10:"serializer";O:23:"auto_batched_serializer":10:{s:9:"best_size";i:65536;s:20:"UNLIMITED_BATCH_SIZE";i:-1;s:18:"UNKNOWN_BATCH_SIZE";i:0;s:10:"serializer";N;s:10:"batch_size";i:0;s:19:"END_OF_DATA_SECTION";i:-1;s:20:"PHP_EXCEPTION_THROWN";i:-2;s:11:"TIMING_DATA";i:-3;s:13:"END_OF_STREAM";i:-4;s:4:"NULL";i:-5;}s:18:"createCombinerFunc";C:32:"SuperClosure\SerializableClosure":135:{a:5:{s:4:"code";s:33:"function ($x) {
    return $x;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"mergeValueFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}s:18:"mergeCombinersFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1813:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":369:{a:5:{s:4:"code";s:76:"function ($any, $iterator) use($f) {
    return array_map($f, $iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":137:{a:5:{s:4:"code";s:43:"function ($x) {
    return array($x, 1);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1081:{a:5:{s:4:"code";s:758:"function ($split, $iterator) use($f) {
    $sub_is_array = False;
    foreach ($iterator as $key => $value) {
        $temp = $f($value);
        if (is_array($temp)) {
            $sub_is_array = True;
            break;
        }
    }
    if ($sub_is_array) {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            if (is_array($temp)) {
                foreach ($temp as $e) {
                    array_push($result, $e);
                }
            }
        }
        return $result;
    } else {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            array_push($result, $temp);
        }
        return $result;
    }
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":166:{a:5:{s:4:"code";s:72:"function ($line) {
    $temp = explode(' ', $line);
    return $temp;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}
here5
here6do do do 
socket_create()成功55088

socket_connect()成功
here7 array
here8  Array
首次read_int()成功0
首次read_utf()成功5.6
here3C:32:"SuperClosure\SerializableClosure":6246:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":1938:{a:5:{s:4:"code";s:1484:"function ($iterator) use($numPartitions, $partitionFunc, $limit, $outputSerializer) {
    $buckets = array();
    $c = 0;
    $batch = min(10 * $numPartitions, 1000);
    foreach ($iterator as $element) {
        file_put_contents('/home/gt/php_worker9.txt', 'here1' . $element . '
', FILE_APPEND);
    }
    foreach ($iterator as $key => $value) {
        $buckets[$partitionFunc($key) % $numPartitions] = array();
        $buckets[$partitionFunc($key) % $numPartitions][$key] = $value;
        $c++;
        if ($c % 1000 == 0 && memory_get_usage() / 1024 / 1024 > $limit || $c > $batch) {
            $n = sizeof($buckets);
            $size = 0;
            $result = array();
            foreach ($buckets as $key2 => $value2) {
                #value是一个array
                array_push($result, serialize($key2));
                $d = serialize($value2);
                unset($value2);
                array_push($result, $d);
                $size += strlen($d);
            }
            $avg = intval($size / $n) >> 20;
            # let 1M < avg < 10M
            if ($avg < 1) {
                $batch *= 1.5;
            } elseif ($avg > 10) {
                $batch = max(intval($batch / 1.5), 1);
            }
            $c = 0;
            return $result;
        }
    }
    $result = array();
    foreach ($buckets as $key => $value) {
        array_push($result, serialize($key));
        array_push($result, serialize($value));
    }
    return $result;
};";s:7:"context";a:3:{s:13:"numPartitions";i:2;s:13:"partitionFunc";C:32:"SuperClosure\SerializableClosure":240:{a:5:{s:4:"code";s:137:"function ($x) {
    if ($x == null) {
        return 0;
    }
    $h = null;
    if (is_array($x)) {
    }
    return hash('md5', $x);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:5:"limit";i:256;}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":3944:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":1767:{a:5:{s:4:"code";s:67:"function ($split, $iterator) use($f) {
    return $f($iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":1543:{a:5:{s:4:"code";s:480:"function ($iterator) use($memory, $serializer, $createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc) {
    file_put_contents('/home/gt/php_worker7.txt', 'here1
', FILE_APPEND);
    $agg = new \aggregator($createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc);
    $merger = new \ExternalMerger($agg, $memory * 0.9, $serializer);
    $merger->mergeValues($iterator);
    file_put_contents('/home/gt/php_worker7.txt', 'here2
', FILE_APPEND);
    return $merger->items();
};";s:7:"context";a:5:{s:6:"memory";i:512;s:10:"serializer";O:23:"auto_batched_serializer":10:{s:9:"best_size";i:65536;s:20:"UNLIMITED_BATCH_SIZE";i:-1;s:18:"UNKNOWN_BATCH_SIZE";i:0;s:10:"serializer";N;s:10:"batch_size";i:0;s:19:"END_OF_DATA_SECTION";i:-1;s:20:"PHP_EXCEPTION_THROWN";i:-2;s:11:"TIMING_DATA";i:-3;s:13:"END_OF_STREAM";i:-4;s:4:"NULL";i:-5;}s:18:"createCombinerFunc";C:32:"SuperClosure\SerializableClosure":135:{a:5:{s:4:"code";s:33:"function ($x) {
    return $x;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"mergeValueFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}s:18:"mergeCombinersFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1813:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":369:{a:5:{s:4:"code";s:76:"function ($any, $iterator) use($f) {
    return array_map($f, $iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":137:{a:5:{s:4:"code";s:43:"function ($x) {
    return array($x, 1);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1081:{a:5:{s:4:"code";s:758:"function ($split, $iterator) use($f) {
    $sub_is_array = False;
    foreach ($iterator as $key => $value) {
        $temp = $f($value);
        if (is_array($temp)) {
            $sub_is_array = True;
            break;
        }
    }
    if ($sub_is_array) {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            if (is_array($temp)) {
                foreach ($temp as $e) {
                    array_push($result, $e);
                }
            }
        }
        return $result;
    } else {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            array_push($result, $temp);
        }
        return $result;
    }
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":166:{a:5:{s:4:"code";s:72:"function ($line) {
    $temp = explode(' ', $line);
    return $temp;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}
here5
here6test test test test try try try 
here7 array
here8  Array
socket_create()成功36070

socket_connect()成功
首次read_int()成功0
首次read_utf()成功5.6
here3C:32:"SuperClosure\SerializableClosure":1616:{a:5:{s:4:"code";s:67:"function ($split, $iterator) use($f) {
    return $f($iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":1392:{a:5:{s:4:"code";s:329:"function ($iterator) use($memory, $serializer, $createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc) {
    $agg = new \aggregator($createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc);
    $merger = new \ExternalMerger($agg, $memory, $serializer);
    $merger->mergeCombiners($iterator);
    return $merger->items();
};";s:7:"context";a:5:{s:6:"memory";i:512;s:10:"serializer";O:23:"auto_batched_serializer":10:{s:9:"best_size";i:65536;s:20:"UNLIMITED_BATCH_SIZE";i:-1;s:18:"UNKNOWN_BATCH_SIZE";i:0;s:10:"serializer";N;s:10:"batch_size";i:0;s:19:"END_OF_DATA_SECTION";i:-1;s:20:"PHP_EXCEPTION_THROWN";i:-2;s:11:"TIMING_DATA";i:-3;s:13:"END_OF_STREAM";i:-4;s:4:"NULL";i:-5;}s:18:"createCombinerFunc";C:32:"SuperClosure\SerializableClosure":135:{a:5:{s:4:"code";s:33:"function ($x) {
    return $x;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"mergeValueFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}s:18:"mergeCombinersFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}
here5
here7 array
here8  Array
socket_create()成功48522

socket_connect()成功
首次read_int()成功1
首次read_utf()成功5.6
here3C:32:"SuperClosure\SerializableClosure":1616:{a:5:{s:4:"code";s:67:"function ($split, $iterator) use($f) {
    return $f($iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":1392:{a:5:{s:4:"code";s:329:"function ($iterator) use($memory, $serializer, $createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc) {
    $agg = new \aggregator($createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc);
    $merger = new \ExternalMerger($agg, $memory, $serializer);
    $merger->mergeCombiners($iterator);
    return $merger->items();
};";s:7:"context";a:5:{s:6:"memory";i:512;s:10:"serializer";O:23:"auto_batched_serializer":10:{s:9:"best_size";i:65536;s:20:"UNLIMITED_BATCH_SIZE";i:-1;s:18:"UNKNOWN_BATCH_SIZE";i:0;s:10:"serializer";N;s:10:"batch_size";i:0;s:19:"END_OF_DATA_SECTION";i:-1;s:20:"PHP_EXCEPTION_THROWN";i:-2;s:11:"TIMING_DATA";i:-3;s:13:"END_OF_STREAM";i:-4;s:4:"NULL";i:-5;}s:18:"createCombinerFunc";C:32:"SuperClosure\SerializableClosure":135:{a:5:{s:4:"code";s:33:"function ($x) {
    return $x;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"mergeValueFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}s:18:"mergeCombinersFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}
here5
here7 array
here8  Array
socket_create()成功37820

socket_connect()成功
首次read_int()成功0
首次read_utf()成功5.6
socket_create()成功37876

socket_connect()成功
here3C:32:"SuperClosure\SerializableClosure":6246:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":1938:{a:5:{s:4:"code";s:1484:"function ($iterator) use($numPartitions, $partitionFunc, $limit, $outputSerializer) {
    $buckets = array();
    $c = 0;
    $batch = min(10 * $numPartitions, 1000);
    foreach ($iterator as $element) {
        file_put_contents('/home/gt/php_worker9.txt', 'here1' . $element . '
', FILE_APPEND);
    }
    foreach ($iterator as $key => $value) {
        $buckets[$partitionFunc($key) % $numPartitions] = array();
        $buckets[$partitionFunc($key) % $numPartitions][$key] = $value;
        $c++;
        if ($c % 1000 == 0 && memory_get_usage() / 1024 / 1024 > $limit || $c > $batch) {
            $n = sizeof($buckets);
            $size = 0;
            $result = array();
            foreach ($buckets as $key2 => $value2) {
                #value是一个array
                array_push($result, serialize($key2));
                $d = serialize($value2);
                unset($value2);
                array_push($result, $d);
                $size += strlen($d);
            }
            $avg = intval($size / $n) >> 20;
            # let 1M < avg < 10M
            if ($avg < 1) {
                $batch *= 1.5;
            } elseif ($avg > 10) {
                $batch = max(intval($batch / 1.5), 1);
            }
            $c = 0;
            return $result;
        }
    }
    $result = array();
    foreach ($buckets as $key => $value) {
        array_push($result, serialize($key));
        array_push($result, serialize($value));
    }
    return $result;
};";s:7:"context";a:3:{s:13:"numPartitions";i:2;s:13:"partitionFunc";C:32:"SuperClosure\SerializableClosure":240:{a:5:{s:4:"code";s:137:"function ($x) {
    if ($x == null) {
        return 0;
    }
    $h = null;
    if (is_array($x)) {
    }
    return hash('md5', $x);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:5:"limit";i:256;}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":3944:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":1767:{a:5:{s:4:"code";s:67:"function ($split, $iterator) use($f) {
    return $f($iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":1543:{a:5:{s:4:"code";s:480:"function ($iterator) use($memory, $serializer, $createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc) {
    file_put_contents('/home/gt/php_worker7.txt', 'here1
', FILE_APPEND);
    $agg = new \aggregator($createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc);
    $merger = new \ExternalMerger($agg, $memory * 0.9, $serializer);
    $merger->mergeValues($iterator);
    file_put_contents('/home/gt/php_worker7.txt', 'here2
', FILE_APPEND);
    return $merger->items();
};";s:7:"context";a:5:{s:6:"memory";i:512;s:10:"serializer";O:23:"auto_batched_serializer":10:{s:9:"best_size";i:65536;s:20:"UNLIMITED_BATCH_SIZE";i:-1;s:18:"UNKNOWN_BATCH_SIZE";i:0;s:10:"serializer";N;s:10:"batch_size";i:0;s:19:"END_OF_DATA_SECTION";i:-1;s:20:"PHP_EXCEPTION_THROWN";i:-2;s:11:"TIMING_DATA";i:-3;s:13:"END_OF_STREAM";i:-4;s:4:"NULL";i:-5;}s:18:"createCombinerFunc";C:32:"SuperClosure\SerializableClosure":135:{a:5:{s:4:"code";s:33:"function ($x) {
    return $x;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"mergeValueFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}s:18:"mergeCombinersFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1813:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":369:{a:5:{s:4:"code";s:76:"function ($any, $iterator) use($f) {
    return array_map($f, $iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":137:{a:5:{s:4:"code";s:43:"function ($x) {
    return array($x, 1);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1081:{a:5:{s:4:"code";s:758:"function ($split, $iterator) use($f) {
    $sub_is_array = False;
    foreach ($iterator as $key => $value) {
        $temp = $f($value);
        if (is_array($temp)) {
            $sub_is_array = True;
            break;
        }
    }
    if ($sub_is_array) {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            if (is_array($temp)) {
                foreach ($temp as $e) {
                    array_push($result, $e);
                }
            }
        }
        return $result;
    } else {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            array_push($result, $temp);
        }
        return $result;
    }
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":166:{a:5:{s:4:"code";s:72:"function ($line) {
    $temp = explode(' ', $line);
    return $temp;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}
首次read_int()成功1
首次read_utf()成功5.6
here5
here6test test test test try try try 
here7 array
here8  Array
here3C:32:"SuperClosure\SerializableClosure":6246:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":1938:{a:5:{s:4:"code";s:1484:"function ($iterator) use($numPartitions, $partitionFunc, $limit, $outputSerializer) {
    $buckets = array();
    $c = 0;
    $batch = min(10 * $numPartitions, 1000);
    foreach ($iterator as $element) {
        file_put_contents('/home/gt/php_worker9.txt', 'here1' . $element . '
', FILE_APPEND);
    }
    foreach ($iterator as $key => $value) {
        $buckets[$partitionFunc($key) % $numPartitions] = array();
        $buckets[$partitionFunc($key) % $numPartitions][$key] = $value;
        $c++;
        if ($c % 1000 == 0 && memory_get_usage() / 1024 / 1024 > $limit || $c > $batch) {
            $n = sizeof($buckets);
            $size = 0;
            $result = array();
            foreach ($buckets as $key2 => $value2) {
                #value是一个array
                array_push($result, serialize($key2));
                $d = serialize($value2);
                unset($value2);
                array_push($result, $d);
                $size += strlen($d);
            }
            $avg = intval($size / $n) >> 20;
            # let 1M < avg < 10M
            if ($avg < 1) {
                $batch *= 1.5;
            } elseif ($avg > 10) {
                $batch = max(intval($batch / 1.5), 1);
            }
            $c = 0;
            return $result;
        }
    }
    $result = array();
    foreach ($buckets as $key => $value) {
        array_push($result, serialize($key));
        array_push($result, serialize($value));
    }
    return $result;
};";s:7:"context";a:3:{s:13:"numPartitions";i:2;s:13:"partitionFunc";C:32:"SuperClosure\SerializableClosure":240:{a:5:{s:4:"code";s:137:"function ($x) {
    if ($x == null) {
        return 0;
    }
    $h = null;
    if (is_array($x)) {
    }
    return hash('md5', $x);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:5:"limit";i:256;}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":3944:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":1767:{a:5:{s:4:"code";s:67:"function ($split, $iterator) use($f) {
    return $f($iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":1543:{a:5:{s:4:"code";s:480:"function ($iterator) use($memory, $serializer, $createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc) {
    file_put_contents('/home/gt/php_worker7.txt', 'here1
', FILE_APPEND);
    $agg = new \aggregator($createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc);
    $merger = new \ExternalMerger($agg, $memory * 0.9, $serializer);
    $merger->mergeValues($iterator);
    file_put_contents('/home/gt/php_worker7.txt', 'here2
', FILE_APPEND);
    return $merger->items();
};";s:7:"context";a:5:{s:6:"memory";i:512;s:10:"serializer";O:23:"auto_batched_serializer":10:{s:9:"best_size";i:65536;s:20:"UNLIMITED_BATCH_SIZE";i:-1;s:18:"UNKNOWN_BATCH_SIZE";i:0;s:10:"serializer";N;s:10:"batch_size";i:0;s:19:"END_OF_DATA_SECTION";i:-1;s:20:"PHP_EXCEPTION_THROWN";i:-2;s:11:"TIMING_DATA";i:-3;s:13:"END_OF_STREAM";i:-4;s:4:"NULL";i:-5;}s:18:"createCombinerFunc";C:32:"SuperClosure\SerializableClosure":135:{a:5:{s:4:"code";s:33:"function ($x) {
    return $x;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"mergeValueFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}s:18:"mergeCombinersFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1813:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":369:{a:5:{s:4:"code";s:76:"function ($any, $iterator) use($f) {
    return array_map($f, $iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":137:{a:5:{s:4:"code";s:43:"function ($x) {
    return array($x, 1);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1081:{a:5:{s:4:"code";s:758:"function ($split, $iterator) use($f) {
    $sub_is_array = False;
    foreach ($iterator as $key => $value) {
        $temp = $f($value);
        if (is_array($temp)) {
            $sub_is_array = True;
            break;
        }
    }
    if ($sub_is_array) {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            if (is_array($temp)) {
                foreach ($temp as $e) {
                    array_push($result, $e);
                }
            }
        }
        return $result;
    } else {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            array_push($result, $temp);
        }
        return $result;
    }
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":166:{a:5:{s:4:"code";s:72:"function ($line) {
    $temp = explode(' ', $line);
    return $temp;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}
here5
here6do do do 
here7 array
here8  Array
socket_create()成功54944

socket_connect()成功
首次read_int()成功1
首次read_utf()成功5.6
here3C:32:"SuperClosure\SerializableClosure":1616:{a:5:{s:4:"code";s:67:"function ($split, $iterator) use($f) {
    return $f($iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":1392:{a:5:{s:4:"code";s:329:"function ($iterator) use($memory, $serializer, $createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc) {
    $agg = new \aggregator($createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc);
    $merger = new \ExternalMerger($agg, $memory, $serializer);
    $merger->mergeCombiners($iterator);
    return $merger->items();
};";s:7:"context";a:5:{s:6:"memory";i:512;s:10:"serializer";O:23:"auto_batched_serializer":10:{s:9:"best_size";i:65536;s:20:"UNLIMITED_BATCH_SIZE";i:-1;s:18:"UNKNOWN_BATCH_SIZE";i:0;s:10:"serializer";N;s:10:"batch_size";i:0;s:19:"END_OF_DATA_SECTION";i:-1;s:20:"PHP_EXCEPTION_THROWN";i:-2;s:11:"TIMING_DATA";i:-3;s:13:"END_OF_STREAM";i:-4;s:4:"NULL";i:-5;}s:18:"createCombinerFunc";C:32:"SuperClosure\SerializableClosure":135:{a:5:{s:4:"code";s:33:"function ($x) {
    return $x;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"mergeValueFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}s:18:"mergeCombinersFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}
here5
here7 array
here8  Array
socket_create()成功44487

socket_connect()成功
首次read_int()成功0
首次read_utf()成功5.6
here3C:32:"SuperClosure\SerializableClosure":1616:{a:5:{s:4:"code";s:67:"function ($split, $iterator) use($f) {
    return $f($iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":1392:{a:5:{s:4:"code";s:329:"function ($iterator) use($memory, $serializer, $createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc) {
    $agg = new \aggregator($createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc);
    $merger = new \ExternalMerger($agg, $memory, $serializer);
    $merger->mergeCombiners($iterator);
    return $merger->items();
};";s:7:"context";a:5:{s:6:"memory";i:512;s:10:"serializer";O:23:"auto_batched_serializer":10:{s:9:"best_size";i:65536;s:20:"UNLIMITED_BATCH_SIZE";i:-1;s:18:"UNKNOWN_BATCH_SIZE";i:0;s:10:"serializer";N;s:10:"batch_size";i:0;s:19:"END_OF_DATA_SECTION";i:-1;s:20:"PHP_EXCEPTION_THROWN";i:-2;s:11:"TIMING_DATA";i:-3;s:13:"END_OF_STREAM";i:-4;s:4:"NULL";i:-5;}s:18:"createCombinerFunc";C:32:"SuperClosure\SerializableClosure":135:{a:5:{s:4:"code";s:33:"function ($x) {
    return $x;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"mergeValueFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}s:18:"mergeCombinersFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}
here5
here7 array
here8  Array
socket_create()成功44046

socket_connect()成功
首次read_int()成功0
首次read_utf()成功5.6
socket_create()成功58485

socket_connect()成功
首次read_int()成功1
首次read_utf()成功5.6
here3C:32:"SuperClosure\SerializableClosure":6246:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":1938:{a:5:{s:4:"code";s:1484:"function ($iterator) use($numPartitions, $partitionFunc, $limit, $outputSerializer) {
    $buckets = array();
    $c = 0;
    $batch = min(10 * $numPartitions, 1000);
    foreach ($iterator as $element) {
        file_put_contents('/home/gt/php_worker9.txt', 'here1' . $element . '
', FILE_APPEND);
    }
    foreach ($iterator as $key => $value) {
        $buckets[$partitionFunc($key) % $numPartitions] = array();
        $buckets[$partitionFunc($key) % $numPartitions][$key] = $value;
        $c++;
        if ($c % 1000 == 0 && memory_get_usage() / 1024 / 1024 > $limit || $c > $batch) {
            $n = sizeof($buckets);
            $size = 0;
            $result = array();
            foreach ($buckets as $key2 => $value2) {
                #value是一个array
                array_push($result, serialize($key2));
                $d = serialize($value2);
                unset($value2);
                array_push($result, $d);
                $size += strlen($d);
            }
            $avg = intval($size / $n) >> 20;
            # let 1M < avg < 10M
            if ($avg < 1) {
                $batch *= 1.5;
            } elseif ($avg > 10) {
                $batch = max(intval($batch / 1.5), 1);
            }
            $c = 0;
            return $result;
        }
    }
    $result = array();
    foreach ($buckets as $key => $value) {
        array_push($result, serialize($key));
        array_push($result, serialize($value));
    }
    return $result;
};";s:7:"context";a:3:{s:13:"numPartitions";i:2;s:13:"partitionFunc";C:32:"SuperClosure\SerializableClosure":240:{a:5:{s:4:"code";s:137:"function ($x) {
    if ($x == null) {
        return 0;
    }
    $h = null;
    if (is_array($x)) {
    }
    return hash('md5', $x);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:5:"limit";i:256;}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":3944:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":1767:{a:5:{s:4:"code";s:67:"function ($split, $iterator) use($f) {
    return $f($iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":1543:{a:5:{s:4:"code";s:480:"function ($iterator) use($memory, $serializer, $createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc) {
    file_put_contents('/home/gt/php_worker7.txt', 'here1
', FILE_APPEND);
    $agg = new \aggregator($createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc);
    $merger = new \ExternalMerger($agg, $memory * 0.9, $serializer);
    $merger->mergeValues($iterator);
    file_put_contents('/home/gt/php_worker7.txt', 'here2
', FILE_APPEND);
    return $merger->items();
};";s:7:"context";a:5:{s:6:"memory";i:512;s:10:"serializer";O:23:"auto_batched_serializer":10:{s:9:"best_size";i:65536;s:20:"UNLIMITED_BATCH_SIZE";i:-1;s:18:"UNKNOWN_BATCH_SIZE";i:0;s:10:"serializer";N;s:10:"batch_size";i:0;s:19:"END_OF_DATA_SECTION";i:-1;s:20:"PHP_EXCEPTION_THROWN";i:-2;s:11:"TIMING_DATA";i:-3;s:13:"END_OF_STREAM";i:-4;s:4:"NULL";i:-5;}s:18:"createCombinerFunc";C:32:"SuperClosure\SerializableClosure":135:{a:5:{s:4:"code";s:33:"function ($x) {
    return $x;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"mergeValueFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}s:18:"mergeCombinersFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1813:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":369:{a:5:{s:4:"code";s:76:"function ($any, $iterator) use($f) {
    return array_map($f, $iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":137:{a:5:{s:4:"code";s:43:"function ($x) {
    return array($x, 1);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1081:{a:5:{s:4:"code";s:758:"function ($split, $iterator) use($f) {
    $sub_is_array = False;
    foreach ($iterator as $key => $value) {
        $temp = $f($value);
        if (is_array($temp)) {
            $sub_is_array = True;
            break;
        }
    }
    if ($sub_is_array) {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            if (is_array($temp)) {
                foreach ($temp as $e) {
                    array_push($result, $e);
                }
            }
        }
        return $result;
    } else {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            array_push($result, $temp);
        }
        return $result;
    }
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":166:{a:5:{s:4:"code";s:72:"function ($line) {
    $temp = explode(' ', $line);
    return $temp;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}
here3C:32:"SuperClosure\SerializableClosure":6246:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":1938:{a:5:{s:4:"code";s:1484:"function ($iterator) use($numPartitions, $partitionFunc, $limit, $outputSerializer) {
    $buckets = array();
    $c = 0;
    $batch = min(10 * $numPartitions, 1000);
    foreach ($iterator as $element) {
        file_put_contents('/home/gt/php_worker9.txt', 'here1' . $element . '
', FILE_APPEND);
    }
    foreach ($iterator as $key => $value) {
        $buckets[$partitionFunc($key) % $numPartitions] = array();
        $buckets[$partitionFunc($key) % $numPartitions][$key] = $value;
        $c++;
        if ($c % 1000 == 0 && memory_get_usage() / 1024 / 1024 > $limit || $c > $batch) {
            $n = sizeof($buckets);
            $size = 0;
            $result = array();
            foreach ($buckets as $key2 => $value2) {
                #value是一个array
                array_push($result, serialize($key2));
                $d = serialize($value2);
                unset($value2);
                array_push($result, $d);
                $size += strlen($d);
            }
            $avg = intval($size / $n) >> 20;
            # let 1M < avg < 10M
            if ($avg < 1) {
                $batch *= 1.5;
            } elseif ($avg > 10) {
                $batch = max(intval($batch / 1.5), 1);
            }
            $c = 0;
            return $result;
        }
    }
    $result = array();
    foreach ($buckets as $key => $value) {
        array_push($result, serialize($key));
        array_push($result, serialize($value));
    }
    return $result;
};";s:7:"context";a:3:{s:13:"numPartitions";i:2;s:13:"partitionFunc";C:32:"SuperClosure\SerializableClosure":240:{a:5:{s:4:"code";s:137:"function ($x) {
    if ($x == null) {
        return 0;
    }
    $h = null;
    if (is_array($x)) {
    }
    return hash('md5', $x);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:5:"limit";i:256;}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":3944:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":1767:{a:5:{s:4:"code";s:67:"function ($split, $iterator) use($f) {
    return $f($iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":1543:{a:5:{s:4:"code";s:480:"function ($iterator) use($memory, $serializer, $createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc) {
    file_put_contents('/home/gt/php_worker7.txt', 'here1
', FILE_APPEND);
    $agg = new \aggregator($createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc);
    $merger = new \ExternalMerger($agg, $memory * 0.9, $serializer);
    $merger->mergeValues($iterator);
    file_put_contents('/home/gt/php_worker7.txt', 'here2
', FILE_APPEND);
    return $merger->items();
};";s:7:"context";a:5:{s:6:"memory";i:512;s:10:"serializer";O:23:"auto_batched_serializer":10:{s:9:"best_size";i:65536;s:20:"UNLIMITED_BATCH_SIZE";i:-1;s:18:"UNKNOWN_BATCH_SIZE";i:0;s:10:"serializer";N;s:10:"batch_size";i:0;s:19:"END_OF_DATA_SECTION";i:-1;s:20:"PHP_EXCEPTION_THROWN";i:-2;s:11:"TIMING_DATA";i:-3;s:13:"END_OF_STREAM";i:-4;s:4:"NULL";i:-5;}s:18:"createCombinerFunc";C:32:"SuperClosure\SerializableClosure":135:{a:5:{s:4:"code";s:33:"function ($x) {
    return $x;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"mergeValueFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}s:18:"mergeCombinersFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1813:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":369:{a:5:{s:4:"code";s:76:"function ($any, $iterator) use($f) {
    return array_map($f, $iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":137:{a:5:{s:4:"code";s:43:"function ($x) {
    return array($x, 1);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1081:{a:5:{s:4:"code";s:758:"function ($split, $iterator) use($f) {
    $sub_is_array = False;
    foreach ($iterator as $key => $value) {
        $temp = $f($value);
        if (is_array($temp)) {
            $sub_is_array = True;
            break;
        }
    }
    if ($sub_is_array) {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            if (is_array($temp)) {
                foreach ($temp as $e) {
                    array_push($result, $e);
                }
            }
        }
        return $result;
    } else {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            array_push($result, $temp);
        }
        return $result;
    }
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":166:{a:5:{s:4:"code";s:72:"function ($line) {
    $temp = explode(' ', $line);
    return $temp;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}
here5
here5
here6test test test test try try try 
here6do do do 
here7 array
here8  Array
here7 array
here8  Array
socket_create()成功34237

socket_connect()成功
首次read_int()成功1
首次read_utf()成功5.6
here3C:32:"SuperClosure\SerializableClosure":1616:{a:5:{s:4:"code";s:67:"function ($split, $iterator) use($f) {
    return $f($iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":1392:{a:5:{s:4:"code";s:329:"function ($iterator) use($memory, $serializer, $createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc) {
    $agg = new \aggregator($createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc);
    $merger = new \ExternalMerger($agg, $memory, $serializer);
    $merger->mergeCombiners($iterator);
    return $merger->items();
};";s:7:"context";a:5:{s:6:"memory";i:512;s:10:"serializer";O:23:"auto_batched_serializer":10:{s:9:"best_size";i:65536;s:20:"UNLIMITED_BATCH_SIZE";i:-1;s:18:"UNKNOWN_BATCH_SIZE";i:0;s:10:"serializer";N;s:10:"batch_size";i:0;s:19:"END_OF_DATA_SECTION";i:-1;s:20:"PHP_EXCEPTION_THROWN";i:-2;s:11:"TIMING_DATA";i:-3;s:13:"END_OF_STREAM";i:-4;s:4:"NULL";i:-5;}s:18:"createCombinerFunc";C:32:"SuperClosure\SerializableClosure":135:{a:5:{s:4:"code";s:33:"function ($x) {
    return $x;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"mergeValueFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}s:18:"mergeCombinersFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}
here5
here7 array
here8  Array
socket_create()成功46761

socket_connect()成功
首次read_int()成功0
首次read_utf()成功5.6
here3C:32:"SuperClosure\SerializableClosure":1616:{a:5:{s:4:"code";s:67:"function ($split, $iterator) use($f) {
    return $f($iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":1392:{a:5:{s:4:"code";s:329:"function ($iterator) use($memory, $serializer, $createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc) {
    $agg = new \aggregator($createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc);
    $merger = new \ExternalMerger($agg, $memory, $serializer);
    $merger->mergeCombiners($iterator);
    return $merger->items();
};";s:7:"context";a:5:{s:6:"memory";i:512;s:10:"serializer";O:23:"auto_batched_serializer":10:{s:9:"best_size";i:65536;s:20:"UNLIMITED_BATCH_SIZE";i:-1;s:18:"UNKNOWN_BATCH_SIZE";i:0;s:10:"serializer";N;s:10:"batch_size";i:0;s:19:"END_OF_DATA_SECTION";i:-1;s:20:"PHP_EXCEPTION_THROWN";i:-2;s:11:"TIMING_DATA";i:-3;s:13:"END_OF_STREAM";i:-4;s:4:"NULL";i:-5;}s:18:"createCombinerFunc";C:32:"SuperClosure\SerializableClosure":135:{a:5:{s:4:"code";s:33:"function ($x) {
    return $x;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"mergeValueFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}s:18:"mergeCombinersFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}
here5
here7 array
here8  Array
socket_create()成功35627

socket_connect()成功
首次read_int()成功0
首次read_utf()成功5.6
socket_create()成功58849

socket_connect()成功
here3C:32:"SuperClosure\SerializableClosure":6246:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":1938:{a:5:{s:4:"code";s:1484:"function ($iterator) use($numPartitions, $partitionFunc, $limit, $outputSerializer) {
    $buckets = array();
    $c = 0;
    $batch = min(10 * $numPartitions, 1000);
    foreach ($iterator as $element) {
        file_put_contents('/home/gt/php_worker9.txt', 'here1' . $element . '
', FILE_APPEND);
    }
    foreach ($iterator as $key => $value) {
        $buckets[$partitionFunc($key) % $numPartitions] = array();
        $buckets[$partitionFunc($key) % $numPartitions][$key] = $value;
        $c++;
        if ($c % 1000 == 0 && memory_get_usage() / 1024 / 1024 > $limit || $c > $batch) {
            $n = sizeof($buckets);
            $size = 0;
            $result = array();
            foreach ($buckets as $key2 => $value2) {
                #value是一个array
                array_push($result, serialize($key2));
                $d = serialize($value2);
                unset($value2);
                array_push($result, $d);
                $size += strlen($d);
            }
            $avg = intval($size / $n) >> 20;
            # let 1M < avg < 10M
            if ($avg < 1) {
                $batch *= 1.5;
            } elseif ($avg > 10) {
                $batch = max(intval($batch / 1.5), 1);
            }
            $c = 0;
            return $result;
        }
    }
    $result = array();
    foreach ($buckets as $key => $value) {
        array_push($result, serialize($key));
        array_push($result, serialize($value));
    }
    return $result;
};";s:7:"context";a:3:{s:13:"numPartitions";i:2;s:13:"partitionFunc";C:32:"SuperClosure\SerializableClosure":240:{a:5:{s:4:"code";s:137:"function ($x) {
    if ($x == null) {
        return 0;
    }
    $h = null;
    if (is_array($x)) {
    }
    return hash('md5', $x);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:5:"limit";i:256;}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":3944:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":1767:{a:5:{s:4:"code";s:67:"function ($split, $iterator) use($f) {
    return $f($iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":1543:{a:5:{s:4:"code";s:480:"function ($iterator) use($memory, $serializer, $createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc) {
    file_put_contents('/home/gt/php_worker7.txt', 'here1
', FILE_APPEND);
    $agg = new \aggregator($createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc);
    $merger = new \ExternalMerger($agg, $memory * 0.9, $serializer);
    $merger->mergeValues($iterator);
    file_put_contents('/home/gt/php_worker7.txt', 'here2
', FILE_APPEND);
    return $merger->items();
};";s:7:"context";a:5:{s:6:"memory";i:512;s:10:"serializer";O:23:"auto_batched_serializer":10:{s:9:"best_size";i:65536;s:20:"UNLIMITED_BATCH_SIZE";i:-1;s:18:"UNKNOWN_BATCH_SIZE";i:0;s:10:"serializer";N;s:10:"batch_size";i:0;s:19:"END_OF_DATA_SECTION";i:-1;s:20:"PHP_EXCEPTION_THROWN";i:-2;s:11:"TIMING_DATA";i:-3;s:13:"END_OF_STREAM";i:-4;s:4:"NULL";i:-5;}s:18:"createCombinerFunc";C:32:"SuperClosure\SerializableClosure":135:{a:5:{s:4:"code";s:33:"function ($x) {
    return $x;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"mergeValueFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}s:18:"mergeCombinersFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1813:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":369:{a:5:{s:4:"code";s:76:"function ($any, $iterator) use($f) {
    return array_map($f, $iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":137:{a:5:{s:4:"code";s:43:"function ($x) {
    return array($x, 1);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1081:{a:5:{s:4:"code";s:758:"function ($split, $iterator) use($f) {
    $sub_is_array = False;
    foreach ($iterator as $key => $value) {
        $temp = $f($value);
        if (is_array($temp)) {
            $sub_is_array = True;
            break;
        }
    }
    if ($sub_is_array) {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            if (is_array($temp)) {
                foreach ($temp as $e) {
                    array_push($result, $e);
                }
            }
        }
        return $result;
    } else {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            array_push($result, $temp);
        }
        return $result;
    }
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":166:{a:5:{s:4:"code";s:72:"function ($line) {
    $temp = explode(' ', $line);
    return $temp;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}
here5
here6test test test test try try try 
here7 array
here8  Array
首次read_int()成功1
首次read_utf()成功5.6
here3C:32:"SuperClosure\SerializableClosure":6246:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":1938:{a:5:{s:4:"code";s:1484:"function ($iterator) use($numPartitions, $partitionFunc, $limit, $outputSerializer) {
    $buckets = array();
    $c = 0;
    $batch = min(10 * $numPartitions, 1000);
    foreach ($iterator as $element) {
        file_put_contents('/home/gt/php_worker9.txt', 'here1' . $element . '
', FILE_APPEND);
    }
    foreach ($iterator as $key => $value) {
        $buckets[$partitionFunc($key) % $numPartitions] = array();
        $buckets[$partitionFunc($key) % $numPartitions][$key] = $value;
        $c++;
        if ($c % 1000 == 0 && memory_get_usage() / 1024 / 1024 > $limit || $c > $batch) {
            $n = sizeof($buckets);
            $size = 0;
            $result = array();
            foreach ($buckets as $key2 => $value2) {
                #value是一个array
                array_push($result, serialize($key2));
                $d = serialize($value2);
                unset($value2);
                array_push($result, $d);
                $size += strlen($d);
            }
            $avg = intval($size / $n) >> 20;
            # let 1M < avg < 10M
            if ($avg < 1) {
                $batch *= 1.5;
            } elseif ($avg > 10) {
                $batch = max(intval($batch / 1.5), 1);
            }
            $c = 0;
            return $result;
        }
    }
    $result = array();
    foreach ($buckets as $key => $value) {
        array_push($result, serialize($key));
        array_push($result, serialize($value));
    }
    return $result;
};";s:7:"context";a:3:{s:13:"numPartitions";i:2;s:13:"partitionFunc";C:32:"SuperClosure\SerializableClosure":240:{a:5:{s:4:"code";s:137:"function ($x) {
    if ($x == null) {
        return 0;
    }
    $h = null;
    if (is_array($x)) {
    }
    return hash('md5', $x);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:5:"limit";i:256;}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":3944:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":1767:{a:5:{s:4:"code";s:67:"function ($split, $iterator) use($f) {
    return $f($iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":1543:{a:5:{s:4:"code";s:480:"function ($iterator) use($memory, $serializer, $createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc) {
    file_put_contents('/home/gt/php_worker7.txt', 'here1
', FILE_APPEND);
    $agg = new \aggregator($createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc);
    $merger = new \ExternalMerger($agg, $memory * 0.9, $serializer);
    $merger->mergeValues($iterator);
    file_put_contents('/home/gt/php_worker7.txt', 'here2
', FILE_APPEND);
    return $merger->items();
};";s:7:"context";a:5:{s:6:"memory";i:512;s:10:"serializer";O:23:"auto_batched_serializer":10:{s:9:"best_size";i:65536;s:20:"UNLIMITED_BATCH_SIZE";i:-1;s:18:"UNKNOWN_BATCH_SIZE";i:0;s:10:"serializer";N;s:10:"batch_size";i:0;s:19:"END_OF_DATA_SECTION";i:-1;s:20:"PHP_EXCEPTION_THROWN";i:-2;s:11:"TIMING_DATA";i:-3;s:13:"END_OF_STREAM";i:-4;s:4:"NULL";i:-5;}s:18:"createCombinerFunc";C:32:"SuperClosure\SerializableClosure":135:{a:5:{s:4:"code";s:33:"function ($x) {
    return $x;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"mergeValueFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}s:18:"mergeCombinersFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1813:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":369:{a:5:{s:4:"code";s:76:"function ($any, $iterator) use($f) {
    return array_map($f, $iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":137:{a:5:{s:4:"code";s:43:"function ($x) {
    return array($x, 1);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1081:{a:5:{s:4:"code";s:758:"function ($split, $iterator) use($f) {
    $sub_is_array = False;
    foreach ($iterator as $key => $value) {
        $temp = $f($value);
        if (is_array($temp)) {
            $sub_is_array = True;
            break;
        }
    }
    if ($sub_is_array) {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            if (is_array($temp)) {
                foreach ($temp as $e) {
                    array_push($result, $e);
                }
            }
        }
        return $result;
    } else {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            array_push($result, $temp);
        }
        return $result;
    }
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":166:{a:5:{s:4:"code";s:72:"function ($line) {
    $temp = explode(' ', $line);
    return $temp;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}
here5
here6do do do 
here7 array
here8  Array
socket_create()成功53311

socket_connect()成功
首次read_int()成功1
首次read_utf()成功5.6
here3C:32:"SuperClosure\SerializableClosure":1616:{a:5:{s:4:"code";s:67:"function ($split, $iterator) use($f) {
    return $f($iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":1392:{a:5:{s:4:"code";s:329:"function ($iterator) use($memory, $serializer, $createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc) {
    $agg = new \aggregator($createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc);
    $merger = new \ExternalMerger($agg, $memory, $serializer);
    $merger->mergeCombiners($iterator);
    return $merger->items();
};";s:7:"context";a:5:{s:6:"memory";i:512;s:10:"serializer";O:23:"auto_batched_serializer":10:{s:9:"best_size";i:65536;s:20:"UNLIMITED_BATCH_SIZE";i:-1;s:18:"UNKNOWN_BATCH_SIZE";i:0;s:10:"serializer";N;s:10:"batch_size";i:0;s:19:"END_OF_DATA_SECTION";i:-1;s:20:"PHP_EXCEPTION_THROWN";i:-2;s:11:"TIMING_DATA";i:-3;s:13:"END_OF_STREAM";i:-4;s:4:"NULL";i:-5;}s:18:"createCombinerFunc";C:32:"SuperClosure\SerializableClosure":135:{a:5:{s:4:"code";s:33:"function ($x) {
    return $x;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"mergeValueFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}s:18:"mergeCombinersFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}
here5
here7 array
here8  Array
socket_create()成功54226

socket_connect()成功
首次read_int()成功0
首次read_utf()成功5.6
here3C:32:"SuperClosure\SerializableClosure":1616:{a:5:{s:4:"code";s:67:"function ($split, $iterator) use($f) {
    return $f($iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":1392:{a:5:{s:4:"code";s:329:"function ($iterator) use($memory, $serializer, $createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc) {
    $agg = new \aggregator($createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc);
    $merger = new \ExternalMerger($agg, $memory, $serializer);
    $merger->mergeCombiners($iterator);
    return $merger->items();
};";s:7:"context";a:5:{s:6:"memory";i:512;s:10:"serializer";O:23:"auto_batched_serializer":10:{s:9:"best_size";i:65536;s:20:"UNLIMITED_BATCH_SIZE";i:-1;s:18:"UNKNOWN_BATCH_SIZE";i:0;s:10:"serializer";N;s:10:"batch_size";i:0;s:19:"END_OF_DATA_SECTION";i:-1;s:20:"PHP_EXCEPTION_THROWN";i:-2;s:11:"TIMING_DATA";i:-3;s:13:"END_OF_STREAM";i:-4;s:4:"NULL";i:-5;}s:18:"createCombinerFunc";C:32:"SuperClosure\SerializableClosure":135:{a:5:{s:4:"code";s:33:"function ($x) {
    return $x;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"mergeValueFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}s:18:"mergeCombinersFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}
here5
here7 array
here8  Array
socket_create()成功43625

socket_connect()成功
首次read_int()成功1
首次read_utf()成功5.6
socket_create()成功45267

socket_connect()成功
here3C:32:"SuperClosure\SerializableClosure":6098:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":1938:{a:5:{s:4:"code";s:1484:"function ($iterator) use($numPartitions, $partitionFunc, $limit, $outputSerializer) {
    $buckets = array();
    $c = 0;
    $batch = min(10 * $numPartitions, 1000);
    foreach ($iterator as $element) {
        file_put_contents('/home/gt/php_worker9.txt', 'here1' . $element . '
', FILE_APPEND);
    }
    foreach ($iterator as $key => $value) {
        $buckets[$partitionFunc($key) % $numPartitions] = array();
        $buckets[$partitionFunc($key) % $numPartitions][$key] = $value;
        $c++;
        if ($c % 1000 == 0 && memory_get_usage() / 1024 / 1024 > $limit || $c > $batch) {
            $n = sizeof($buckets);
            $size = 0;
            $result = array();
            foreach ($buckets as $key2 => $value2) {
                #value是一个array
                array_push($result, serialize($key2));
                $d = serialize($value2);
                unset($value2);
                array_push($result, $d);
                $size += strlen($d);
            }
            $avg = intval($size / $n) >> 20;
            # let 1M < avg < 10M
            if ($avg < 1) {
                $batch *= 1.5;
            } elseif ($avg > 10) {
                $batch = max(intval($batch / 1.5), 1);
            }
            $c = 0;
            return $result;
        }
    }
    $result = array();
    foreach ($buckets as $key => $value) {
        array_push($result, serialize($key));
        array_push($result, serialize($value));
    }
    return $result;
};";s:7:"context";a:3:{s:13:"numPartitions";i:2;s:13:"partitionFunc";C:32:"SuperClosure\SerializableClosure":240:{a:5:{s:4:"code";s:137:"function ($x) {
    if ($x == null) {
        return 0;
    }
    $h = null;
    if (is_array($x)) {
    }
    return hash('md5', $x);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:5:"limit";i:256;}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":3796:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":1619:{a:5:{s:4:"code";s:67:"function ($split, $iterator) use($f) {
    return $f($iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":1395:{a:5:{s:4:"code";s:332:"function ($iterator) use($memory, $serializer, $createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc) {
    $agg = new \aggregator($createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc);
    $merger = new \ExternalMerger($agg, $memory * 0.9, $serializer);
    $merger->mergeValues($iterator);
    return $merger->items();
};";s:7:"context";a:5:{s:6:"memory";i:512;s:10:"serializer";O:23:"auto_batched_serializer":10:{s:9:"best_size";i:65536;s:20:"UNLIMITED_BATCH_SIZE";i:-1;s:18:"UNKNOWN_BATCH_SIZE";i:0;s:10:"serializer";N;s:10:"batch_size";i:0;s:19:"END_OF_DATA_SECTION";i:-1;s:20:"PHP_EXCEPTION_THROWN";i:-2;s:11:"TIMING_DATA";i:-3;s:13:"END_OF_STREAM";i:-4;s:4:"NULL";i:-5;}s:18:"createCombinerFunc";C:32:"SuperClosure\SerializableClosure":135:{a:5:{s:4:"code";s:33:"function ($x) {
    return $x;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"mergeValueFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}s:18:"mergeCombinersFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1813:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":369:{a:5:{s:4:"code";s:76:"function ($any, $iterator) use($f) {
    return array_map($f, $iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":137:{a:5:{s:4:"code";s:43:"function ($x) {
    return array($x, 1);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1081:{a:5:{s:4:"code";s:758:"function ($split, $iterator) use($f) {
    $sub_is_array = False;
    foreach ($iterator as $key => $value) {
        $temp = $f($value);
        if (is_array($temp)) {
            $sub_is_array = True;
            break;
        }
    }
    if ($sub_is_array) {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            if (is_array($temp)) {
                foreach ($temp as $e) {
                    array_push($result, $e);
                }
            }
        }
        return $result;
    } else {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            array_push($result, $temp);
        }
        return $result;
    }
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":166:{a:5:{s:4:"code";s:72:"function ($line) {
    $temp = explode(' ', $line);
    return $temp;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}
here5
here6do do do 
here7 array
here8  Array
首次read_int()成功0
首次read_utf()成功5.6
here3C:32:"SuperClosure\SerializableClosure":6098:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":1938:{a:5:{s:4:"code";s:1484:"function ($iterator) use($numPartitions, $partitionFunc, $limit, $outputSerializer) {
    $buckets = array();
    $c = 0;
    $batch = min(10 * $numPartitions, 1000);
    foreach ($iterator as $element) {
        file_put_contents('/home/gt/php_worker9.txt', 'here1' . $element . '
', FILE_APPEND);
    }
    foreach ($iterator as $key => $value) {
        $buckets[$partitionFunc($key) % $numPartitions] = array();
        $buckets[$partitionFunc($key) % $numPartitions][$key] = $value;
        $c++;
        if ($c % 1000 == 0 && memory_get_usage() / 1024 / 1024 > $limit || $c > $batch) {
            $n = sizeof($buckets);
            $size = 0;
            $result = array();
            foreach ($buckets as $key2 => $value2) {
                #value是一个array
                array_push($result, serialize($key2));
                $d = serialize($value2);
                unset($value2);
                array_push($result, $d);
                $size += strlen($d);
            }
            $avg = intval($size / $n) >> 20;
            # let 1M < avg < 10M
            if ($avg < 1) {
                $batch *= 1.5;
            } elseif ($avg > 10) {
                $batch = max(intval($batch / 1.5), 1);
            }
            $c = 0;
            return $result;
        }
    }
    $result = array();
    foreach ($buckets as $key => $value) {
        array_push($result, serialize($key));
        array_push($result, serialize($value));
    }
    return $result;
};";s:7:"context";a:3:{s:13:"numPartitions";i:2;s:13:"partitionFunc";C:32:"SuperClosure\SerializableClosure":240:{a:5:{s:4:"code";s:137:"function ($x) {
    if ($x == null) {
        return 0;
    }
    $h = null;
    if (is_array($x)) {
    }
    return hash('md5', $x);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:5:"limit";i:256;}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":3796:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":1619:{a:5:{s:4:"code";s:67:"function ($split, $iterator) use($f) {
    return $f($iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":1395:{a:5:{s:4:"code";s:332:"function ($iterator) use($memory, $serializer, $createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc) {
    $agg = new \aggregator($createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc);
    $merger = new \ExternalMerger($agg, $memory * 0.9, $serializer);
    $merger->mergeValues($iterator);
    return $merger->items();
};";s:7:"context";a:5:{s:6:"memory";i:512;s:10:"serializer";O:23:"auto_batched_serializer":10:{s:9:"best_size";i:65536;s:20:"UNLIMITED_BATCH_SIZE";i:-1;s:18:"UNKNOWN_BATCH_SIZE";i:0;s:10:"serializer";N;s:10:"batch_size";i:0;s:19:"END_OF_DATA_SECTION";i:-1;s:20:"PHP_EXCEPTION_THROWN";i:-2;s:11:"TIMING_DATA";i:-3;s:13:"END_OF_STREAM";i:-4;s:4:"NULL";i:-5;}s:18:"createCombinerFunc";C:32:"SuperClosure\SerializableClosure":135:{a:5:{s:4:"code";s:33:"function ($x) {
    return $x;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"mergeValueFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}s:18:"mergeCombinersFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1813:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":369:{a:5:{s:4:"code";s:76:"function ($any, $iterator) use($f) {
    return array_map($f, $iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":137:{a:5:{s:4:"code";s:43:"function ($x) {
    return array($x, 1);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1081:{a:5:{s:4:"code";s:758:"function ($split, $iterator) use($f) {
    $sub_is_array = False;
    foreach ($iterator as $key => $value) {
        $temp = $f($value);
        if (is_array($temp)) {
            $sub_is_array = True;
            break;
        }
    }
    if ($sub_is_array) {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            if (is_array($temp)) {
                foreach ($temp as $e) {
                    array_push($result, $e);
                }
            }
        }
        return $result;
    } else {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            array_push($result, $temp);
        }
        return $result;
    }
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":166:{a:5:{s:4:"code";s:72:"function ($line) {
    $temp = explode(' ', $line);
    return $temp;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}
here5
here6test test test test try try try 
here7 array
here8  Array
socket_create()成功51738

socket_connect()成功
首次read_int()成功1
首次read_utf()成功5.6
here3C:32:"SuperClosure\SerializableClosure":1616:{a:5:{s:4:"code";s:67:"function ($split, $iterator) use($f) {
    return $f($iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":1392:{a:5:{s:4:"code";s:329:"function ($iterator) use($memory, $serializer, $createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc) {
    $agg = new \aggregator($createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc);
    $merger = new \ExternalMerger($agg, $memory, $serializer);
    $merger->mergeCombiners($iterator);
    return $merger->items();
};";s:7:"context";a:5:{s:6:"memory";i:512;s:10:"serializer";O:23:"auto_batched_serializer":10:{s:9:"best_size";i:65536;s:20:"UNLIMITED_BATCH_SIZE";i:-1;s:18:"UNKNOWN_BATCH_SIZE";i:0;s:10:"serializer";N;s:10:"batch_size";i:0;s:19:"END_OF_DATA_SECTION";i:-1;s:20:"PHP_EXCEPTION_THROWN";i:-2;s:11:"TIMING_DATA";i:-3;s:13:"END_OF_STREAM";i:-4;s:4:"NULL";i:-5;}s:18:"createCombinerFunc";C:32:"SuperClosure\SerializableClosure":135:{a:5:{s:4:"code";s:33:"function ($x) {
    return $x;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"mergeValueFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}s:18:"mergeCombinersFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}
here5
here7 array
here8  Array
socket_create()成功50162

socket_connect()成功
首次read_int()成功0
首次read_utf()成功5.6
here3C:32:"SuperClosure\SerializableClosure":1616:{a:5:{s:4:"code";s:67:"function ($split, $iterator) use($f) {
    return $f($iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":1392:{a:5:{s:4:"code";s:329:"function ($iterator) use($memory, $serializer, $createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc) {
    $agg = new \aggregator($createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc);
    $merger = new \ExternalMerger($agg, $memory, $serializer);
    $merger->mergeCombiners($iterator);
    return $merger->items();
};";s:7:"context";a:5:{s:6:"memory";i:512;s:10:"serializer";O:23:"auto_batched_serializer":10:{s:9:"best_size";i:65536;s:20:"UNLIMITED_BATCH_SIZE";i:-1;s:18:"UNKNOWN_BATCH_SIZE";i:0;s:10:"serializer";N;s:10:"batch_size";i:0;s:19:"END_OF_DATA_SECTION";i:-1;s:20:"PHP_EXCEPTION_THROWN";i:-2;s:11:"TIMING_DATA";i:-3;s:13:"END_OF_STREAM";i:-4;s:4:"NULL";i:-5;}s:18:"createCombinerFunc";C:32:"SuperClosure\SerializableClosure":135:{a:5:{s:4:"code";s:33:"function ($x) {
    return $x;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"mergeValueFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}s:18:"mergeCombinersFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}
here5
here7 array
here8  Array
socket_create()成功52980

socket_connect()成功
socket_create()成功43306

socket_connect()成功
首次read_int()成功0
首次read_utf()成功5.6
首次read_int()成功1
首次read_utf()成功5.6
here3C:32:"SuperClosure\SerializableClosure":6189:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":2029:{a:5:{s:4:"code";s:1575:"function ($iterator) use($numPartitions, $partitionFunc, $limit, $outputSerializer) {
    $buckets = array();
    $c = 0;
    $batch = min(10 * $numPartitions, 1000);
    file_put_contents('/home/gt/php_worker9.txt', 'here1' . $iterator . '
', FILE_APPEND);
    foreach ($iterator as $element) {
        file_put_contents('/home/gt/php_worker9.txt', 'here1' . $element . '
', FILE_APPEND);
    }
    foreach ($iterator as $key => $value) {
        $buckets[$partitionFunc($key) % $numPartitions] = array();
        $buckets[$partitionFunc($key) % $numPartitions][$key] = $value;
        $c++;
        if ($c % 1000 == 0 && memory_get_usage() / 1024 / 1024 > $limit || $c > $batch) {
            $n = sizeof($buckets);
            $size = 0;
            $result = array();
            foreach ($buckets as $key2 => $value2) {
                #value是一个array
                array_push($result, serialize($key2));
                $d = serialize($value2);
                unset($value2);
                array_push($result, $d);
                $size += strlen($d);
            }
            $avg = intval($size / $n) >> 20;
            # let 1M < avg < 10M
            if ($avg < 1) {
                $batch *= 1.5;
            } elseif ($avg > 10) {
                $batch = max(intval($batch / 1.5), 1);
            }
            $c = 0;
            return $result;
        }
    }
    $result = array();
    foreach ($buckets as $key => $value) {
        array_push($result, serialize($key));
        array_push($result, serialize($value));
    }
    return $result;
};";s:7:"context";a:3:{s:13:"numPartitions";i:2;s:13:"partitionFunc";C:32:"SuperClosure\SerializableClosure":240:{a:5:{s:4:"code";s:137:"function ($x) {
    if ($x == null) {
        return 0;
    }
    $h = null;
    if (is_array($x)) {
    }
    return hash('md5', $x);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:5:"limit";i:256;}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":3796:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":1619:{a:5:{s:4:"code";s:67:"function ($split, $iterator) use($f) {
    return $f($iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":1395:{a:5:{s:4:"code";s:332:"function ($iterator) use($memory, $serializer, $createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc) {
    $agg = new \aggregator($createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc);
    $merger = new \ExternalMerger($agg, $memory * 0.9, $serializer);
    $merger->mergeValues($iterator);
    return $merger->items();
};";s:7:"context";a:5:{s:6:"memory";i:512;s:10:"serializer";O:23:"auto_batched_serializer":10:{s:9:"best_size";i:65536;s:20:"UNLIMITED_BATCH_SIZE";i:-1;s:18:"UNKNOWN_BATCH_SIZE";i:0;s:10:"serializer";N;s:10:"batch_size";i:0;s:19:"END_OF_DATA_SECTION";i:-1;s:20:"PHP_EXCEPTION_THROWN";i:-2;s:11:"TIMING_DATA";i:-3;s:13:"END_OF_STREAM";i:-4;s:4:"NULL";i:-5;}s:18:"createCombinerFunc";C:32:"SuperClosure\SerializableClosure":135:{a:5:{s:4:"code";s:33:"function ($x) {
    return $x;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"mergeValueFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}s:18:"mergeCombinersFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1813:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":369:{a:5:{s:4:"code";s:76:"function ($any, $iterator) use($f) {
    return array_map($f, $iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":137:{a:5:{s:4:"code";s:43:"function ($x) {
    return array($x, 1);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1081:{a:5:{s:4:"code";s:758:"function ($split, $iterator) use($f) {
    $sub_is_array = False;
    foreach ($iterator as $key => $value) {
        $temp = $f($value);
        if (is_array($temp)) {
            $sub_is_array = True;
            break;
        }
    }
    if ($sub_is_array) {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            if (is_array($temp)) {
                foreach ($temp as $e) {
                    array_push($result, $e);
                }
            }
        }
        return $result;
    } else {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            array_push($result, $temp);
        }
        return $result;
    }
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":166:{a:5:{s:4:"code";s:72:"function ($line) {
    $temp = explode(' ', $line);
    return $temp;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}
here3C:32:"SuperClosure\SerializableClosure":6189:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":2029:{a:5:{s:4:"code";s:1575:"function ($iterator) use($numPartitions, $partitionFunc, $limit, $outputSerializer) {
    $buckets = array();
    $c = 0;
    $batch = min(10 * $numPartitions, 1000);
    file_put_contents('/home/gt/php_worker9.txt', 'here1' . $iterator . '
', FILE_APPEND);
    foreach ($iterator as $element) {
        file_put_contents('/home/gt/php_worker9.txt', 'here1' . $element . '
', FILE_APPEND);
    }
    foreach ($iterator as $key => $value) {
        $buckets[$partitionFunc($key) % $numPartitions] = array();
        $buckets[$partitionFunc($key) % $numPartitions][$key] = $value;
        $c++;
        if ($c % 1000 == 0 && memory_get_usage() / 1024 / 1024 > $limit || $c > $batch) {
            $n = sizeof($buckets);
            $size = 0;
            $result = array();
            foreach ($buckets as $key2 => $value2) {
                #value是一个array
                array_push($result, serialize($key2));
                $d = serialize($value2);
                unset($value2);
                array_push($result, $d);
                $size += strlen($d);
            }
            $avg = intval($size / $n) >> 20;
            # let 1M < avg < 10M
            if ($avg < 1) {
                $batch *= 1.5;
            } elseif ($avg > 10) {
                $batch = max(intval($batch / 1.5), 1);
            }
            $c = 0;
            return $result;
        }
    }
    $result = array();
    foreach ($buckets as $key => $value) {
        array_push($result, serialize($key));
        array_push($result, serialize($value));
    }
    return $result;
};";s:7:"context";a:3:{s:13:"numPartitions";i:2;s:13:"partitionFunc";C:32:"SuperClosure\SerializableClosure":240:{a:5:{s:4:"code";s:137:"function ($x) {
    if ($x == null) {
        return 0;
    }
    $h = null;
    if (is_array($x)) {
    }
    return hash('md5', $x);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:5:"limit";i:256;}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":3796:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":1619:{a:5:{s:4:"code";s:67:"function ($split, $iterator) use($f) {
    return $f($iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":1395:{a:5:{s:4:"code";s:332:"function ($iterator) use($memory, $serializer, $createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc) {
    $agg = new \aggregator($createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc);
    $merger = new \ExternalMerger($agg, $memory * 0.9, $serializer);
    $merger->mergeValues($iterator);
    return $merger->items();
};";s:7:"context";a:5:{s:6:"memory";i:512;s:10:"serializer";O:23:"auto_batched_serializer":10:{s:9:"best_size";i:65536;s:20:"UNLIMITED_BATCH_SIZE";i:-1;s:18:"UNKNOWN_BATCH_SIZE";i:0;s:10:"serializer";N;s:10:"batch_size";i:0;s:19:"END_OF_DATA_SECTION";i:-1;s:20:"PHP_EXCEPTION_THROWN";i:-2;s:11:"TIMING_DATA";i:-3;s:13:"END_OF_STREAM";i:-4;s:4:"NULL";i:-5;}s:18:"createCombinerFunc";C:32:"SuperClosure\SerializableClosure":135:{a:5:{s:4:"code";s:33:"function ($x) {
    return $x;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"mergeValueFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}s:18:"mergeCombinersFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1813:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":369:{a:5:{s:4:"code";s:76:"function ($any, $iterator) use($f) {
    return array_map($f, $iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":137:{a:5:{s:4:"code";s:43:"function ($x) {
    return array($x, 1);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1081:{a:5:{s:4:"code";s:758:"function ($split, $iterator) use($f) {
    $sub_is_array = False;
    foreach ($iterator as $key => $value) {
        $temp = $f($value);
        if (is_array($temp)) {
            $sub_is_array = True;
            break;
        }
    }
    if ($sub_is_array) {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            if (is_array($temp)) {
                foreach ($temp as $e) {
                    array_push($result, $e);
                }
            }
        }
        return $result;
    } else {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            array_push($result, $temp);
        }
        return $result;
    }
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":166:{a:5:{s:4:"code";s:72:"function ($line) {
    $temp = explode(' ', $line);
    return $temp;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}
here5
here6test test test test try try try 
here7 array
here8  Array
here5
here6do do do 
here7 array
here8  Array
socket_create()成功34202

socket_connect()成功
首次read_int()成功1
首次read_utf()成功5.6
here3C:32:"SuperClosure\SerializableClosure":1616:{a:5:{s:4:"code";s:67:"function ($split, $iterator) use($f) {
    return $f($iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":1392:{a:5:{s:4:"code";s:329:"function ($iterator) use($memory, $serializer, $createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc) {
    $agg = new \aggregator($createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc);
    $merger = new \ExternalMerger($agg, $memory, $serializer);
    $merger->mergeCombiners($iterator);
    return $merger->items();
};";s:7:"context";a:5:{s:6:"memory";i:512;s:10:"serializer";O:23:"auto_batched_serializer":10:{s:9:"best_size";i:65536;s:20:"UNLIMITED_BATCH_SIZE";i:-1;s:18:"UNKNOWN_BATCH_SIZE";i:0;s:10:"serializer";N;s:10:"batch_size";i:0;s:19:"END_OF_DATA_SECTION";i:-1;s:20:"PHP_EXCEPTION_THROWN";i:-2;s:11:"TIMING_DATA";i:-3;s:13:"END_OF_STREAM";i:-4;s:4:"NULL";i:-5;}s:18:"createCombinerFunc";C:32:"SuperClosure\SerializableClosure":135:{a:5:{s:4:"code";s:33:"function ($x) {
    return $x;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"mergeValueFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}s:18:"mergeCombinersFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}
here5
here7 array
here8  Array
socket_create()成功59716

socket_connect()成功
首次read_int()成功0
首次read_utf()成功5.6
here3C:32:"SuperClosure\SerializableClosure":1616:{a:5:{s:4:"code";s:67:"function ($split, $iterator) use($f) {
    return $f($iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":1392:{a:5:{s:4:"code";s:329:"function ($iterator) use($memory, $serializer, $createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc) {
    $agg = new \aggregator($createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc);
    $merger = new \ExternalMerger($agg, $memory, $serializer);
    $merger->mergeCombiners($iterator);
    return $merger->items();
};";s:7:"context";a:5:{s:6:"memory";i:512;s:10:"serializer";O:23:"auto_batched_serializer":10:{s:9:"best_size";i:65536;s:20:"UNLIMITED_BATCH_SIZE";i:-1;s:18:"UNKNOWN_BATCH_SIZE";i:0;s:10:"serializer";N;s:10:"batch_size";i:0;s:19:"END_OF_DATA_SECTION";i:-1;s:20:"PHP_EXCEPTION_THROWN";i:-2;s:11:"TIMING_DATA";i:-3;s:13:"END_OF_STREAM";i:-4;s:4:"NULL";i:-5;}s:18:"createCombinerFunc";C:32:"SuperClosure\SerializableClosure":135:{a:5:{s:4:"code";s:33:"function ($x) {
    return $x;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"mergeValueFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}s:18:"mergeCombinersFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}
here5
here7 array
here8  Array
socket_create()成功43474

socket_connect()成功
首次read_int()成功1
首次read_utf()成功5.6
here3C:32:"SuperClosure\SerializableClosure":6293:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":2133:{a:5:{s:4:"code";s:1679:"function ($iterator) use($numPartitions, $partitionFunc, $limit, $outputSerializer) {
    $buckets = array();
    $c = 0;
    $batch = min(10 * $numPartitions, 1000);
    file_put_contents('/home/gt/php_worker9.txt', 'here1 ' . gettype($iterator) . '
', FILE_APPEND);
    file_put_contents('/home/gt/php_worker9.txt', 'here1 ' . $iterator . '
', FILE_APPEND);
    foreach ($iterator as $element) {
        file_put_contents('/home/gt/php_worker9.txt', 'here1a ' . $element . '
', FILE_APPEND);
    }
    foreach ($iterator as $key => $value) {
        $buckets[$partitionFunc($key) % $numPartitions] = array();
        $buckets[$partitionFunc($key) % $numPartitions][$key] = $value;
        $c++;
        if ($c % 1000 == 0 && memory_get_usage() / 1024 / 1024 > $limit || $c > $batch) {
            $n = sizeof($buckets);
            $size = 0;
            $result = array();
            foreach ($buckets as $key2 => $value2) {
                #value是一个array
                array_push($result, serialize($key2));
                $d = serialize($value2);
                unset($value2);
                array_push($result, $d);
                $size += strlen($d);
            }
            $avg = intval($size / $n) >> 20;
            # let 1M < avg < 10M
            if ($avg < 1) {
                $batch *= 1.5;
            } elseif ($avg > 10) {
                $batch = max(intval($batch / 1.5), 1);
            }
            $c = 0;
            return $result;
        }
    }
    $result = array();
    foreach ($buckets as $key => $value) {
        array_push($result, serialize($key));
        array_push($result, serialize($value));
    }
    return $result;
};";s:7:"context";a:3:{s:13:"numPartitions";i:2;s:13:"partitionFunc";C:32:"SuperClosure\SerializableClosure":240:{a:5:{s:4:"code";s:137:"function ($x) {
    if ($x == null) {
        return 0;
    }
    $h = null;
    if (is_array($x)) {
    }
    return hash('md5', $x);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:5:"limit";i:256;}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":3796:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":1619:{a:5:{s:4:"code";s:67:"function ($split, $iterator) use($f) {
    return $f($iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":1395:{a:5:{s:4:"code";s:332:"function ($iterator) use($memory, $serializer, $createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc) {
    $agg = new \aggregator($createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc);
    $merger = new \ExternalMerger($agg, $memory * 0.9, $serializer);
    $merger->mergeValues($iterator);
    return $merger->items();
};";s:7:"context";a:5:{s:6:"memory";i:512;s:10:"serializer";O:23:"auto_batched_serializer":10:{s:9:"best_size";i:65536;s:20:"UNLIMITED_BATCH_SIZE";i:-1;s:18:"UNKNOWN_BATCH_SIZE";i:0;s:10:"serializer";N;s:10:"batch_size";i:0;s:19:"END_OF_DATA_SECTION";i:-1;s:20:"PHP_EXCEPTION_THROWN";i:-2;s:11:"TIMING_DATA";i:-3;s:13:"END_OF_STREAM";i:-4;s:4:"NULL";i:-5;}s:18:"createCombinerFunc";C:32:"SuperClosure\SerializableClosure":135:{a:5:{s:4:"code";s:33:"function ($x) {
    return $x;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"mergeValueFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}s:18:"mergeCombinersFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1813:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":369:{a:5:{s:4:"code";s:76:"function ($any, $iterator) use($f) {
    return array_map($f, $iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":137:{a:5:{s:4:"code";s:43:"function ($x) {
    return array($x, 1);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1081:{a:5:{s:4:"code";s:758:"function ($split, $iterator) use($f) {
    $sub_is_array = False;
    foreach ($iterator as $key => $value) {
        $temp = $f($value);
        if (is_array($temp)) {
            $sub_is_array = True;
            break;
        }
    }
    if ($sub_is_array) {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            if (is_array($temp)) {
                foreach ($temp as $e) {
                    array_push($result, $e);
                }
            }
        }
        return $result;
    } else {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            array_push($result, $temp);
        }
        return $result;
    }
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":166:{a:5:{s:4:"code";s:72:"function ($line) {
    $temp = explode(' ', $line);
    return $temp;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}
socket_create()成功43008

here5
here6do do do 
here7 array
here8  Array
socket_connect()成功
首次read_int()成功0
首次read_utf()成功5.6
here3C:32:"SuperClosure\SerializableClosure":6293:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":2133:{a:5:{s:4:"code";s:1679:"function ($iterator) use($numPartitions, $partitionFunc, $limit, $outputSerializer) {
    $buckets = array();
    $c = 0;
    $batch = min(10 * $numPartitions, 1000);
    file_put_contents('/home/gt/php_worker9.txt', 'here1 ' . gettype($iterator) . '
', FILE_APPEND);
    file_put_contents('/home/gt/php_worker9.txt', 'here1 ' . $iterator . '
', FILE_APPEND);
    foreach ($iterator as $element) {
        file_put_contents('/home/gt/php_worker9.txt', 'here1a ' . $element . '
', FILE_APPEND);
    }
    foreach ($iterator as $key => $value) {
        $buckets[$partitionFunc($key) % $numPartitions] = array();
        $buckets[$partitionFunc($key) % $numPartitions][$key] = $value;
        $c++;
        if ($c % 1000 == 0 && memory_get_usage() / 1024 / 1024 > $limit || $c > $batch) {
            $n = sizeof($buckets);
            $size = 0;
            $result = array();
            foreach ($buckets as $key2 => $value2) {
                #value是一个array
                array_push($result, serialize($key2));
                $d = serialize($value2);
                unset($value2);
                array_push($result, $d);
                $size += strlen($d);
            }
            $avg = intval($size / $n) >> 20;
            # let 1M < avg < 10M
            if ($avg < 1) {
                $batch *= 1.5;
            } elseif ($avg > 10) {
                $batch = max(intval($batch / 1.5), 1);
            }
            $c = 0;
            return $result;
        }
    }
    $result = array();
    foreach ($buckets as $key => $value) {
        array_push($result, serialize($key));
        array_push($result, serialize($value));
    }
    return $result;
};";s:7:"context";a:3:{s:13:"numPartitions";i:2;s:13:"partitionFunc";C:32:"SuperClosure\SerializableClosure":240:{a:5:{s:4:"code";s:137:"function ($x) {
    if ($x == null) {
        return 0;
    }
    $h = null;
    if (is_array($x)) {
    }
    return hash('md5', $x);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:5:"limit";i:256;}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":3796:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":1619:{a:5:{s:4:"code";s:67:"function ($split, $iterator) use($f) {
    return $f($iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":1395:{a:5:{s:4:"code";s:332:"function ($iterator) use($memory, $serializer, $createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc) {
    $agg = new \aggregator($createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc);
    $merger = new \ExternalMerger($agg, $memory * 0.9, $serializer);
    $merger->mergeValues($iterator);
    return $merger->items();
};";s:7:"context";a:5:{s:6:"memory";i:512;s:10:"serializer";O:23:"auto_batched_serializer":10:{s:9:"best_size";i:65536;s:20:"UNLIMITED_BATCH_SIZE";i:-1;s:18:"UNKNOWN_BATCH_SIZE";i:0;s:10:"serializer";N;s:10:"batch_size";i:0;s:19:"END_OF_DATA_SECTION";i:-1;s:20:"PHP_EXCEPTION_THROWN";i:-2;s:11:"TIMING_DATA";i:-3;s:13:"END_OF_STREAM";i:-4;s:4:"NULL";i:-5;}s:18:"createCombinerFunc";C:32:"SuperClosure\SerializableClosure":135:{a:5:{s:4:"code";s:33:"function ($x) {
    return $x;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"mergeValueFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}s:18:"mergeCombinersFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1813:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":369:{a:5:{s:4:"code";s:76:"function ($any, $iterator) use($f) {
    return array_map($f, $iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":137:{a:5:{s:4:"code";s:43:"function ($x) {
    return array($x, 1);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1081:{a:5:{s:4:"code";s:758:"function ($split, $iterator) use($f) {
    $sub_is_array = False;
    foreach ($iterator as $key => $value) {
        $temp = $f($value);
        if (is_array($temp)) {
            $sub_is_array = True;
            break;
        }
    }
    if ($sub_is_array) {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            if (is_array($temp)) {
                foreach ($temp as $e) {
                    array_push($result, $e);
                }
            }
        }
        return $result;
    } else {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            array_push($result, $temp);
        }
        return $result;
    }
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":166:{a:5:{s:4:"code";s:72:"function ($line) {
    $temp = explode(' ', $line);
    return $temp;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}
here5
here6test test test test try try try 
here7 array
here8  Array
socket_create()成功39994

socket_connect()成功
首次read_int()成功0
首次read_utf()成功5.6
here3C:32:"SuperClosure\SerializableClosure":1616:{a:5:{s:4:"code";s:67:"function ($split, $iterator) use($f) {
    return $f($iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":1392:{a:5:{s:4:"code";s:329:"function ($iterator) use($memory, $serializer, $createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc) {
    $agg = new \aggregator($createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc);
    $merger = new \ExternalMerger($agg, $memory, $serializer);
    $merger->mergeCombiners($iterator);
    return $merger->items();
};";s:7:"context";a:5:{s:6:"memory";i:512;s:10:"serializer";O:23:"auto_batched_serializer":10:{s:9:"best_size";i:65536;s:20:"UNLIMITED_BATCH_SIZE";i:-1;s:18:"UNKNOWN_BATCH_SIZE";i:0;s:10:"serializer";N;s:10:"batch_size";i:0;s:19:"END_OF_DATA_SECTION";i:-1;s:20:"PHP_EXCEPTION_THROWN";i:-2;s:11:"TIMING_DATA";i:-3;s:13:"END_OF_STREAM";i:-4;s:4:"NULL";i:-5;}s:18:"createCombinerFunc";C:32:"SuperClosure\SerializableClosure":135:{a:5:{s:4:"code";s:33:"function ($x) {
    return $x;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"mergeValueFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}s:18:"mergeCombinersFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}
here5
here7 array
here8  Array
socket_create()成功60157

socket_connect()成功
首次read_int()成功1
首次read_utf()成功5.6
here3C:32:"SuperClosure\SerializableClosure":1616:{a:5:{s:4:"code";s:67:"function ($split, $iterator) use($f) {
    return $f($iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":1392:{a:5:{s:4:"code";s:329:"function ($iterator) use($memory, $serializer, $createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc) {
    $agg = new \aggregator($createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc);
    $merger = new \ExternalMerger($agg, $memory, $serializer);
    $merger->mergeCombiners($iterator);
    return $merger->items();
};";s:7:"context";a:5:{s:6:"memory";i:512;s:10:"serializer";O:23:"auto_batched_serializer":10:{s:9:"best_size";i:65536;s:20:"UNLIMITED_BATCH_SIZE";i:-1;s:18:"UNKNOWN_BATCH_SIZE";i:0;s:10:"serializer";N;s:10:"batch_size";i:0;s:19:"END_OF_DATA_SECTION";i:-1;s:20:"PHP_EXCEPTION_THROWN";i:-2;s:11:"TIMING_DATA";i:-3;s:13:"END_OF_STREAM";i:-4;s:4:"NULL";i:-5;}s:18:"createCombinerFunc";C:32:"SuperClosure\SerializableClosure":135:{a:5:{s:4:"code";s:33:"function ($x) {
    return $x;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"mergeValueFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}s:18:"mergeCombinersFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}
here5
here7 array
here8  Array
socket_create()成功47739

socket_connect()成功
首次read_int()成功1
首次read_utf()成功5.6
socket_create()成功53548

socket_connect()成功
here3C:32:"SuperClosure\SerializableClosure":6301:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":2141:{a:5:{s:4:"code";s:1687:"function ($split, $iterator) use($numPartitions, $partitionFunc, $limit, $outputSerializer) {
    $buckets = array();
    $c = 0;
    $batch = min(10 * $numPartitions, 1000);
    file_put_contents('/home/gt/php_worker9.txt', 'here1 ' . gettype($iterator) . '
', FILE_APPEND);
    file_put_contents('/home/gt/php_worker9.txt', 'here1 ' . $iterator . '
', FILE_APPEND);
    foreach ($iterator as $element) {
        file_put_contents('/home/gt/php_worker9.txt', 'here1a ' . $element . '
', FILE_APPEND);
    }
    foreach ($iterator as $key => $value) {
        $buckets[$partitionFunc($key) % $numPartitions] = array();
        $buckets[$partitionFunc($key) % $numPartitions][$key] = $value;
        $c++;
        if ($c % 1000 == 0 && memory_get_usage() / 1024 / 1024 > $limit || $c > $batch) {
            $n = sizeof($buckets);
            $size = 0;
            $result = array();
            foreach ($buckets as $key2 => $value2) {
                #value是一个array
                array_push($result, serialize($key2));
                $d = serialize($value2);
                unset($value2);
                array_push($result, $d);
                $size += strlen($d);
            }
            $avg = intval($size / $n) >> 20;
            # let 1M < avg < 10M
            if ($avg < 1) {
                $batch *= 1.5;
            } elseif ($avg > 10) {
                $batch = max(intval($batch / 1.5), 1);
            }
            $c = 0;
            return $result;
        }
    }
    $result = array();
    foreach ($buckets as $key => $value) {
        array_push($result, serialize($key));
        array_push($result, serialize($value));
    }
    return $result;
};";s:7:"context";a:3:{s:13:"numPartitions";i:2;s:13:"partitionFunc";C:32:"SuperClosure\SerializableClosure":240:{a:5:{s:4:"code";s:137:"function ($x) {
    if ($x == null) {
        return 0;
    }
    $h = null;
    if (is_array($x)) {
    }
    return hash('md5', $x);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:5:"limit";i:256;}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":3796:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":1619:{a:5:{s:4:"code";s:67:"function ($split, $iterator) use($f) {
    return $f($iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":1395:{a:5:{s:4:"code";s:332:"function ($iterator) use($memory, $serializer, $createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc) {
    $agg = new \aggregator($createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc);
    $merger = new \ExternalMerger($agg, $memory * 0.9, $serializer);
    $merger->mergeValues($iterator);
    return $merger->items();
};";s:7:"context";a:5:{s:6:"memory";i:512;s:10:"serializer";O:23:"auto_batched_serializer":10:{s:9:"best_size";i:65536;s:20:"UNLIMITED_BATCH_SIZE";i:-1;s:18:"UNKNOWN_BATCH_SIZE";i:0;s:10:"serializer";N;s:10:"batch_size";i:0;s:19:"END_OF_DATA_SECTION";i:-1;s:20:"PHP_EXCEPTION_THROWN";i:-2;s:11:"TIMING_DATA";i:-3;s:13:"END_OF_STREAM";i:-4;s:4:"NULL";i:-5;}s:18:"createCombinerFunc";C:32:"SuperClosure\SerializableClosure":135:{a:5:{s:4:"code";s:33:"function ($x) {
    return $x;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"mergeValueFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}s:18:"mergeCombinersFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1813:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":369:{a:5:{s:4:"code";s:76:"function ($any, $iterator) use($f) {
    return array_map($f, $iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":137:{a:5:{s:4:"code";s:43:"function ($x) {
    return array($x, 1);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1081:{a:5:{s:4:"code";s:758:"function ($split, $iterator) use($f) {
    $sub_is_array = False;
    foreach ($iterator as $key => $value) {
        $temp = $f($value);
        if (is_array($temp)) {
            $sub_is_array = True;
            break;
        }
    }
    if ($sub_is_array) {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            if (is_array($temp)) {
                foreach ($temp as $e) {
                    array_push($result, $e);
                }
            }
        }
        return $result;
    } else {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            array_push($result, $temp);
        }
        return $result;
    }
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":166:{a:5:{s:4:"code";s:72:"function ($line) {
    $temp = explode(' ', $line);
    return $temp;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}
here5
here6do do do 
here7 array
here7a string
here7a string
here8  Array
首次read_int()成功0
首次read_utf()成功5.6
here3C:32:"SuperClosure\SerializableClosure":6301:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":2141:{a:5:{s:4:"code";s:1687:"function ($split, $iterator) use($numPartitions, $partitionFunc, $limit, $outputSerializer) {
    $buckets = array();
    $c = 0;
    $batch = min(10 * $numPartitions, 1000);
    file_put_contents('/home/gt/php_worker9.txt', 'here1 ' . gettype($iterator) . '
', FILE_APPEND);
    file_put_contents('/home/gt/php_worker9.txt', 'here1 ' . $iterator . '
', FILE_APPEND);
    foreach ($iterator as $element) {
        file_put_contents('/home/gt/php_worker9.txt', 'here1a ' . $element . '
', FILE_APPEND);
    }
    foreach ($iterator as $key => $value) {
        $buckets[$partitionFunc($key) % $numPartitions] = array();
        $buckets[$partitionFunc($key) % $numPartitions][$key] = $value;
        $c++;
        if ($c % 1000 == 0 && memory_get_usage() / 1024 / 1024 > $limit || $c > $batch) {
            $n = sizeof($buckets);
            $size = 0;
            $result = array();
            foreach ($buckets as $key2 => $value2) {
                #value是一个array
                array_push($result, serialize($key2));
                $d = serialize($value2);
                unset($value2);
                array_push($result, $d);
                $size += strlen($d);
            }
            $avg = intval($size / $n) >> 20;
            # let 1M < avg < 10M
            if ($avg < 1) {
                $batch *= 1.5;
            } elseif ($avg > 10) {
                $batch = max(intval($batch / 1.5), 1);
            }
            $c = 0;
            return $result;
        }
    }
    $result = array();
    foreach ($buckets as $key => $value) {
        array_push($result, serialize($key));
        array_push($result, serialize($value));
    }
    return $result;
};";s:7:"context";a:3:{s:13:"numPartitions";i:2;s:13:"partitionFunc";C:32:"SuperClosure\SerializableClosure":240:{a:5:{s:4:"code";s:137:"function ($x) {
    if ($x == null) {
        return 0;
    }
    $h = null;
    if (is_array($x)) {
    }
    return hash('md5', $x);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:5:"limit";i:256;}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":3796:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":1619:{a:5:{s:4:"code";s:67:"function ($split, $iterator) use($f) {
    return $f($iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":1395:{a:5:{s:4:"code";s:332:"function ($iterator) use($memory, $serializer, $createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc) {
    $agg = new \aggregator($createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc);
    $merger = new \ExternalMerger($agg, $memory * 0.9, $serializer);
    $merger->mergeValues($iterator);
    return $merger->items();
};";s:7:"context";a:5:{s:6:"memory";i:512;s:10:"serializer";O:23:"auto_batched_serializer":10:{s:9:"best_size";i:65536;s:20:"UNLIMITED_BATCH_SIZE";i:-1;s:18:"UNKNOWN_BATCH_SIZE";i:0;s:10:"serializer";N;s:10:"batch_size";i:0;s:19:"END_OF_DATA_SECTION";i:-1;s:20:"PHP_EXCEPTION_THROWN";i:-2;s:11:"TIMING_DATA";i:-3;s:13:"END_OF_STREAM";i:-4;s:4:"NULL";i:-5;}s:18:"createCombinerFunc";C:32:"SuperClosure\SerializableClosure":135:{a:5:{s:4:"code";s:33:"function ($x) {
    return $x;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"mergeValueFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}s:18:"mergeCombinersFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1813:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":369:{a:5:{s:4:"code";s:76:"function ($any, $iterator) use($f) {
    return array_map($f, $iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":137:{a:5:{s:4:"code";s:43:"function ($x) {
    return array($x, 1);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1081:{a:5:{s:4:"code";s:758:"function ($split, $iterator) use($f) {
    $sub_is_array = False;
    foreach ($iterator as $key => $value) {
        $temp = $f($value);
        if (is_array($temp)) {
            $sub_is_array = True;
            break;
        }
    }
    if ($sub_is_array) {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            if (is_array($temp)) {
                foreach ($temp as $e) {
                    array_push($result, $e);
                }
            }
        }
        return $result;
    } else {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            array_push($result, $temp);
        }
        return $result;
    }
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":166:{a:5:{s:4:"code";s:72:"function ($line) {
    $temp = explode(' ', $line);
    return $temp;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}
here5
here6test test test test try try try 
here7 array
here7a string
here7a string
here8  Array
socket_create()成功53108

socket_connect()成功
首次read_int()成功0
首次read_utf()成功5.6
here3C:32:"SuperClosure\SerializableClosure":6301:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":2141:{a:5:{s:4:"code";s:1687:"function ($split, $iterator) use($numPartitions, $partitionFunc, $limit, $outputSerializer) {
    $buckets = array();
    $c = 0;
    $batch = min(10 * $numPartitions, 1000);
    file_put_contents('/home/gt/php_worker9.txt', 'here1 ' . gettype($iterator) . '
', FILE_APPEND);
    file_put_contents('/home/gt/php_worker9.txt', 'here1 ' . $iterator . '
', FILE_APPEND);
    foreach ($iterator as $element) {
        file_put_contents('/home/gt/php_worker9.txt', 'here1a ' . $element . '
', FILE_APPEND);
    }
    foreach ($iterator as $key => $value) {
        $buckets[$partitionFunc($key) % $numPartitions] = array();
        $buckets[$partitionFunc($key) % $numPartitions][$key] = $value;
        $c++;
        if ($c % 1000 == 0 && memory_get_usage() / 1024 / 1024 > $limit || $c > $batch) {
            $n = sizeof($buckets);
            $size = 0;
            $result = array();
            foreach ($buckets as $key2 => $value2) {
                #value是一个array
                array_push($result, serialize($key2));
                $d = serialize($value2);
                unset($value2);
                array_push($result, $d);
                $size += strlen($d);
            }
            $avg = intval($size / $n) >> 20;
            # let 1M < avg < 10M
            if ($avg < 1) {
                $batch *= 1.5;
            } elseif ($avg > 10) {
                $batch = max(intval($batch / 1.5), 1);
            }
            $c = 0;
            return $result;
        }
    }
    $result = array();
    foreach ($buckets as $key => $value) {
        array_push($result, serialize($key));
        array_push($result, serialize($value));
    }
    return $result;
};";s:7:"context";a:3:{s:13:"numPartitions";i:2;s:13:"partitionFunc";C:32:"SuperClosure\SerializableClosure":240:{a:5:{s:4:"code";s:137:"function ($x) {
    if ($x == null) {
        return 0;
    }
    $h = null;
    if (is_array($x)) {
    }
    return hash('md5', $x);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:5:"limit";i:256;}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":3796:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":1619:{a:5:{s:4:"code";s:67:"function ($split, $iterator) use($f) {
    return $f($iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":1395:{a:5:{s:4:"code";s:332:"function ($iterator) use($memory, $serializer, $createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc) {
    $agg = new \aggregator($createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc);
    $merger = new \ExternalMerger($agg, $memory * 0.9, $serializer);
    $merger->mergeValues($iterator);
    return $merger->items();
};";s:7:"context";a:5:{s:6:"memory";i:512;s:10:"serializer";O:23:"auto_batched_serializer":10:{s:9:"best_size";i:65536;s:20:"UNLIMITED_BATCH_SIZE";i:-1;s:18:"UNKNOWN_BATCH_SIZE";i:0;s:10:"serializer";N;s:10:"batch_size";i:0;s:19:"END_OF_DATA_SECTION";i:-1;s:20:"PHP_EXCEPTION_THROWN";i:-2;s:11:"TIMING_DATA";i:-3;s:13:"END_OF_STREAM";i:-4;s:4:"NULL";i:-5;}s:18:"createCombinerFunc";C:32:"SuperClosure\SerializableClosure":135:{a:5:{s:4:"code";s:33:"function ($x) {
    return $x;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"mergeValueFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}s:18:"mergeCombinersFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1813:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":369:{a:5:{s:4:"code";s:76:"function ($any, $iterator) use($f) {
    return array_map($f, $iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":137:{a:5:{s:4:"code";s:43:"function ($x) {
    return array($x, 1);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1081:{a:5:{s:4:"code";s:758:"function ($split, $iterator) use($f) {
    $sub_is_array = False;
    foreach ($iterator as $key => $value) {
        $temp = $f($value);
        if (is_array($temp)) {
            $sub_is_array = True;
            break;
        }
    }
    if ($sub_is_array) {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            if (is_array($temp)) {
                foreach ($temp as $e) {
                    array_push($result, $e);
                }
            }
        }
        return $result;
    } else {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            array_push($result, $temp);
        }
        return $result;
    }
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":166:{a:5:{s:4:"code";s:72:"function ($line) {
    $temp = explode(' ', $line);
    return $temp;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}
here5
here6test test test test try try try 
here7 array
here7a string
here7a string
here8  Array
socket_create()成功53601

socket_connect()成功
首次read_int()成功1
首次read_utf()成功5.6
here3C:32:"SuperClosure\SerializableClosure":6301:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":2141:{a:5:{s:4:"code";s:1687:"function ($split, $iterator) use($numPartitions, $partitionFunc, $limit, $outputSerializer) {
    $buckets = array();
    $c = 0;
    $batch = min(10 * $numPartitions, 1000);
    file_put_contents('/home/gt/php_worker9.txt', 'here1 ' . gettype($iterator) . '
', FILE_APPEND);
    file_put_contents('/home/gt/php_worker9.txt', 'here1 ' . $iterator . '
', FILE_APPEND);
    foreach ($iterator as $element) {
        file_put_contents('/home/gt/php_worker9.txt', 'here1a ' . $element . '
', FILE_APPEND);
    }
    foreach ($iterator as $key => $value) {
        $buckets[$partitionFunc($key) % $numPartitions] = array();
        $buckets[$partitionFunc($key) % $numPartitions][$key] = $value;
        $c++;
        if ($c % 1000 == 0 && memory_get_usage() / 1024 / 1024 > $limit || $c > $batch) {
            $n = sizeof($buckets);
            $size = 0;
            $result = array();
            foreach ($buckets as $key2 => $value2) {
                #value是一个array
                array_push($result, serialize($key2));
                $d = serialize($value2);
                unset($value2);
                array_push($result, $d);
                $size += strlen($d);
            }
            $avg = intval($size / $n) >> 20;
            # let 1M < avg < 10M
            if ($avg < 1) {
                $batch *= 1.5;
            } elseif ($avg > 10) {
                $batch = max(intval($batch / 1.5), 1);
            }
            $c = 0;
            return $result;
        }
    }
    $result = array();
    foreach ($buckets as $key => $value) {
        array_push($result, serialize($key));
        array_push($result, serialize($value));
    }
    return $result;
};";s:7:"context";a:3:{s:13:"numPartitions";i:2;s:13:"partitionFunc";C:32:"SuperClosure\SerializableClosure":240:{a:5:{s:4:"code";s:137:"function ($x) {
    if ($x == null) {
        return 0;
    }
    $h = null;
    if (is_array($x)) {
    }
    return hash('md5', $x);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:5:"limit";i:256;}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":3796:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":1619:{a:5:{s:4:"code";s:67:"function ($split, $iterator) use($f) {
    return $f($iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":1395:{a:5:{s:4:"code";s:332:"function ($iterator) use($memory, $serializer, $createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc) {
    $agg = new \aggregator($createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc);
    $merger = new \ExternalMerger($agg, $memory * 0.9, $serializer);
    $merger->mergeValues($iterator);
    return $merger->items();
};";s:7:"context";a:5:{s:6:"memory";i:512;s:10:"serializer";O:23:"auto_batched_serializer":10:{s:9:"best_size";i:65536;s:20:"UNLIMITED_BATCH_SIZE";i:-1;s:18:"UNKNOWN_BATCH_SIZE";i:0;s:10:"serializer";N;s:10:"batch_size";i:0;s:19:"END_OF_DATA_SECTION";i:-1;s:20:"PHP_EXCEPTION_THROWN";i:-2;s:11:"TIMING_DATA";i:-3;s:13:"END_OF_STREAM";i:-4;s:4:"NULL";i:-5;}s:18:"createCombinerFunc";C:32:"SuperClosure\SerializableClosure":135:{a:5:{s:4:"code";s:33:"function ($x) {
    return $x;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"mergeValueFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}s:18:"mergeCombinersFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1813:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":369:{a:5:{s:4:"code";s:76:"function ($any, $iterator) use($f) {
    return array_map($f, $iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":137:{a:5:{s:4:"code";s:43:"function ($x) {
    return array($x, 1);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1081:{a:5:{s:4:"code";s:758:"function ($split, $iterator) use($f) {
    $sub_is_array = False;
    foreach ($iterator as $key => $value) {
        $temp = $f($value);
        if (is_array($temp)) {
            $sub_is_array = True;
            break;
        }
    }
    if ($sub_is_array) {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            if (is_array($temp)) {
                foreach ($temp as $e) {
                    array_push($result, $e);
                }
            }
        }
        return $result;
    } else {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            array_push($result, $temp);
        }
        return $result;
    }
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":166:{a:5:{s:4:"code";s:72:"function ($line) {
    $temp = explode(' ', $line);
    return $temp;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}
here5
here6do do do 
here7 array
here7a string
here7a string
here8  Array
socket_create()成功39776

socket_connect()成功
首次read_int()成功0
首次read_utf()成功5.6
here3C:32:"SuperClosure\SerializableClosure":6301:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":2141:{a:5:{s:4:"code";s:1687:"function ($split, $iterator) use($numPartitions, $partitionFunc, $limit, $outputSerializer) {
    $buckets = array();
    $c = 0;
    $batch = min(10 * $numPartitions, 1000);
    file_put_contents('/home/gt/php_worker9.txt', 'here1 ' . gettype($iterator) . '
', FILE_APPEND);
    file_put_contents('/home/gt/php_worker9.txt', 'here1 ' . $iterator . '
', FILE_APPEND);
    foreach ($iterator as $element) {
        file_put_contents('/home/gt/php_worker9.txt', 'here1a ' . $element . '
', FILE_APPEND);
    }
    foreach ($iterator as $key => $value) {
        $buckets[$partitionFunc($key) % $numPartitions] = array();
        $buckets[$partitionFunc($key) % $numPartitions][$key] = $value;
        $c++;
        if ($c % 1000 == 0 && memory_get_usage() / 1024 / 1024 > $limit || $c > $batch) {
            $n = sizeof($buckets);
            $size = 0;
            $result = array();
            foreach ($buckets as $key2 => $value2) {
                #value是一个array
                array_push($result, serialize($key2));
                $d = serialize($value2);
                unset($value2);
                array_push($result, $d);
                $size += strlen($d);
            }
            $avg = intval($size / $n) >> 20;
            # let 1M < avg < 10M
            if ($avg < 1) {
                $batch *= 1.5;
            } elseif ($avg > 10) {
                $batch = max(intval($batch / 1.5), 1);
            }
            $c = 0;
            return $result;
        }
    }
    $result = array();
    foreach ($buckets as $key => $value) {
        array_push($result, serialize($key));
        array_push($result, serialize($value));
    }
    return $result;
};";s:7:"context";a:3:{s:13:"numPartitions";i:2;s:13:"partitionFunc";C:32:"SuperClosure\SerializableClosure":240:{a:5:{s:4:"code";s:137:"function ($x) {
    if ($x == null) {
        return 0;
    }
    $h = null;
    if (is_array($x)) {
    }
    return hash('md5', $x);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:5:"limit";i:256;}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":3796:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":1619:{a:5:{s:4:"code";s:67:"function ($split, $iterator) use($f) {
    return $f($iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":1395:{a:5:{s:4:"code";s:332:"function ($iterator) use($memory, $serializer, $createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc) {
    $agg = new \aggregator($createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc);
    $merger = new \ExternalMerger($agg, $memory * 0.9, $serializer);
    $merger->mergeValues($iterator);
    return $merger->items();
};";s:7:"context";a:5:{s:6:"memory";i:512;s:10:"serializer";O:23:"auto_batched_serializer":10:{s:9:"best_size";i:65536;s:20:"UNLIMITED_BATCH_SIZE";i:-1;s:18:"UNKNOWN_BATCH_SIZE";i:0;s:10:"serializer";N;s:10:"batch_size";i:0;s:19:"END_OF_DATA_SECTION";i:-1;s:20:"PHP_EXCEPTION_THROWN";i:-2;s:11:"TIMING_DATA";i:-3;s:13:"END_OF_STREAM";i:-4;s:4:"NULL";i:-5;}s:18:"createCombinerFunc";C:32:"SuperClosure\SerializableClosure":135:{a:5:{s:4:"code";s:33:"function ($x) {
    return $x;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"mergeValueFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}s:18:"mergeCombinersFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1813:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":369:{a:5:{s:4:"code";s:76:"function ($any, $iterator) use($f) {
    return array_map($f, $iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":137:{a:5:{s:4:"code";s:43:"function ($x) {
    return array($x, 1);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1081:{a:5:{s:4:"code";s:758:"function ($split, $iterator) use($f) {
    $sub_is_array = False;
    foreach ($iterator as $key => $value) {
        $temp = $f($value);
        if (is_array($temp)) {
            $sub_is_array = True;
            break;
        }
    }
    if ($sub_is_array) {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            if (is_array($temp)) {
                foreach ($temp as $e) {
                    array_push($result, $e);
                }
            }
        }
        return $result;
    } else {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            array_push($result, $temp);
        }
        return $result;
    }
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":166:{a:5:{s:4:"code";s:72:"function ($line) {
    $temp = explode(' ', $line);
    return $temp;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}
here5
here6test test test test try try try 
here7 array
here7a string
here7a string
here8  Array
socket_create()成功35213

socket_connect()成功
首次read_int()成功1
首次read_utf()成功5.6
here3C:32:"SuperClosure\SerializableClosure":6301:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":2141:{a:5:{s:4:"code";s:1687:"function ($split, $iterator) use($numPartitions, $partitionFunc, $limit, $outputSerializer) {
    $buckets = array();
    $c = 0;
    $batch = min(10 * $numPartitions, 1000);
    file_put_contents('/home/gt/php_worker9.txt', 'here1 ' . gettype($iterator) . '
', FILE_APPEND);
    file_put_contents('/home/gt/php_worker9.txt', 'here1 ' . $iterator . '
', FILE_APPEND);
    foreach ($iterator as $element) {
        file_put_contents('/home/gt/php_worker9.txt', 'here1a ' . $element . '
', FILE_APPEND);
    }
    foreach ($iterator as $key => $value) {
        $buckets[$partitionFunc($key) % $numPartitions] = array();
        $buckets[$partitionFunc($key) % $numPartitions][$key] = $value;
        $c++;
        if ($c % 1000 == 0 && memory_get_usage() / 1024 / 1024 > $limit || $c > $batch) {
            $n = sizeof($buckets);
            $size = 0;
            $result = array();
            foreach ($buckets as $key2 => $value2) {
                #value是一个array
                array_push($result, serialize($key2));
                $d = serialize($value2);
                unset($value2);
                array_push($result, $d);
                $size += strlen($d);
            }
            $avg = intval($size / $n) >> 20;
            # let 1M < avg < 10M
            if ($avg < 1) {
                $batch *= 1.5;
            } elseif ($avg > 10) {
                $batch = max(intval($batch / 1.5), 1);
            }
            $c = 0;
            return $result;
        }
    }
    $result = array();
    foreach ($buckets as $key => $value) {
        array_push($result, serialize($key));
        array_push($result, serialize($value));
    }
    return $result;
};";s:7:"context";a:3:{s:13:"numPartitions";i:2;s:13:"partitionFunc";C:32:"SuperClosure\SerializableClosure":240:{a:5:{s:4:"code";s:137:"function ($x) {
    if ($x == null) {
        return 0;
    }
    $h = null;
    if (is_array($x)) {
    }
    return hash('md5', $x);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:5:"limit";i:256;}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":3796:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":1619:{a:5:{s:4:"code";s:67:"function ($split, $iterator) use($f) {
    return $f($iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":1395:{a:5:{s:4:"code";s:332:"function ($iterator) use($memory, $serializer, $createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc) {
    $agg = new \aggregator($createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc);
    $merger = new \ExternalMerger($agg, $memory * 0.9, $serializer);
    $merger->mergeValues($iterator);
    return $merger->items();
};";s:7:"context";a:5:{s:6:"memory";i:512;s:10:"serializer";O:23:"auto_batched_serializer":10:{s:9:"best_size";i:65536;s:20:"UNLIMITED_BATCH_SIZE";i:-1;s:18:"UNKNOWN_BATCH_SIZE";i:0;s:10:"serializer";N;s:10:"batch_size";i:0;s:19:"END_OF_DATA_SECTION";i:-1;s:20:"PHP_EXCEPTION_THROWN";i:-2;s:11:"TIMING_DATA";i:-3;s:13:"END_OF_STREAM";i:-4;s:4:"NULL";i:-5;}s:18:"createCombinerFunc";C:32:"SuperClosure\SerializableClosure":135:{a:5:{s:4:"code";s:33:"function ($x) {
    return $x;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"mergeValueFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}s:18:"mergeCombinersFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1813:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":369:{a:5:{s:4:"code";s:76:"function ($any, $iterator) use($f) {
    return array_map($f, $iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":137:{a:5:{s:4:"code";s:43:"function ($x) {
    return array($x, 1);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1081:{a:5:{s:4:"code";s:758:"function ($split, $iterator) use($f) {
    $sub_is_array = False;
    foreach ($iterator as $key => $value) {
        $temp = $f($value);
        if (is_array($temp)) {
            $sub_is_array = True;
            break;
        }
    }
    if ($sub_is_array) {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            if (is_array($temp)) {
                foreach ($temp as $e) {
                    array_push($result, $e);
                }
            }
        }
        return $result;
    } else {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            array_push($result, $temp);
        }
        return $result;
    }
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":166:{a:5:{s:4:"code";s:72:"function ($line) {
    $temp = explode(' ', $line);
    return $temp;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}
here5
here6do do do 
here7 array
here7a string
here7a string
here8  Array
socket_create()成功48577

socket_connect()成功
首次read_int()成功0
首次read_utf()成功5.6
here3C:32:"SuperClosure\SerializableClosure":6301:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":2141:{a:5:{s:4:"code";s:1687:"function ($split, $iterator) use($numPartitions, $partitionFunc, $limit, $outputSerializer) {
    $buckets = array();
    $c = 0;
    $batch = min(10 * $numPartitions, 1000);
    file_put_contents('/home/gt/php_worker9.txt', 'here1 ' . gettype($iterator) . '
', FILE_APPEND);
    file_put_contents('/home/gt/php_worker9.txt', 'here1 ' . $iterator . '
', FILE_APPEND);
    foreach ($iterator as $element) {
        file_put_contents('/home/gt/php_worker9.txt', 'here1a ' . $element . '
', FILE_APPEND);
    }
    foreach ($iterator as $key => $value) {
        $buckets[$partitionFunc($key) % $numPartitions] = array();
        $buckets[$partitionFunc($key) % $numPartitions][$key] = $value;
        $c++;
        if ($c % 1000 == 0 && memory_get_usage() / 1024 / 1024 > $limit || $c > $batch) {
            $n = sizeof($buckets);
            $size = 0;
            $result = array();
            foreach ($buckets as $key2 => $value2) {
                #value是一个array
                array_push($result, serialize($key2));
                $d = serialize($value2);
                unset($value2);
                array_push($result, $d);
                $size += strlen($d);
            }
            $avg = intval($size / $n) >> 20;
            # let 1M < avg < 10M
            if ($avg < 1) {
                $batch *= 1.5;
            } elseif ($avg > 10) {
                $batch = max(intval($batch / 1.5), 1);
            }
            $c = 0;
            return $result;
        }
    }
    $result = array();
    foreach ($buckets as $key => $value) {
        array_push($result, serialize($key));
        array_push($result, serialize($value));
    }
    return $result;
};";s:7:"context";a:3:{s:13:"numPartitions";i:2;s:13:"partitionFunc";C:32:"SuperClosure\SerializableClosure":240:{a:5:{s:4:"code";s:137:"function ($x) {
    if ($x == null) {
        return 0;
    }
    $h = null;
    if (is_array($x)) {
    }
    return hash('md5', $x);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:5:"limit";i:256;}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":3796:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":1619:{a:5:{s:4:"code";s:67:"function ($split, $iterator) use($f) {
    return $f($iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":1395:{a:5:{s:4:"code";s:332:"function ($iterator) use($memory, $serializer, $createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc) {
    $agg = new \aggregator($createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc);
    $merger = new \ExternalMerger($agg, $memory * 0.9, $serializer);
    $merger->mergeValues($iterator);
    return $merger->items();
};";s:7:"context";a:5:{s:6:"memory";i:512;s:10:"serializer";O:23:"auto_batched_serializer":10:{s:9:"best_size";i:65536;s:20:"UNLIMITED_BATCH_SIZE";i:-1;s:18:"UNKNOWN_BATCH_SIZE";i:0;s:10:"serializer";N;s:10:"batch_size";i:0;s:19:"END_OF_DATA_SECTION";i:-1;s:20:"PHP_EXCEPTION_THROWN";i:-2;s:11:"TIMING_DATA";i:-3;s:13:"END_OF_STREAM";i:-4;s:4:"NULL";i:-5;}s:18:"createCombinerFunc";C:32:"SuperClosure\SerializableClosure":135:{a:5:{s:4:"code";s:33:"function ($x) {
    return $x;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"mergeValueFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}s:18:"mergeCombinersFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1813:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":369:{a:5:{s:4:"code";s:76:"function ($any, $iterator) use($f) {
    return array_map($f, $iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":137:{a:5:{s:4:"code";s:43:"function ($x) {
    return array($x, 1);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1081:{a:5:{s:4:"code";s:758:"function ($split, $iterator) use($f) {
    $sub_is_array = False;
    foreach ($iterator as $key => $value) {
        $temp = $f($value);
        if (is_array($temp)) {
            $sub_is_array = True;
            break;
        }
    }
    if ($sub_is_array) {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            if (is_array($temp)) {
                foreach ($temp as $e) {
                    array_push($result, $e);
                }
            }
        }
        return $result;
    } else {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            array_push($result, $temp);
        }
        return $result;
    }
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":166:{a:5:{s:4:"code";s:72:"function ($line) {
    $temp = explode(' ', $line);
    return $temp;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}
here5
here6test test test test try try try 
here7 array
here7a string
here7a string
here8  Array
socket_create()成功41965

socket_connect()成功
首次read_int()成功1
首次read_utf()成功5.6
socket_create()成功52050

socket_connect()成功
首次read_int()成功0
首次read_utf()成功5.6
here3C:32:"SuperClosure\SerializableClosure":6129:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":1969:{a:5:{s:4:"code";s:1515:"function ($split, $iterator) use($numPartitions, $partitionFunc, $limit, $outputSerializer) {
    $buckets = array();
    $c = 0;
    $batch = min(10 * $numPartitions, 1000);
    foreach ($iterator as $key => $element) {
        file_put_contents('/home/gt/php_worker9.txt', 'here1a ' . $key . ' ' . $element . '
', FILE_APPEND);
    }
    foreach ($iterator as $key => $value) {
        $buckets[$partitionFunc($key) % $numPartitions] = array();
        $buckets[$partitionFunc($key) % $numPartitions][$key] = $value;
        $c++;
        if ($c % 1000 == 0 && memory_get_usage() / 1024 / 1024 > $limit || $c > $batch) {
            $n = sizeof($buckets);
            $size = 0;
            $result = array();
            foreach ($buckets as $key2 => $value2) {
                #value是一个array
                array_push($result, serialize($key2));
                $d = serialize($value2);
                unset($value2);
                array_push($result, $d);
                $size += strlen($d);
            }
            $avg = intval($size / $n) >> 20;
            # let 1M < avg < 10M
            if ($avg < 1) {
                $batch *= 1.5;
            } elseif ($avg > 10) {
                $batch = max(intval($batch / 1.5), 1);
            }
            $c = 0;
            return $result;
        }
    }
    $result = array();
    foreach ($buckets as $key => $value) {
        array_push($result, serialize($key));
        array_push($result, serialize($value));
    }
    return $result;
};";s:7:"context";a:3:{s:13:"numPartitions";i:2;s:13:"partitionFunc";C:32:"SuperClosure\SerializableClosure":240:{a:5:{s:4:"code";s:137:"function ($x) {
    if ($x == null) {
        return 0;
    }
    $h = null;
    if (is_array($x)) {
    }
    return hash('md5', $x);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:5:"limit";i:256;}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":3796:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":1619:{a:5:{s:4:"code";s:67:"function ($split, $iterator) use($f) {
    return $f($iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":1395:{a:5:{s:4:"code";s:332:"function ($iterator) use($memory, $serializer, $createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc) {
    $agg = new \aggregator($createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc);
    $merger = new \ExternalMerger($agg, $memory * 0.9, $serializer);
    $merger->mergeValues($iterator);
    return $merger->items();
};";s:7:"context";a:5:{s:6:"memory";i:512;s:10:"serializer";O:23:"auto_batched_serializer":10:{s:9:"best_size";i:65536;s:20:"UNLIMITED_BATCH_SIZE";i:-1;s:18:"UNKNOWN_BATCH_SIZE";i:0;s:10:"serializer";N;s:10:"batch_size";i:0;s:19:"END_OF_DATA_SECTION";i:-1;s:20:"PHP_EXCEPTION_THROWN";i:-2;s:11:"TIMING_DATA";i:-3;s:13:"END_OF_STREAM";i:-4;s:4:"NULL";i:-5;}s:18:"createCombinerFunc";C:32:"SuperClosure\SerializableClosure":135:{a:5:{s:4:"code";s:33:"function ($x) {
    return $x;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"mergeValueFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}s:18:"mergeCombinersFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1813:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":369:{a:5:{s:4:"code";s:76:"function ($any, $iterator) use($f) {
    return array_map($f, $iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":137:{a:5:{s:4:"code";s:43:"function ($x) {
    return array($x, 1);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1081:{a:5:{s:4:"code";s:758:"function ($split, $iterator) use($f) {
    $sub_is_array = False;
    foreach ($iterator as $key => $value) {
        $temp = $f($value);
        if (is_array($temp)) {
            $sub_is_array = True;
            break;
        }
    }
    if ($sub_is_array) {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            if (is_array($temp)) {
                foreach ($temp as $e) {
                    array_push($result, $e);
                }
            }
        }
        return $result;
    } else {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            array_push($result, $temp);
        }
        return $result;
    }
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":166:{a:5:{s:4:"code";s:72:"function ($line) {
    $temp = explode(' ', $line);
    return $temp;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}
here5
here6test test test test try try try 
here7 array
here7a string
here7a string
here8  Array
socket_create()成功55939

socket_connect()成功
首次read_int()成功1
首次read_utf()成功5.6
here3C:32:"SuperClosure\SerializableClosure":6129:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":1969:{a:5:{s:4:"code";s:1515:"function ($split, $iterator) use($numPartitions, $partitionFunc, $limit, $outputSerializer) {
    $buckets = array();
    $c = 0;
    $batch = min(10 * $numPartitions, 1000);
    foreach ($iterator as $key => $element) {
        file_put_contents('/home/gt/php_worker9.txt', 'here1a ' . $key . ' ' . $element . '
', FILE_APPEND);
    }
    foreach ($iterator as $key => $value) {
        $buckets[$partitionFunc($key) % $numPartitions] = array();
        $buckets[$partitionFunc($key) % $numPartitions][$key] = $value;
        $c++;
        if ($c % 1000 == 0 && memory_get_usage() / 1024 / 1024 > $limit || $c > $batch) {
            $n = sizeof($buckets);
            $size = 0;
            $result = array();
            foreach ($buckets as $key2 => $value2) {
                #value是一个array
                array_push($result, serialize($key2));
                $d = serialize($value2);
                unset($value2);
                array_push($result, $d);
                $size += strlen($d);
            }
            $avg = intval($size / $n) >> 20;
            # let 1M < avg < 10M
            if ($avg < 1) {
                $batch *= 1.5;
            } elseif ($avg > 10) {
                $batch = max(intval($batch / 1.5), 1);
            }
            $c = 0;
            return $result;
        }
    }
    $result = array();
    foreach ($buckets as $key => $value) {
        array_push($result, serialize($key));
        array_push($result, serialize($value));
    }
    return $result;
};";s:7:"context";a:3:{s:13:"numPartitions";i:2;s:13:"partitionFunc";C:32:"SuperClosure\SerializableClosure":240:{a:5:{s:4:"code";s:137:"function ($x) {
    if ($x == null) {
        return 0;
    }
    $h = null;
    if (is_array($x)) {
    }
    return hash('md5', $x);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:5:"limit";i:256;}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":3796:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":1619:{a:5:{s:4:"code";s:67:"function ($split, $iterator) use($f) {
    return $f($iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":1395:{a:5:{s:4:"code";s:332:"function ($iterator) use($memory, $serializer, $createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc) {
    $agg = new \aggregator($createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc);
    $merger = new \ExternalMerger($agg, $memory * 0.9, $serializer);
    $merger->mergeValues($iterator);
    return $merger->items();
};";s:7:"context";a:5:{s:6:"memory";i:512;s:10:"serializer";O:23:"auto_batched_serializer":10:{s:9:"best_size";i:65536;s:20:"UNLIMITED_BATCH_SIZE";i:-1;s:18:"UNKNOWN_BATCH_SIZE";i:0;s:10:"serializer";N;s:10:"batch_size";i:0;s:19:"END_OF_DATA_SECTION";i:-1;s:20:"PHP_EXCEPTION_THROWN";i:-2;s:11:"TIMING_DATA";i:-3;s:13:"END_OF_STREAM";i:-4;s:4:"NULL";i:-5;}s:18:"createCombinerFunc";C:32:"SuperClosure\SerializableClosure":135:{a:5:{s:4:"code";s:33:"function ($x) {
    return $x;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"mergeValueFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}s:18:"mergeCombinersFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1813:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":369:{a:5:{s:4:"code";s:76:"function ($any, $iterator) use($f) {
    return array_map($f, $iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":137:{a:5:{s:4:"code";s:43:"function ($x) {
    return array($x, 1);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1081:{a:5:{s:4:"code";s:758:"function ($split, $iterator) use($f) {
    $sub_is_array = False;
    foreach ($iterator as $key => $value) {
        $temp = $f($value);
        if (is_array($temp)) {
            $sub_is_array = True;
            break;
        }
    }
    if ($sub_is_array) {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            if (is_array($temp)) {
                foreach ($temp as $e) {
                    array_push($result, $e);
                }
            }
        }
        return $result;
    } else {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            array_push($result, $temp);
        }
        return $result;
    }
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":166:{a:5:{s:4:"code";s:72:"function ($line) {
    $temp = explode(' ', $line);
    return $temp;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}
here5
here6do do do 
here7 array
here7a string
here7a string
here8  Array
socket_create()成功39895

socket_connect()成功
首次read_int()成功0
首次read_utf()成功5.6
here3C:32:"SuperClosure\SerializableClosure":6129:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":1969:{a:5:{s:4:"code";s:1515:"function ($split, $iterator) use($numPartitions, $partitionFunc, $limit, $outputSerializer) {
    $buckets = array();
    $c = 0;
    $batch = min(10 * $numPartitions, 1000);
    foreach ($iterator as $key => $element) {
        file_put_contents('/home/gt/php_worker9.txt', 'here1a ' . $key . ' ' . $element . '
', FILE_APPEND);
    }
    foreach ($iterator as $key => $value) {
        $buckets[$partitionFunc($key) % $numPartitions] = array();
        $buckets[$partitionFunc($key) % $numPartitions][$key] = $value;
        $c++;
        if ($c % 1000 == 0 && memory_get_usage() / 1024 / 1024 > $limit || $c > $batch) {
            $n = sizeof($buckets);
            $size = 0;
            $result = array();
            foreach ($buckets as $key2 => $value2) {
                #value是一个array
                array_push($result, serialize($key2));
                $d = serialize($value2);
                unset($value2);
                array_push($result, $d);
                $size += strlen($d);
            }
            $avg = intval($size / $n) >> 20;
            # let 1M < avg < 10M
            if ($avg < 1) {
                $batch *= 1.5;
            } elseif ($avg > 10) {
                $batch = max(intval($batch / 1.5), 1);
            }
            $c = 0;
            return $result;
        }
    }
    $result = array();
    foreach ($buckets as $key => $value) {
        array_push($result, serialize($key));
        array_push($result, serialize($value));
    }
    return $result;
};";s:7:"context";a:3:{s:13:"numPartitions";i:2;s:13:"partitionFunc";C:32:"SuperClosure\SerializableClosure":240:{a:5:{s:4:"code";s:137:"function ($x) {
    if ($x == null) {
        return 0;
    }
    $h = null;
    if (is_array($x)) {
    }
    return hash('md5', $x);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:5:"limit";i:256;}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":3796:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":1619:{a:5:{s:4:"code";s:67:"function ($split, $iterator) use($f) {
    return $f($iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":1395:{a:5:{s:4:"code";s:332:"function ($iterator) use($memory, $serializer, $createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc) {
    $agg = new \aggregator($createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc);
    $merger = new \ExternalMerger($agg, $memory * 0.9, $serializer);
    $merger->mergeValues($iterator);
    return $merger->items();
};";s:7:"context";a:5:{s:6:"memory";i:512;s:10:"serializer";O:23:"auto_batched_serializer":10:{s:9:"best_size";i:65536;s:20:"UNLIMITED_BATCH_SIZE";i:-1;s:18:"UNKNOWN_BATCH_SIZE";i:0;s:10:"serializer";N;s:10:"batch_size";i:0;s:19:"END_OF_DATA_SECTION";i:-1;s:20:"PHP_EXCEPTION_THROWN";i:-2;s:11:"TIMING_DATA";i:-3;s:13:"END_OF_STREAM";i:-4;s:4:"NULL";i:-5;}s:18:"createCombinerFunc";C:32:"SuperClosure\SerializableClosure":135:{a:5:{s:4:"code";s:33:"function ($x) {
    return $x;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"mergeValueFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}s:18:"mergeCombinersFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1813:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":369:{a:5:{s:4:"code";s:76:"function ($any, $iterator) use($f) {
    return array_map($f, $iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":137:{a:5:{s:4:"code";s:43:"function ($x) {
    return array($x, 1);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1081:{a:5:{s:4:"code";s:758:"function ($split, $iterator) use($f) {
    $sub_is_array = False;
    foreach ($iterator as $key => $value) {
        $temp = $f($value);
        if (is_array($temp)) {
            $sub_is_array = True;
            break;
        }
    }
    if ($sub_is_array) {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            if (is_array($temp)) {
                foreach ($temp as $e) {
                    array_push($result, $e);
                }
            }
        }
        return $result;
    } else {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            array_push($result, $temp);
        }
        return $result;
    }
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":166:{a:5:{s:4:"code";s:72:"function ($line) {
    $temp = explode(' ', $line);
    return $temp;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}
here5
here6test test test test try try try 
here7 array
here7a string
here7a string
here8  Array
socket_create()成功36931

socket_connect()成功
首次read_int()成功1
首次read_utf()成功5.6
here3C:32:"SuperClosure\SerializableClosure":6129:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":1969:{a:5:{s:4:"code";s:1515:"function ($split, $iterator) use($numPartitions, $partitionFunc, $limit, $outputSerializer) {
    $buckets = array();
    $c = 0;
    $batch = min(10 * $numPartitions, 1000);
    foreach ($iterator as $key => $element) {
        file_put_contents('/home/gt/php_worker9.txt', 'here1a ' . $key . ' ' . $element . '
', FILE_APPEND);
    }
    foreach ($iterator as $key => $value) {
        $buckets[$partitionFunc($key) % $numPartitions] = array();
        $buckets[$partitionFunc($key) % $numPartitions][$key] = $value;
        $c++;
        if ($c % 1000 == 0 && memory_get_usage() / 1024 / 1024 > $limit || $c > $batch) {
            $n = sizeof($buckets);
            $size = 0;
            $result = array();
            foreach ($buckets as $key2 => $value2) {
                #value是一个array
                array_push($result, serialize($key2));
                $d = serialize($value2);
                unset($value2);
                array_push($result, $d);
                $size += strlen($d);
            }
            $avg = intval($size / $n) >> 20;
            # let 1M < avg < 10M
            if ($avg < 1) {
                $batch *= 1.5;
            } elseif ($avg > 10) {
                $batch = max(intval($batch / 1.5), 1);
            }
            $c = 0;
            return $result;
        }
    }
    $result = array();
    foreach ($buckets as $key => $value) {
        array_push($result, serialize($key));
        array_push($result, serialize($value));
    }
    return $result;
};";s:7:"context";a:3:{s:13:"numPartitions";i:2;s:13:"partitionFunc";C:32:"SuperClosure\SerializableClosure":240:{a:5:{s:4:"code";s:137:"function ($x) {
    if ($x == null) {
        return 0;
    }
    $h = null;
    if (is_array($x)) {
    }
    return hash('md5', $x);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:5:"limit";i:256;}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":3796:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":1619:{a:5:{s:4:"code";s:67:"function ($split, $iterator) use($f) {
    return $f($iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":1395:{a:5:{s:4:"code";s:332:"function ($iterator) use($memory, $serializer, $createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc) {
    $agg = new \aggregator($createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc);
    $merger = new \ExternalMerger($agg, $memory * 0.9, $serializer);
    $merger->mergeValues($iterator);
    return $merger->items();
};";s:7:"context";a:5:{s:6:"memory";i:512;s:10:"serializer";O:23:"auto_batched_serializer":10:{s:9:"best_size";i:65536;s:20:"UNLIMITED_BATCH_SIZE";i:-1;s:18:"UNKNOWN_BATCH_SIZE";i:0;s:10:"serializer";N;s:10:"batch_size";i:0;s:19:"END_OF_DATA_SECTION";i:-1;s:20:"PHP_EXCEPTION_THROWN";i:-2;s:11:"TIMING_DATA";i:-3;s:13:"END_OF_STREAM";i:-4;s:4:"NULL";i:-5;}s:18:"createCombinerFunc";C:32:"SuperClosure\SerializableClosure":135:{a:5:{s:4:"code";s:33:"function ($x) {
    return $x;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"mergeValueFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}s:18:"mergeCombinersFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1813:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":369:{a:5:{s:4:"code";s:76:"function ($any, $iterator) use($f) {
    return array_map($f, $iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":137:{a:5:{s:4:"code";s:43:"function ($x) {
    return array($x, 1);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1081:{a:5:{s:4:"code";s:758:"function ($split, $iterator) use($f) {
    $sub_is_array = False;
    foreach ($iterator as $key => $value) {
        $temp = $f($value);
        if (is_array($temp)) {
            $sub_is_array = True;
            break;
        }
    }
    if ($sub_is_array) {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            if (is_array($temp)) {
                foreach ($temp as $e) {
                    array_push($result, $e);
                }
            }
        }
        return $result;
    } else {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            array_push($result, $temp);
        }
        return $result;
    }
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":166:{a:5:{s:4:"code";s:72:"function ($line) {
    $temp = explode(' ', $line);
    return $temp;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}
here5
here6do do do 
here7 array
here7a string
here7a string
here8  Array
socket_create()成功55330

socket_connect()成功
首次read_int()成功0
首次read_utf()成功5.6
here3C:32:"SuperClosure\SerializableClosure":6129:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":1969:{a:5:{s:4:"code";s:1515:"function ($split, $iterator) use($numPartitions, $partitionFunc, $limit, $outputSerializer) {
    $buckets = array();
    $c = 0;
    $batch = min(10 * $numPartitions, 1000);
    foreach ($iterator as $key => $element) {
        file_put_contents('/home/gt/php_worker9.txt', 'here1a ' . $key . ' ' . $element . '
', FILE_APPEND);
    }
    foreach ($iterator as $key => $value) {
        $buckets[$partitionFunc($key) % $numPartitions] = array();
        $buckets[$partitionFunc($key) % $numPartitions][$key] = $value;
        $c++;
        if ($c % 1000 == 0 && memory_get_usage() / 1024 / 1024 > $limit || $c > $batch) {
            $n = sizeof($buckets);
            $size = 0;
            $result = array();
            foreach ($buckets as $key2 => $value2) {
                #value是一个array
                array_push($result, serialize($key2));
                $d = serialize($value2);
                unset($value2);
                array_push($result, $d);
                $size += strlen($d);
            }
            $avg = intval($size / $n) >> 20;
            # let 1M < avg < 10M
            if ($avg < 1) {
                $batch *= 1.5;
            } elseif ($avg > 10) {
                $batch = max(intval($batch / 1.5), 1);
            }
            $c = 0;
            return $result;
        }
    }
    $result = array();
    foreach ($buckets as $key => $value) {
        array_push($result, serialize($key));
        array_push($result, serialize($value));
    }
    return $result;
};";s:7:"context";a:3:{s:13:"numPartitions";i:2;s:13:"partitionFunc";C:32:"SuperClosure\SerializableClosure":240:{a:5:{s:4:"code";s:137:"function ($x) {
    if ($x == null) {
        return 0;
    }
    $h = null;
    if (is_array($x)) {
    }
    return hash('md5', $x);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:5:"limit";i:256;}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":3796:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":1619:{a:5:{s:4:"code";s:67:"function ($split, $iterator) use($f) {
    return $f($iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":1395:{a:5:{s:4:"code";s:332:"function ($iterator) use($memory, $serializer, $createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc) {
    $agg = new \aggregator($createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc);
    $merger = new \ExternalMerger($agg, $memory * 0.9, $serializer);
    $merger->mergeValues($iterator);
    return $merger->items();
};";s:7:"context";a:5:{s:6:"memory";i:512;s:10:"serializer";O:23:"auto_batched_serializer":10:{s:9:"best_size";i:65536;s:20:"UNLIMITED_BATCH_SIZE";i:-1;s:18:"UNKNOWN_BATCH_SIZE";i:0;s:10:"serializer";N;s:10:"batch_size";i:0;s:19:"END_OF_DATA_SECTION";i:-1;s:20:"PHP_EXCEPTION_THROWN";i:-2;s:11:"TIMING_DATA";i:-3;s:13:"END_OF_STREAM";i:-4;s:4:"NULL";i:-5;}s:18:"createCombinerFunc";C:32:"SuperClosure\SerializableClosure":135:{a:5:{s:4:"code";s:33:"function ($x) {
    return $x;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"mergeValueFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}s:18:"mergeCombinersFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1813:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":369:{a:5:{s:4:"code";s:76:"function ($any, $iterator) use($f) {
    return array_map($f, $iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":137:{a:5:{s:4:"code";s:43:"function ($x) {
    return array($x, 1);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1081:{a:5:{s:4:"code";s:758:"function ($split, $iterator) use($f) {
    $sub_is_array = False;
    foreach ($iterator as $key => $value) {
        $temp = $f($value);
        if (is_array($temp)) {
            $sub_is_array = True;
            break;
        }
    }
    if ($sub_is_array) {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            if (is_array($temp)) {
                foreach ($temp as $e) {
                    array_push($result, $e);
                }
            }
        }
        return $result;
    } else {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            array_push($result, $temp);
        }
        return $result;
    }
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":166:{a:5:{s:4:"code";s:72:"function ($line) {
    $temp = explode(' ', $line);
    return $temp;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}
here5
here6test test test test try try try 
here7 array
here7a string
here7a string
here8  Array
socket_create()成功56174

socket_connect()成功
首次read_int()成功1
首次read_utf()成功5.6
here3C:32:"SuperClosure\SerializableClosure":6129:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":1969:{a:5:{s:4:"code";s:1515:"function ($split, $iterator) use($numPartitions, $partitionFunc, $limit, $outputSerializer) {
    $buckets = array();
    $c = 0;
    $batch = min(10 * $numPartitions, 1000);
    foreach ($iterator as $key => $element) {
        file_put_contents('/home/gt/php_worker9.txt', 'here1a ' . $key . ' ' . $element . '
', FILE_APPEND);
    }
    foreach ($iterator as $key => $value) {
        $buckets[$partitionFunc($key) % $numPartitions] = array();
        $buckets[$partitionFunc($key) % $numPartitions][$key] = $value;
        $c++;
        if ($c % 1000 == 0 && memory_get_usage() / 1024 / 1024 > $limit || $c > $batch) {
            $n = sizeof($buckets);
            $size = 0;
            $result = array();
            foreach ($buckets as $key2 => $value2) {
                #value是一个array
                array_push($result, serialize($key2));
                $d = serialize($value2);
                unset($value2);
                array_push($result, $d);
                $size += strlen($d);
            }
            $avg = intval($size / $n) >> 20;
            # let 1M < avg < 10M
            if ($avg < 1) {
                $batch *= 1.5;
            } elseif ($avg > 10) {
                $batch = max(intval($batch / 1.5), 1);
            }
            $c = 0;
            return $result;
        }
    }
    $result = array();
    foreach ($buckets as $key => $value) {
        array_push($result, serialize($key));
        array_push($result, serialize($value));
    }
    return $result;
};";s:7:"context";a:3:{s:13:"numPartitions";i:2;s:13:"partitionFunc";C:32:"SuperClosure\SerializableClosure":240:{a:5:{s:4:"code";s:137:"function ($x) {
    if ($x == null) {
        return 0;
    }
    $h = null;
    if (is_array($x)) {
    }
    return hash('md5', $x);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:5:"limit";i:256;}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":3796:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":1619:{a:5:{s:4:"code";s:67:"function ($split, $iterator) use($f) {
    return $f($iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":1395:{a:5:{s:4:"code";s:332:"function ($iterator) use($memory, $serializer, $createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc) {
    $agg = new \aggregator($createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc);
    $merger = new \ExternalMerger($agg, $memory * 0.9, $serializer);
    $merger->mergeValues($iterator);
    return $merger->items();
};";s:7:"context";a:5:{s:6:"memory";i:512;s:10:"serializer";O:23:"auto_batched_serializer":10:{s:9:"best_size";i:65536;s:20:"UNLIMITED_BATCH_SIZE";i:-1;s:18:"UNKNOWN_BATCH_SIZE";i:0;s:10:"serializer";N;s:10:"batch_size";i:0;s:19:"END_OF_DATA_SECTION";i:-1;s:20:"PHP_EXCEPTION_THROWN";i:-2;s:11:"TIMING_DATA";i:-3;s:13:"END_OF_STREAM";i:-4;s:4:"NULL";i:-5;}s:18:"createCombinerFunc";C:32:"SuperClosure\SerializableClosure":135:{a:5:{s:4:"code";s:33:"function ($x) {
    return $x;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"mergeValueFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}s:18:"mergeCombinersFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1813:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":369:{a:5:{s:4:"code";s:76:"function ($any, $iterator) use($f) {
    return array_map($f, $iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":137:{a:5:{s:4:"code";s:43:"function ($x) {
    return array($x, 1);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1081:{a:5:{s:4:"code";s:758:"function ($split, $iterator) use($f) {
    $sub_is_array = False;
    foreach ($iterator as $key => $value) {
        $temp = $f($value);
        if (is_array($temp)) {
            $sub_is_array = True;
            break;
        }
    }
    if ($sub_is_array) {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            if (is_array($temp)) {
                foreach ($temp as $e) {
                    array_push($result, $e);
                }
            }
        }
        return $result;
    } else {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            array_push($result, $temp);
        }
        return $result;
    }
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":166:{a:5:{s:4:"code";s:72:"function ($line) {
    $temp = explode(' ', $line);
    return $temp;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}
here5
here6do do do 
here7 array
here7a string
here7a string
here8  Array
socket_create()成功48258

socket_connect()成功
首次read_int()成功0
首次read_utf()成功5.6
here3C:32:"SuperClosure\SerializableClosure":6129:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":1969:{a:5:{s:4:"code";s:1515:"function ($split, $iterator) use($numPartitions, $partitionFunc, $limit, $outputSerializer) {
    $buckets = array();
    $c = 0;
    $batch = min(10 * $numPartitions, 1000);
    foreach ($iterator as $key => $element) {
        file_put_contents('/home/gt/php_worker9.txt', 'here1a ' . $key . ' ' . $element . '
', FILE_APPEND);
    }
    foreach ($iterator as $key => $value) {
        $buckets[$partitionFunc($key) % $numPartitions] = array();
        $buckets[$partitionFunc($key) % $numPartitions][$key] = $value;
        $c++;
        if ($c % 1000 == 0 && memory_get_usage() / 1024 / 1024 > $limit || $c > $batch) {
            $n = sizeof($buckets);
            $size = 0;
            $result = array();
            foreach ($buckets as $key2 => $value2) {
                #value是一个array
                array_push($result, serialize($key2));
                $d = serialize($value2);
                unset($value2);
                array_push($result, $d);
                $size += strlen($d);
            }
            $avg = intval($size / $n) >> 20;
            # let 1M < avg < 10M
            if ($avg < 1) {
                $batch *= 1.5;
            } elseif ($avg > 10) {
                $batch = max(intval($batch / 1.5), 1);
            }
            $c = 0;
            return $result;
        }
    }
    $result = array();
    foreach ($buckets as $key => $value) {
        array_push($result, serialize($key));
        array_push($result, serialize($value));
    }
    return $result;
};";s:7:"context";a:3:{s:13:"numPartitions";i:2;s:13:"partitionFunc";C:32:"SuperClosure\SerializableClosure":240:{a:5:{s:4:"code";s:137:"function ($x) {
    if ($x == null) {
        return 0;
    }
    $h = null;
    if (is_array($x)) {
    }
    return hash('md5', $x);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:5:"limit";i:256;}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":3796:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":1619:{a:5:{s:4:"code";s:67:"function ($split, $iterator) use($f) {
    return $f($iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":1395:{a:5:{s:4:"code";s:332:"function ($iterator) use($memory, $serializer, $createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc) {
    $agg = new \aggregator($createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc);
    $merger = new \ExternalMerger($agg, $memory * 0.9, $serializer);
    $merger->mergeValues($iterator);
    return $merger->items();
};";s:7:"context";a:5:{s:6:"memory";i:512;s:10:"serializer";O:23:"auto_batched_serializer":10:{s:9:"best_size";i:65536;s:20:"UNLIMITED_BATCH_SIZE";i:-1;s:18:"UNKNOWN_BATCH_SIZE";i:0;s:10:"serializer";N;s:10:"batch_size";i:0;s:19:"END_OF_DATA_SECTION";i:-1;s:20:"PHP_EXCEPTION_THROWN";i:-2;s:11:"TIMING_DATA";i:-3;s:13:"END_OF_STREAM";i:-4;s:4:"NULL";i:-5;}s:18:"createCombinerFunc";C:32:"SuperClosure\SerializableClosure":135:{a:5:{s:4:"code";s:33:"function ($x) {
    return $x;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"mergeValueFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}s:18:"mergeCombinersFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1813:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":369:{a:5:{s:4:"code";s:76:"function ($any, $iterator) use($f) {
    return array_map($f, $iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":137:{a:5:{s:4:"code";s:43:"function ($x) {
    return array($x, 1);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1081:{a:5:{s:4:"code";s:758:"function ($split, $iterator) use($f) {
    $sub_is_array = False;
    foreach ($iterator as $key => $value) {
        $temp = $f($value);
        if (is_array($temp)) {
            $sub_is_array = True;
            break;
        }
    }
    if ($sub_is_array) {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            if (is_array($temp)) {
                foreach ($temp as $e) {
                    array_push($result, $e);
                }
            }
        }
        return $result;
    } else {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            array_push($result, $temp);
        }
        return $result;
    }
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":166:{a:5:{s:4:"code";s:72:"function ($line) {
    $temp = explode(' ', $line);
    return $temp;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}
here5
here6test test test test try try try 
here7 array
here7a string
here7a string
here8  Array
socket_create()成功60199

socket_connect()成功
首次read_int()成功1
首次read_utf()成功5.6
here3C:32:"SuperClosure\SerializableClosure":6129:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":1969:{a:5:{s:4:"code";s:1515:"function ($split, $iterator) use($numPartitions, $partitionFunc, $limit, $outputSerializer) {
    $buckets = array();
    $c = 0;
    $batch = min(10 * $numPartitions, 1000);
    foreach ($iterator as $key => $element) {
        file_put_contents('/home/gt/php_worker9.txt', 'here1a ' . $key . ' ' . $element . '
', FILE_APPEND);
    }
    foreach ($iterator as $key => $value) {
        $buckets[$partitionFunc($key) % $numPartitions] = array();
        $buckets[$partitionFunc($key) % $numPartitions][$key] = $value;
        $c++;
        if ($c % 1000 == 0 && memory_get_usage() / 1024 / 1024 > $limit || $c > $batch) {
            $n = sizeof($buckets);
            $size = 0;
            $result = array();
            foreach ($buckets as $key2 => $value2) {
                #value是一个array
                array_push($result, serialize($key2));
                $d = serialize($value2);
                unset($value2);
                array_push($result, $d);
                $size += strlen($d);
            }
            $avg = intval($size / $n) >> 20;
            # let 1M < avg < 10M
            if ($avg < 1) {
                $batch *= 1.5;
            } elseif ($avg > 10) {
                $batch = max(intval($batch / 1.5), 1);
            }
            $c = 0;
            return $result;
        }
    }
    $result = array();
    foreach ($buckets as $key => $value) {
        array_push($result, serialize($key));
        array_push($result, serialize($value));
    }
    return $result;
};";s:7:"context";a:3:{s:13:"numPartitions";i:2;s:13:"partitionFunc";C:32:"SuperClosure\SerializableClosure":240:{a:5:{s:4:"code";s:137:"function ($x) {
    if ($x == null) {
        return 0;
    }
    $h = null;
    if (is_array($x)) {
    }
    return hash('md5', $x);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:5:"limit";i:256;}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":3796:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":1619:{a:5:{s:4:"code";s:67:"function ($split, $iterator) use($f) {
    return $f($iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":1395:{a:5:{s:4:"code";s:332:"function ($iterator) use($memory, $serializer, $createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc) {
    $agg = new \aggregator($createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc);
    $merger = new \ExternalMerger($agg, $memory * 0.9, $serializer);
    $merger->mergeValues($iterator);
    return $merger->items();
};";s:7:"context";a:5:{s:6:"memory";i:512;s:10:"serializer";O:23:"auto_batched_serializer":10:{s:9:"best_size";i:65536;s:20:"UNLIMITED_BATCH_SIZE";i:-1;s:18:"UNKNOWN_BATCH_SIZE";i:0;s:10:"serializer";N;s:10:"batch_size";i:0;s:19:"END_OF_DATA_SECTION";i:-1;s:20:"PHP_EXCEPTION_THROWN";i:-2;s:11:"TIMING_DATA";i:-3;s:13:"END_OF_STREAM";i:-4;s:4:"NULL";i:-5;}s:18:"createCombinerFunc";C:32:"SuperClosure\SerializableClosure":135:{a:5:{s:4:"code";s:33:"function ($x) {
    return $x;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"mergeValueFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}s:18:"mergeCombinersFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1813:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":369:{a:5:{s:4:"code";s:76:"function ($any, $iterator) use($f) {
    return array_map($f, $iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":137:{a:5:{s:4:"code";s:43:"function ($x) {
    return array($x, 1);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1081:{a:5:{s:4:"code";s:758:"function ($split, $iterator) use($f) {
    $sub_is_array = False;
    foreach ($iterator as $key => $value) {
        $temp = $f($value);
        if (is_array($temp)) {
            $sub_is_array = True;
            break;
        }
    }
    if ($sub_is_array) {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            if (is_array($temp)) {
                foreach ($temp as $e) {
                    array_push($result, $e);
                }
            }
        }
        return $result;
    } else {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            array_push($result, $temp);
        }
        return $result;
    }
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":166:{a:5:{s:4:"code";s:72:"function ($line) {
    $temp = explode(' ', $line);
    return $temp;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}
here5
here6do do do 
here7 array
here7a string
here7a string
here8  Array
socket_create()成功59028

socket_connect()成功
首次read_int()成功1
首次read_utf()成功5.6
here3C:32:"SuperClosure\SerializableClosure":6118:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":1958:{a:5:{s:4:"code";s:1504:"function ($split, $iterator) use($numPartitions, $partitionFunc, $limit, $outputSerializer) {
    $buckets = array();
    $c = 0;
    $batch = min(10 * $numPartitions, 1000);
    foreach ($iterator as $key => $value) {
        #wordcount为例，这是word=>count
        $buckets[$partitionFunc($key) % $numPartitions] = array();
        $buckets[$partitionFunc($key) % $numPartitions][$key] = $value;
        $c++;
        if ($c % 1000 == 0 && memory_get_usage() / 1024 / 1024 > $limit || $c > $batch) {
            $n = sizeof($buckets);
            $size = 0;
            $result = array();
            foreach ($buckets as $key2 => $value2) {
                #value是一个array
                array_push($result, serialize($key2));
                $d = serialize($value2);
                unset($value2);
                array_push($result, $d);
                $size += strlen($d);
            }
            $avg = intval($size / $n) >> 20;
            # let 1M < avg < 10M
            if ($avg < 1) {
                $batch *= 1.5;
            } elseif ($avg > 10) {
                $batch = max(intval($batch / 1.5), 1);
            }
            $c = 0;
            return $result;
        }
    }
    $result = array();
    foreach ($buckets as $key => $value) {
        file_put_contents('/home/gt/php_worker9.txt', 'here ' . $key . ' ' . $value . '
', FILE_APPEND);
        array_push($result, serialize($key));
        array_push($result, serialize($value));
    }
    return $result;
};";s:7:"context";a:3:{s:13:"numPartitions";i:2;s:13:"partitionFunc";C:32:"SuperClosure\SerializableClosure":240:{a:5:{s:4:"code";s:137:"function ($x) {
    if ($x == null) {
        return 0;
    }
    $h = null;
    if (is_array($x)) {
    }
    return hash('md5', $x);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:5:"limit";i:256;}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":3796:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":1619:{a:5:{s:4:"code";s:67:"function ($split, $iterator) use($f) {
    return $f($iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":1395:{a:5:{s:4:"code";s:332:"function ($iterator) use($memory, $serializer, $createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc) {
    $agg = new \aggregator($createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc);
    $merger = new \ExternalMerger($agg, $memory * 0.9, $serializer);
    $merger->mergeValues($iterator);
    return $merger->items();
};";s:7:"context";a:5:{s:6:"memory";i:512;s:10:"serializer";O:23:"auto_batched_serializer":10:{s:9:"best_size";i:65536;s:20:"UNLIMITED_BATCH_SIZE";i:-1;s:18:"UNKNOWN_BATCH_SIZE";i:0;s:10:"serializer";N;s:10:"batch_size";i:0;s:19:"END_OF_DATA_SECTION";i:-1;s:20:"PHP_EXCEPTION_THROWN";i:-2;s:11:"TIMING_DATA";i:-3;s:13:"END_OF_STREAM";i:-4;s:4:"NULL";i:-5;}s:18:"createCombinerFunc";C:32:"SuperClosure\SerializableClosure":135:{a:5:{s:4:"code";s:33:"function ($x) {
    return $x;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"mergeValueFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}s:18:"mergeCombinersFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1813:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":369:{a:5:{s:4:"code";s:76:"function ($any, $iterator) use($f) {
    return array_map($f, $iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":137:{a:5:{s:4:"code";s:43:"function ($x) {
    return array($x, 1);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1081:{a:5:{s:4:"code";s:758:"function ($split, $iterator) use($f) {
    $sub_is_array = False;
    foreach ($iterator as $key => $value) {
        $temp = $f($value);
        if (is_array($temp)) {
            $sub_is_array = True;
            break;
        }
    }
    if ($sub_is_array) {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            if (is_array($temp)) {
                foreach ($temp as $e) {
                    array_push($result, $e);
                }
            }
        }
        return $result;
    } else {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            array_push($result, $temp);
        }
        return $result;
    }
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":166:{a:5:{s:4:"code";s:72:"function ($line) {
    $temp = explode(' ', $line);
    return $temp;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}
here5
here6do do do 
here7 array
here7a string
here7a string
here8  Array
socket_create()成功44293

socket_connect()成功
首次read_int()成功0
首次read_utf()成功5.6
here3C:32:"SuperClosure\SerializableClosure":6118:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":1958:{a:5:{s:4:"code";s:1504:"function ($split, $iterator) use($numPartitions, $partitionFunc, $limit, $outputSerializer) {
    $buckets = array();
    $c = 0;
    $batch = min(10 * $numPartitions, 1000);
    foreach ($iterator as $key => $value) {
        #wordcount为例，这是word=>count
        $buckets[$partitionFunc($key) % $numPartitions] = array();
        $buckets[$partitionFunc($key) % $numPartitions][$key] = $value;
        $c++;
        if ($c % 1000 == 0 && memory_get_usage() / 1024 / 1024 > $limit || $c > $batch) {
            $n = sizeof($buckets);
            $size = 0;
            $result = array();
            foreach ($buckets as $key2 => $value2) {
                #value是一个array
                array_push($result, serialize($key2));
                $d = serialize($value2);
                unset($value2);
                array_push($result, $d);
                $size += strlen($d);
            }
            $avg = intval($size / $n) >> 20;
            # let 1M < avg < 10M
            if ($avg < 1) {
                $batch *= 1.5;
            } elseif ($avg > 10) {
                $batch = max(intval($batch / 1.5), 1);
            }
            $c = 0;
            return $result;
        }
    }
    $result = array();
    foreach ($buckets as $key => $value) {
        file_put_contents('/home/gt/php_worker9.txt', 'here ' . $key . ' ' . $value . '
', FILE_APPEND);
        array_push($result, serialize($key));
        array_push($result, serialize($value));
    }
    return $result;
};";s:7:"context";a:3:{s:13:"numPartitions";i:2;s:13:"partitionFunc";C:32:"SuperClosure\SerializableClosure":240:{a:5:{s:4:"code";s:137:"function ($x) {
    if ($x == null) {
        return 0;
    }
    $h = null;
    if (is_array($x)) {
    }
    return hash('md5', $x);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:5:"limit";i:256;}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":3796:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":1619:{a:5:{s:4:"code";s:67:"function ($split, $iterator) use($f) {
    return $f($iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":1395:{a:5:{s:4:"code";s:332:"function ($iterator) use($memory, $serializer, $createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc) {
    $agg = new \aggregator($createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc);
    $merger = new \ExternalMerger($agg, $memory * 0.9, $serializer);
    $merger->mergeValues($iterator);
    return $merger->items();
};";s:7:"context";a:5:{s:6:"memory";i:512;s:10:"serializer";O:23:"auto_batched_serializer":10:{s:9:"best_size";i:65536;s:20:"UNLIMITED_BATCH_SIZE";i:-1;s:18:"UNKNOWN_BATCH_SIZE";i:0;s:10:"serializer";N;s:10:"batch_size";i:0;s:19:"END_OF_DATA_SECTION";i:-1;s:20:"PHP_EXCEPTION_THROWN";i:-2;s:11:"TIMING_DATA";i:-3;s:13:"END_OF_STREAM";i:-4;s:4:"NULL";i:-5;}s:18:"createCombinerFunc";C:32:"SuperClosure\SerializableClosure":135:{a:5:{s:4:"code";s:33:"function ($x) {
    return $x;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"mergeValueFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}s:18:"mergeCombinersFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1813:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":369:{a:5:{s:4:"code";s:76:"function ($any, $iterator) use($f) {
    return array_map($f, $iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":137:{a:5:{s:4:"code";s:43:"function ($x) {
    return array($x, 1);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1081:{a:5:{s:4:"code";s:758:"function ($split, $iterator) use($f) {
    $sub_is_array = False;
    foreach ($iterator as $key => $value) {
        $temp = $f($value);
        if (is_array($temp)) {
            $sub_is_array = True;
            break;
        }
    }
    if ($sub_is_array) {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            if (is_array($temp)) {
                foreach ($temp as $e) {
                    array_push($result, $e);
                }
            }
        }
        return $result;
    } else {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            array_push($result, $temp);
        }
        return $result;
    }
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":166:{a:5:{s:4:"code";s:72:"function ($line) {
    $temp = explode(' ', $line);
    return $temp;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}
here5
here6test test test test try try try 
here7 array
here7a string
here7a string
here8  Array
socket_create()成功35388

socket_connect()成功
首次read_int()成功0
首次read_utf()成功5.6
here3C:32:"SuperClosure\SerializableClosure":6118:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":1958:{a:5:{s:4:"code";s:1504:"function ($split, $iterator) use($numPartitions, $partitionFunc, $limit, $outputSerializer) {
    $buckets = array();
    $c = 0;
    $batch = min(10 * $numPartitions, 1000);
    foreach ($iterator as $key => $value) {
        #wordcount为例，这是word=>count
        $buckets[$partitionFunc($key) % $numPartitions] = array();
        $buckets[$partitionFunc($key) % $numPartitions][$key] = $value;
        $c++;
        if ($c % 1000 == 0 && memory_get_usage() / 1024 / 1024 > $limit || $c > $batch) {
            $n = sizeof($buckets);
            $size = 0;
            $result = array();
            foreach ($buckets as $key2 => $value2) {
                #value是一个array
                array_push($result, serialize($key2));
                $d = serialize($value2);
                unset($value2);
                array_push($result, $d);
                $size += strlen($d);
            }
            $avg = intval($size / $n) >> 20;
            # let 1M < avg < 10M
            if ($avg < 1) {
                $batch *= 1.5;
            } elseif ($avg > 10) {
                $batch = max(intval($batch / 1.5), 1);
            }
            $c = 0;
            return $result;
        }
    }
    $result = array();
    foreach ($buckets as $key => $value) {
        file_put_contents('/home/gt/php_worker9.txt', 'here ' . $key . ' ' . $value . '
', FILE_APPEND);
        array_push($result, serialize($key));
        array_push($result, serialize($value));
    }
    return $result;
};";s:7:"context";a:3:{s:13:"numPartitions";i:2;s:13:"partitionFunc";C:32:"SuperClosure\SerializableClosure":240:{a:5:{s:4:"code";s:137:"function ($x) {
    if ($x == null) {
        return 0;
    }
    $h = null;
    if (is_array($x)) {
    }
    return hash('md5', $x);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:5:"limit";i:256;}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":3796:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":1619:{a:5:{s:4:"code";s:67:"function ($split, $iterator) use($f) {
    return $f($iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":1395:{a:5:{s:4:"code";s:332:"function ($iterator) use($memory, $serializer, $createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc) {
    $agg = new \aggregator($createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc);
    $merger = new \ExternalMerger($agg, $memory * 0.9, $serializer);
    $merger->mergeValues($iterator);
    return $merger->items();
};";s:7:"context";a:5:{s:6:"memory";i:512;s:10:"serializer";O:23:"auto_batched_serializer":10:{s:9:"best_size";i:65536;s:20:"UNLIMITED_BATCH_SIZE";i:-1;s:18:"UNKNOWN_BATCH_SIZE";i:0;s:10:"serializer";N;s:10:"batch_size";i:0;s:19:"END_OF_DATA_SECTION";i:-1;s:20:"PHP_EXCEPTION_THROWN";i:-2;s:11:"TIMING_DATA";i:-3;s:13:"END_OF_STREAM";i:-4;s:4:"NULL";i:-5;}s:18:"createCombinerFunc";C:32:"SuperClosure\SerializableClosure":135:{a:5:{s:4:"code";s:33:"function ($x) {
    return $x;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"mergeValueFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}s:18:"mergeCombinersFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1813:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":369:{a:5:{s:4:"code";s:76:"function ($any, $iterator) use($f) {
    return array_map($f, $iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":137:{a:5:{s:4:"code";s:43:"function ($x) {
    return array($x, 1);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1081:{a:5:{s:4:"code";s:758:"function ($split, $iterator) use($f) {
    $sub_is_array = False;
    foreach ($iterator as $key => $value) {
        $temp = $f($value);
        if (is_array($temp)) {
            $sub_is_array = True;
            break;
        }
    }
    if ($sub_is_array) {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            if (is_array($temp)) {
                foreach ($temp as $e) {
                    array_push($result, $e);
                }
            }
        }
        return $result;
    } else {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            array_push($result, $temp);
        }
        return $result;
    }
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":166:{a:5:{s:4:"code";s:72:"function ($line) {
    $temp = explode(' ', $line);
    return $temp;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}
here5
here6test test test test try try try 
here7 array
here7a string
here7a string
here8  Array
socket_create()成功50410

socket_connect()成功
首次read_int()成功1
首次read_utf()成功5.6
here3C:32:"SuperClosure\SerializableClosure":6118:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":1958:{a:5:{s:4:"code";s:1504:"function ($split, $iterator) use($numPartitions, $partitionFunc, $limit, $outputSerializer) {
    $buckets = array();
    $c = 0;
    $batch = min(10 * $numPartitions, 1000);
    foreach ($iterator as $key => $value) {
        #wordcount为例，这是word=>count
        $buckets[$partitionFunc($key) % $numPartitions] = array();
        $buckets[$partitionFunc($key) % $numPartitions][$key] = $value;
        $c++;
        if ($c % 1000 == 0 && memory_get_usage() / 1024 / 1024 > $limit || $c > $batch) {
            $n = sizeof($buckets);
            $size = 0;
            $result = array();
            foreach ($buckets as $key2 => $value2) {
                #value是一个array
                array_push($result, serialize($key2));
                $d = serialize($value2);
                unset($value2);
                array_push($result, $d);
                $size += strlen($d);
            }
            $avg = intval($size / $n) >> 20;
            # let 1M < avg < 10M
            if ($avg < 1) {
                $batch *= 1.5;
            } elseif ($avg > 10) {
                $batch = max(intval($batch / 1.5), 1);
            }
            $c = 0;
            return $result;
        }
    }
    $result = array();
    foreach ($buckets as $key => $value) {
        file_put_contents('/home/gt/php_worker9.txt', 'here ' . $key . ' ' . $value . '
', FILE_APPEND);
        array_push($result, serialize($key));
        array_push($result, serialize($value));
    }
    return $result;
};";s:7:"context";a:3:{s:13:"numPartitions";i:2;s:13:"partitionFunc";C:32:"SuperClosure\SerializableClosure":240:{a:5:{s:4:"code";s:137:"function ($x) {
    if ($x == null) {
        return 0;
    }
    $h = null;
    if (is_array($x)) {
    }
    return hash('md5', $x);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:5:"limit";i:256;}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":3796:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":1619:{a:5:{s:4:"code";s:67:"function ($split, $iterator) use($f) {
    return $f($iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":1395:{a:5:{s:4:"code";s:332:"function ($iterator) use($memory, $serializer, $createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc) {
    $agg = new \aggregator($createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc);
    $merger = new \ExternalMerger($agg, $memory * 0.9, $serializer);
    $merger->mergeValues($iterator);
    return $merger->items();
};";s:7:"context";a:5:{s:6:"memory";i:512;s:10:"serializer";O:23:"auto_batched_serializer":10:{s:9:"best_size";i:65536;s:20:"UNLIMITED_BATCH_SIZE";i:-1;s:18:"UNKNOWN_BATCH_SIZE";i:0;s:10:"serializer";N;s:10:"batch_size";i:0;s:19:"END_OF_DATA_SECTION";i:-1;s:20:"PHP_EXCEPTION_THROWN";i:-2;s:11:"TIMING_DATA";i:-3;s:13:"END_OF_STREAM";i:-4;s:4:"NULL";i:-5;}s:18:"createCombinerFunc";C:32:"SuperClosure\SerializableClosure":135:{a:5:{s:4:"code";s:33:"function ($x) {
    return $x;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"mergeValueFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}s:18:"mergeCombinersFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1813:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":369:{a:5:{s:4:"code";s:76:"function ($any, $iterator) use($f) {
    return array_map($f, $iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":137:{a:5:{s:4:"code";s:43:"function ($x) {
    return array($x, 1);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1081:{a:5:{s:4:"code";s:758:"function ($split, $iterator) use($f) {
    $sub_is_array = False;
    foreach ($iterator as $key => $value) {
        $temp = $f($value);
        if (is_array($temp)) {
            $sub_is_array = True;
            break;
        }
    }
    if ($sub_is_array) {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            if (is_array($temp)) {
                foreach ($temp as $e) {
                    array_push($result, $e);
                }
            }
        }
        return $result;
    } else {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            array_push($result, $temp);
        }
        return $result;
    }
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":166:{a:5:{s:4:"code";s:72:"function ($line) {
    $temp = explode(' ', $line);
    return $temp;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}
here5
here6do do do 
here7 array
here7a string
here7a string
here8  Array
socket_create()成功52419

socket_connect()成功
首次read_int()成功1
首次read_utf()成功5.6
socket_create()成功43152

socket_connect()成功
首次read_int()成功0
首次read_utf()成功5.6
here3C:32:"SuperClosure\SerializableClosure":6118:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":1958:{a:5:{s:4:"code";s:1504:"function ($split, $iterator) use($numPartitions, $partitionFunc, $limit, $outputSerializer) {
    $buckets = array();
    $c = 0;
    $batch = min(10 * $numPartitions, 1000);
    foreach ($iterator as $key => $value) {
        #wordcount为例，这是word=>count
        $buckets[$partitionFunc($key) % $numPartitions] = array();
        $buckets[$partitionFunc($key) % $numPartitions][$key] = $value;
        $c++;
        if ($c % 1000 == 0 && memory_get_usage() / 1024 / 1024 > $limit || $c > $batch) {
            $n = sizeof($buckets);
            $size = 0;
            $result = array();
            foreach ($buckets as $key2 => $value2) {
                #value是一个array
                array_push($result, serialize($key2));
                $d = serialize($value2);
                unset($value2);
                array_push($result, $d);
                $size += strlen($d);
            }
            $avg = intval($size / $n) >> 20;
            # let 1M < avg < 10M
            if ($avg < 1) {
                $batch *= 1.5;
            } elseif ($avg > 10) {
                $batch = max(intval($batch / 1.5), 1);
            }
            $c = 0;
            return $result;
        }
    }
    $result = array();
    foreach ($buckets as $key => $value) {
        file_put_contents('/home/gt/php_worker9.txt', 'here ' . $key . ' ' . $value . '
', FILE_APPEND);
        array_push($result, serialize($key));
        array_push($result, serialize($value));
    }
    return $result;
};";s:7:"context";a:3:{s:13:"numPartitions";i:2;s:13:"partitionFunc";C:32:"SuperClosure\SerializableClosure":240:{a:5:{s:4:"code";s:137:"function ($x) {
    if ($x == null) {
        return 0;
    }
    $h = null;
    if (is_array($x)) {
    }
    return hash('md5', $x);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:5:"limit";i:256;}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":3796:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":1619:{a:5:{s:4:"code";s:67:"function ($split, $iterator) use($f) {
    return $f($iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":1395:{a:5:{s:4:"code";s:332:"function ($iterator) use($memory, $serializer, $createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc) {
    $agg = new \aggregator($createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc);
    $merger = new \ExternalMerger($agg, $memory * 0.9, $serializer);
    $merger->mergeValues($iterator);
    return $merger->items();
};";s:7:"context";a:5:{s:6:"memory";i:512;s:10:"serializer";O:23:"auto_batched_serializer":10:{s:9:"best_size";i:65536;s:20:"UNLIMITED_BATCH_SIZE";i:-1;s:18:"UNKNOWN_BATCH_SIZE";i:0;s:10:"serializer";N;s:10:"batch_size";i:0;s:19:"END_OF_DATA_SECTION";i:-1;s:20:"PHP_EXCEPTION_THROWN";i:-2;s:11:"TIMING_DATA";i:-3;s:13:"END_OF_STREAM";i:-4;s:4:"NULL";i:-5;}s:18:"createCombinerFunc";C:32:"SuperClosure\SerializableClosure":135:{a:5:{s:4:"code";s:33:"function ($x) {
    return $x;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"mergeValueFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}s:18:"mergeCombinersFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1813:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":369:{a:5:{s:4:"code";s:76:"function ($any, $iterator) use($f) {
    return array_map($f, $iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":137:{a:5:{s:4:"code";s:43:"function ($x) {
    return array($x, 1);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1081:{a:5:{s:4:"code";s:758:"function ($split, $iterator) use($f) {
    $sub_is_array = False;
    foreach ($iterator as $key => $value) {
        $temp = $f($value);
        if (is_array($temp)) {
            $sub_is_array = True;
            break;
        }
    }
    if ($sub_is_array) {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            if (is_array($temp)) {
                foreach ($temp as $e) {
                    array_push($result, $e);
                }
            }
        }
        return $result;
    } else {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            array_push($result, $temp);
        }
        return $result;
    }
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":166:{a:5:{s:4:"code";s:72:"function ($line) {
    $temp = explode(' ', $line);
    return $temp;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}
here5
here6do do do 
here7 array
here7a string
here7a string
here8  Array
here3C:32:"SuperClosure\SerializableClosure":6118:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":1958:{a:5:{s:4:"code";s:1504:"function ($split, $iterator) use($numPartitions, $partitionFunc, $limit, $outputSerializer) {
    $buckets = array();
    $c = 0;
    $batch = min(10 * $numPartitions, 1000);
    foreach ($iterator as $key => $value) {
        #wordcount为例，这是word=>count
        $buckets[$partitionFunc($key) % $numPartitions] = array();
        $buckets[$partitionFunc($key) % $numPartitions][$key] = $value;
        $c++;
        if ($c % 1000 == 0 && memory_get_usage() / 1024 / 1024 > $limit || $c > $batch) {
            $n = sizeof($buckets);
            $size = 0;
            $result = array();
            foreach ($buckets as $key2 => $value2) {
                #value是一个array
                array_push($result, serialize($key2));
                $d = serialize($value2);
                unset($value2);
                array_push($result, $d);
                $size += strlen($d);
            }
            $avg = intval($size / $n) >> 20;
            # let 1M < avg < 10M
            if ($avg < 1) {
                $batch *= 1.5;
            } elseif ($avg > 10) {
                $batch = max(intval($batch / 1.5), 1);
            }
            $c = 0;
            return $result;
        }
    }
    $result = array();
    foreach ($buckets as $key => $value) {
        file_put_contents('/home/gt/php_worker9.txt', 'here ' . $key . ' ' . $value . '
', FILE_APPEND);
        array_push($result, serialize($key));
        array_push($result, serialize($value));
    }
    return $result;
};";s:7:"context";a:3:{s:13:"numPartitions";i:2;s:13:"partitionFunc";C:32:"SuperClosure\SerializableClosure":240:{a:5:{s:4:"code";s:137:"function ($x) {
    if ($x == null) {
        return 0;
    }
    $h = null;
    if (is_array($x)) {
    }
    return hash('md5', $x);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:5:"limit";i:256;}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":3796:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":1619:{a:5:{s:4:"code";s:67:"function ($split, $iterator) use($f) {
    return $f($iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":1395:{a:5:{s:4:"code";s:332:"function ($iterator) use($memory, $serializer, $createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc) {
    $agg = new \aggregator($createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc);
    $merger = new \ExternalMerger($agg, $memory * 0.9, $serializer);
    $merger->mergeValues($iterator);
    return $merger->items();
};";s:7:"context";a:5:{s:6:"memory";i:512;s:10:"serializer";O:23:"auto_batched_serializer":10:{s:9:"best_size";i:65536;s:20:"UNLIMITED_BATCH_SIZE";i:-1;s:18:"UNKNOWN_BATCH_SIZE";i:0;s:10:"serializer";N;s:10:"batch_size";i:0;s:19:"END_OF_DATA_SECTION";i:-1;s:20:"PHP_EXCEPTION_THROWN";i:-2;s:11:"TIMING_DATA";i:-3;s:13:"END_OF_STREAM";i:-4;s:4:"NULL";i:-5;}s:18:"createCombinerFunc";C:32:"SuperClosure\SerializableClosure":135:{a:5:{s:4:"code";s:33:"function ($x) {
    return $x;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"mergeValueFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}s:18:"mergeCombinersFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1813:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":369:{a:5:{s:4:"code";s:76:"function ($any, $iterator) use($f) {
    return array_map($f, $iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":137:{a:5:{s:4:"code";s:43:"function ($x) {
    return array($x, 1);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1081:{a:5:{s:4:"code";s:758:"function ($split, $iterator) use($f) {
    $sub_is_array = False;
    foreach ($iterator as $key => $value) {
        $temp = $f($value);
        if (is_array($temp)) {
            $sub_is_array = True;
            break;
        }
    }
    if ($sub_is_array) {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            if (is_array($temp)) {
                foreach ($temp as $e) {
                    array_push($result, $e);
                }
            }
        }
        return $result;
    } else {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            array_push($result, $temp);
        }
        return $result;
    }
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":166:{a:5:{s:4:"code";s:72:"function ($line) {
    $temp = explode(' ', $line);
    return $temp;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}
here5
here6test test test test try try try 
here7 array
here7a string
here7a string
here8  Array
socket_create()成功41687

socket_connect()成功
首次read_int()成功1
首次read_utf()成功5.6
here3C:32:"SuperClosure\SerializableClosure":6118:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":1958:{a:5:{s:4:"code";s:1504:"function ($split, $iterator) use($numPartitions, $partitionFunc, $limit, $outputSerializer) {
    $buckets = array();
    $c = 0;
    $batch = min(10 * $numPartitions, 1000);
    foreach ($iterator as $key => $value) {
        #wordcount为例，这是word=>count
        $buckets[$partitionFunc($key) % $numPartitions] = array();
        $buckets[$partitionFunc($key) % $numPartitions][$key] = $value;
        $c++;
        if ($c % 1000 == 0 && memory_get_usage() / 1024 / 1024 > $limit || $c > $batch) {
            $n = sizeof($buckets);
            $size = 0;
            $result = array();
            foreach ($buckets as $key2 => $value2) {
                #value是一个array
                array_push($result, serialize($key2));
                $d = serialize($value2);
                unset($value2);
                array_push($result, $d);
                $size += strlen($d);
            }
            $avg = intval($size / $n) >> 20;
            # let 1M < avg < 10M
            if ($avg < 1) {
                $batch *= 1.5;
            } elseif ($avg > 10) {
                $batch = max(intval($batch / 1.5), 1);
            }
            $c = 0;
            return $result;
        }
    }
    $result = array();
    foreach ($buckets as $key => $value) {
        file_put_contents('/home/gt/php_worker9.txt', 'here ' . $key . ' ' . $value . '
', FILE_APPEND);
        array_push($result, serialize($key));
        array_push($result, serialize($value));
    }
    return $result;
};";s:7:"context";a:3:{s:13:"numPartitions";i:2;s:13:"partitionFunc";C:32:"SuperClosure\SerializableClosure":240:{a:5:{s:4:"code";s:137:"function ($x) {
    if ($x == null) {
        return 0;
    }
    $h = null;
    if (is_array($x)) {
    }
    return hash('md5', $x);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:5:"limit";i:256;}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":3796:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":1619:{a:5:{s:4:"code";s:67:"function ($split, $iterator) use($f) {
    return $f($iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":1395:{a:5:{s:4:"code";s:332:"function ($iterator) use($memory, $serializer, $createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc) {
    $agg = new \aggregator($createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc);
    $merger = new \ExternalMerger($agg, $memory * 0.9, $serializer);
    $merger->mergeValues($iterator);
    return $merger->items();
};";s:7:"context";a:5:{s:6:"memory";i:512;s:10:"serializer";O:23:"auto_batched_serializer":10:{s:9:"best_size";i:65536;s:20:"UNLIMITED_BATCH_SIZE";i:-1;s:18:"UNKNOWN_BATCH_SIZE";i:0;s:10:"serializer";N;s:10:"batch_size";i:0;s:19:"END_OF_DATA_SECTION";i:-1;s:20:"PHP_EXCEPTION_THROWN";i:-2;s:11:"TIMING_DATA";i:-3;s:13:"END_OF_STREAM";i:-4;s:4:"NULL";i:-5;}s:18:"createCombinerFunc";C:32:"SuperClosure\SerializableClosure":135:{a:5:{s:4:"code";s:33:"function ($x) {
    return $x;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"mergeValueFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}s:18:"mergeCombinersFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1813:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":369:{a:5:{s:4:"code";s:76:"function ($any, $iterator) use($f) {
    return array_map($f, $iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":137:{a:5:{s:4:"code";s:43:"function ($x) {
    return array($x, 1);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1081:{a:5:{s:4:"code";s:758:"function ($split, $iterator) use($f) {
    $sub_is_array = False;
    foreach ($iterator as $key => $value) {
        $temp = $f($value);
        if (is_array($temp)) {
            $sub_is_array = True;
            break;
        }
    }
    if ($sub_is_array) {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            if (is_array($temp)) {
                foreach ($temp as $e) {
                    array_push($result, $e);
                }
            }
        }
        return $result;
    } else {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            array_push($result, $temp);
        }
        return $result;
    }
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":166:{a:5:{s:4:"code";s:72:"function ($line) {
    $temp = explode(' ', $line);
    return $temp;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}
here5
here6do do do 
here7 array
here7a string
here7a string
here8  Array
socket_create()成功33281

socket_connect()成功
首次read_int()成功0
首次read_utf()成功5.6
socket_create()成功37146

socket_connect()成功
socket_create()成功33112

socket_connect()成功
首次read_int()成功1
首次read_utf()成功5.6
here3C:32:"SuperClosure\SerializableClosure":6224:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":2064:{a:5:{s:4:"code";s:1610:"function ($split, $iterator) use($numPartitions, $partitionFunc, $limit, $outputSerializer) {
    $buckets = array();
    $c = 0;
    $batch = min(10 * $numPartitions, 1000);
    foreach ($iterator as $key => $value) {
        #wordcount为例，这是word=>count
        file_put_contents('/home/gt/php_worker9.txt', 'here0 ' . $key . ' ' . $value . '
', FILE_APPEND);
        $buckets[$partitionFunc($key) % $numPartitions] = array();
        $buckets[$partitionFunc($key) % $numPartitions][$key] = $value;
        $c++;
        if ($c % 1000 == 0 && memory_get_usage() / 1024 / 1024 > $limit || $c > $batch) {
            $n = sizeof($buckets);
            $size = 0;
            $result = array();
            foreach ($buckets as $key2 => $value2) {
                #value是一个array
                array_push($result, serialize($key2));
                $d = serialize($value2);
                unset($value2);
                array_push($result, $d);
                $size += strlen($d);
            }
            $avg = intval($size / $n) >> 20;
            # let 1M < avg < 10M
            if ($avg < 1) {
                $batch *= 1.5;
            } elseif ($avg > 10) {
                $batch = max(intval($batch / 1.5), 1);
            }
            $c = 0;
            return $result;
        }
    }
    $result = array();
    foreach ($buckets as $key => $value) {
        file_put_contents('/home/gt/php_worker9.txt', 'here ' . $key . ' ' . $value . '
', FILE_APPEND);
        array_push($result, serialize($key));
        array_push($result, serialize($value));
    }
    return $result;
};";s:7:"context";a:3:{s:13:"numPartitions";i:2;s:13:"partitionFunc";C:32:"SuperClosure\SerializableClosure":240:{a:5:{s:4:"code";s:137:"function ($x) {
    if ($x == null) {
        return 0;
    }
    $h = null;
    if (is_array($x)) {
    }
    return hash('md5', $x);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:5:"limit";i:256;}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":3796:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":1619:{a:5:{s:4:"code";s:67:"function ($split, $iterator) use($f) {
    return $f($iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":1395:{a:5:{s:4:"code";s:332:"function ($iterator) use($memory, $serializer, $createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc) {
    $agg = new \aggregator($createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc);
    $merger = new \ExternalMerger($agg, $memory * 0.9, $serializer);
    $merger->mergeValues($iterator);
    return $merger->items();
};";s:7:"context";a:5:{s:6:"memory";i:512;s:10:"serializer";O:23:"auto_batched_serializer":10:{s:9:"best_size";i:65536;s:20:"UNLIMITED_BATCH_SIZE";i:-1;s:18:"UNKNOWN_BATCH_SIZE";i:0;s:10:"serializer";N;s:10:"batch_size";i:0;s:19:"END_OF_DATA_SECTION";i:-1;s:20:"PHP_EXCEPTION_THROWN";i:-2;s:11:"TIMING_DATA";i:-3;s:13:"END_OF_STREAM";i:-4;s:4:"NULL";i:-5;}s:18:"createCombinerFunc";C:32:"SuperClosure\SerializableClosure":135:{a:5:{s:4:"code";s:33:"function ($x) {
    return $x;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"mergeValueFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}s:18:"mergeCombinersFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1813:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":369:{a:5:{s:4:"code";s:76:"function ($any, $iterator) use($f) {
    return array_map($f, $iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":137:{a:5:{s:4:"code";s:43:"function ($x) {
    return array($x, 1);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1081:{a:5:{s:4:"code";s:758:"function ($split, $iterator) use($f) {
    $sub_is_array = False;
    foreach ($iterator as $key => $value) {
        $temp = $f($value);
        if (is_array($temp)) {
            $sub_is_array = True;
            break;
        }
    }
    if ($sub_is_array) {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            if (is_array($temp)) {
                foreach ($temp as $e) {
                    array_push($result, $e);
                }
            }
        }
        return $result;
    } else {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            array_push($result, $temp);
        }
        return $result;
    }
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":166:{a:5:{s:4:"code";s:72:"function ($line) {
    $temp = explode(' ', $line);
    return $temp;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}
here5
here6do do do 
here7 array
here7a string
here7a string
here8  Array
首次read_int()成功0
首次read_utf()成功5.6
here3C:32:"SuperClosure\SerializableClosure":6224:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":2064:{a:5:{s:4:"code";s:1610:"function ($split, $iterator) use($numPartitions, $partitionFunc, $limit, $outputSerializer) {
    $buckets = array();
    $c = 0;
    $batch = min(10 * $numPartitions, 1000);
    foreach ($iterator as $key => $value) {
        #wordcount为例，这是word=>count
        file_put_contents('/home/gt/php_worker9.txt', 'here0 ' . $key . ' ' . $value . '
', FILE_APPEND);
        $buckets[$partitionFunc($key) % $numPartitions] = array();
        $buckets[$partitionFunc($key) % $numPartitions][$key] = $value;
        $c++;
        if ($c % 1000 == 0 && memory_get_usage() / 1024 / 1024 > $limit || $c > $batch) {
            $n = sizeof($buckets);
            $size = 0;
            $result = array();
            foreach ($buckets as $key2 => $value2) {
                #value是一个array
                array_push($result, serialize($key2));
                $d = serialize($value2);
                unset($value2);
                array_push($result, $d);
                $size += strlen($d);
            }
            $avg = intval($size / $n) >> 20;
            # let 1M < avg < 10M
            if ($avg < 1) {
                $batch *= 1.5;
            } elseif ($avg > 10) {
                $batch = max(intval($batch / 1.5), 1);
            }
            $c = 0;
            return $result;
        }
    }
    $result = array();
    foreach ($buckets as $key => $value) {
        file_put_contents('/home/gt/php_worker9.txt', 'here ' . $key . ' ' . $value . '
', FILE_APPEND);
        array_push($result, serialize($key));
        array_push($result, serialize($value));
    }
    return $result;
};";s:7:"context";a:3:{s:13:"numPartitions";i:2;s:13:"partitionFunc";C:32:"SuperClosure\SerializableClosure":240:{a:5:{s:4:"code";s:137:"function ($x) {
    if ($x == null) {
        return 0;
    }
    $h = null;
    if (is_array($x)) {
    }
    return hash('md5', $x);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:5:"limit";i:256;}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":3796:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":1619:{a:5:{s:4:"code";s:67:"function ($split, $iterator) use($f) {
    return $f($iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":1395:{a:5:{s:4:"code";s:332:"function ($iterator) use($memory, $serializer, $createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc) {
    $agg = new \aggregator($createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc);
    $merger = new \ExternalMerger($agg, $memory * 0.9, $serializer);
    $merger->mergeValues($iterator);
    return $merger->items();
};";s:7:"context";a:5:{s:6:"memory";i:512;s:10:"serializer";O:23:"auto_batched_serializer":10:{s:9:"best_size";i:65536;s:20:"UNLIMITED_BATCH_SIZE";i:-1;s:18:"UNKNOWN_BATCH_SIZE";i:0;s:10:"serializer";N;s:10:"batch_size";i:0;s:19:"END_OF_DATA_SECTION";i:-1;s:20:"PHP_EXCEPTION_THROWN";i:-2;s:11:"TIMING_DATA";i:-3;s:13:"END_OF_STREAM";i:-4;s:4:"NULL";i:-5;}s:18:"createCombinerFunc";C:32:"SuperClosure\SerializableClosure":135:{a:5:{s:4:"code";s:33:"function ($x) {
    return $x;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"mergeValueFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}s:18:"mergeCombinersFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1813:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":369:{a:5:{s:4:"code";s:76:"function ($any, $iterator) use($f) {
    return array_map($f, $iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":137:{a:5:{s:4:"code";s:43:"function ($x) {
    return array($x, 1);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1081:{a:5:{s:4:"code";s:758:"function ($split, $iterator) use($f) {
    $sub_is_array = False;
    foreach ($iterator as $key => $value) {
        $temp = $f($value);
        if (is_array($temp)) {
            $sub_is_array = True;
            break;
        }
    }
    if ($sub_is_array) {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            if (is_array($temp)) {
                foreach ($temp as $e) {
                    array_push($result, $e);
                }
            }
        }
        return $result;
    } else {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            array_push($result, $temp);
        }
        return $result;
    }
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":166:{a:5:{s:4:"code";s:72:"function ($line) {
    $temp = explode(' ', $line);
    return $temp;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}
here5
here6test test test test try try try 
here7 array
here7a string
here7a string
here8  Array
socket_create()成功55358

socket_connect()成功
首次read_int()成功0
首次read_utf()成功5.6
here3C:32:"SuperClosure\SerializableClosure":6224:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":2064:{a:5:{s:4:"code";s:1610:"function ($split, $iterator) use($numPartitions, $partitionFunc, $limit, $outputSerializer) {
    $buckets = array();
    $c = 0;
    $batch = min(10 * $numPartitions, 1000);
    foreach ($iterator as $key => $value) {
        #wordcount为例，这是word=>count
        file_put_contents('/home/gt/php_worker9.txt', 'here0 ' . $key . ' ' . $value . '
', FILE_APPEND);
        $buckets[$partitionFunc($key) % $numPartitions] = array();
        $buckets[$partitionFunc($key) % $numPartitions][$key] = $value;
        $c++;
        if ($c % 1000 == 0 && memory_get_usage() / 1024 / 1024 > $limit || $c > $batch) {
            $n = sizeof($buckets);
            $size = 0;
            $result = array();
            foreach ($buckets as $key2 => $value2) {
                #value是一个array
                array_push($result, serialize($key2));
                $d = serialize($value2);
                unset($value2);
                array_push($result, $d);
                $size += strlen($d);
            }
            $avg = intval($size / $n) >> 20;
            # let 1M < avg < 10M
            if ($avg < 1) {
                $batch *= 1.5;
            } elseif ($avg > 10) {
                $batch = max(intval($batch / 1.5), 1);
            }
            $c = 0;
            return $result;
        }
    }
    $result = array();
    foreach ($buckets as $key => $value) {
        file_put_contents('/home/gt/php_worker9.txt', 'here ' . $key . ' ' . $value . '
', FILE_APPEND);
        array_push($result, serialize($key));
        array_push($result, serialize($value));
    }
    return $result;
};";s:7:"context";a:3:{s:13:"numPartitions";i:2;s:13:"partitionFunc";C:32:"SuperClosure\SerializableClosure":240:{a:5:{s:4:"code";s:137:"function ($x) {
    if ($x == null) {
        return 0;
    }
    $h = null;
    if (is_array($x)) {
    }
    return hash('md5', $x);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:5:"limit";i:256;}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":3796:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":1619:{a:5:{s:4:"code";s:67:"function ($split, $iterator) use($f) {
    return $f($iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":1395:{a:5:{s:4:"code";s:332:"function ($iterator) use($memory, $serializer, $createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc) {
    $agg = new \aggregator($createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc);
    $merger = new \ExternalMerger($agg, $memory * 0.9, $serializer);
    $merger->mergeValues($iterator);
    return $merger->items();
};";s:7:"context";a:5:{s:6:"memory";i:512;s:10:"serializer";O:23:"auto_batched_serializer":10:{s:9:"best_size";i:65536;s:20:"UNLIMITED_BATCH_SIZE";i:-1;s:18:"UNKNOWN_BATCH_SIZE";i:0;s:10:"serializer";N;s:10:"batch_size";i:0;s:19:"END_OF_DATA_SECTION";i:-1;s:20:"PHP_EXCEPTION_THROWN";i:-2;s:11:"TIMING_DATA";i:-3;s:13:"END_OF_STREAM";i:-4;s:4:"NULL";i:-5;}s:18:"createCombinerFunc";C:32:"SuperClosure\SerializableClosure":135:{a:5:{s:4:"code";s:33:"function ($x) {
    return $x;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"mergeValueFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}s:18:"mergeCombinersFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1813:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":369:{a:5:{s:4:"code";s:76:"function ($any, $iterator) use($f) {
    return array_map($f, $iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":137:{a:5:{s:4:"code";s:43:"function ($x) {
    return array($x, 1);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1081:{a:5:{s:4:"code";s:758:"function ($split, $iterator) use($f) {
    $sub_is_array = False;
    foreach ($iterator as $key => $value) {
        $temp = $f($value);
        if (is_array($temp)) {
            $sub_is_array = True;
            break;
        }
    }
    if ($sub_is_array) {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            if (is_array($temp)) {
                foreach ($temp as $e) {
                    array_push($result, $e);
                }
            }
        }
        return $result;
    } else {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            array_push($result, $temp);
        }
        return $result;
    }
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":166:{a:5:{s:4:"code";s:72:"function ($line) {
    $temp = explode(' ', $line);
    return $temp;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}
here5
here6test test test test try try try 
here7 array
here7a string
here7a string
here8  Array
socket_create()成功37552

socket_connect()成功
首次read_int()成功1
首次read_utf()成功5.6
here3C:32:"SuperClosure\SerializableClosure":6224:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":2064:{a:5:{s:4:"code";s:1610:"function ($split, $iterator) use($numPartitions, $partitionFunc, $limit, $outputSerializer) {
    $buckets = array();
    $c = 0;
    $batch = min(10 * $numPartitions, 1000);
    foreach ($iterator as $key => $value) {
        #wordcount为例，这是word=>count
        file_put_contents('/home/gt/php_worker9.txt', 'here0 ' . $key . ' ' . $value . '
', FILE_APPEND);
        $buckets[$partitionFunc($key) % $numPartitions] = array();
        $buckets[$partitionFunc($key) % $numPartitions][$key] = $value;
        $c++;
        if ($c % 1000 == 0 && memory_get_usage() / 1024 / 1024 > $limit || $c > $batch) {
            $n = sizeof($buckets);
            $size = 0;
            $result = array();
            foreach ($buckets as $key2 => $value2) {
                #value是一个array
                array_push($result, serialize($key2));
                $d = serialize($value2);
                unset($value2);
                array_push($result, $d);
                $size += strlen($d);
            }
            $avg = intval($size / $n) >> 20;
            # let 1M < avg < 10M
            if ($avg < 1) {
                $batch *= 1.5;
            } elseif ($avg > 10) {
                $batch = max(intval($batch / 1.5), 1);
            }
            $c = 0;
            return $result;
        }
    }
    $result = array();
    foreach ($buckets as $key => $value) {
        file_put_contents('/home/gt/php_worker9.txt', 'here ' . $key . ' ' . $value . '
', FILE_APPEND);
        array_push($result, serialize($key));
        array_push($result, serialize($value));
    }
    return $result;
};";s:7:"context";a:3:{s:13:"numPartitions";i:2;s:13:"partitionFunc";C:32:"SuperClosure\SerializableClosure":240:{a:5:{s:4:"code";s:137:"function ($x) {
    if ($x == null) {
        return 0;
    }
    $h = null;
    if (is_array($x)) {
    }
    return hash('md5', $x);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:5:"limit";i:256;}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":3796:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":1619:{a:5:{s:4:"code";s:67:"function ($split, $iterator) use($f) {
    return $f($iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":1395:{a:5:{s:4:"code";s:332:"function ($iterator) use($memory, $serializer, $createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc) {
    $agg = new \aggregator($createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc);
    $merger = new \ExternalMerger($agg, $memory * 0.9, $serializer);
    $merger->mergeValues($iterator);
    return $merger->items();
};";s:7:"context";a:5:{s:6:"memory";i:512;s:10:"serializer";O:23:"auto_batched_serializer":10:{s:9:"best_size";i:65536;s:20:"UNLIMITED_BATCH_SIZE";i:-1;s:18:"UNKNOWN_BATCH_SIZE";i:0;s:10:"serializer";N;s:10:"batch_size";i:0;s:19:"END_OF_DATA_SECTION";i:-1;s:20:"PHP_EXCEPTION_THROWN";i:-2;s:11:"TIMING_DATA";i:-3;s:13:"END_OF_STREAM";i:-4;s:4:"NULL";i:-5;}s:18:"createCombinerFunc";C:32:"SuperClosure\SerializableClosure":135:{a:5:{s:4:"code";s:33:"function ($x) {
    return $x;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"mergeValueFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}s:18:"mergeCombinersFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1813:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":369:{a:5:{s:4:"code";s:76:"function ($any, $iterator) use($f) {
    return array_map($f, $iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":137:{a:5:{s:4:"code";s:43:"function ($x) {
    return array($x, 1);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1081:{a:5:{s:4:"code";s:758:"function ($split, $iterator) use($f) {
    $sub_is_array = False;
    foreach ($iterator as $key => $value) {
        $temp = $f($value);
        if (is_array($temp)) {
            $sub_is_array = True;
            break;
        }
    }
    if ($sub_is_array) {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            if (is_array($temp)) {
                foreach ($temp as $e) {
                    array_push($result, $e);
                }
            }
        }
        return $result;
    } else {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            array_push($result, $temp);
        }
        return $result;
    }
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":166:{a:5:{s:4:"code";s:72:"function ($line) {
    $temp = explode(' ', $line);
    return $temp;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}
socket_create()成功34713

socket_connect()成功
here5
here6do do do 
here7 array
here7a string
here7a string
here8  Array
首次read_int()成功0
首次read_utf()成功5.6
here3C:32:"SuperClosure\SerializableClosure":6224:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":2064:{a:5:{s:4:"code";s:1610:"function ($split, $iterator) use($numPartitions, $partitionFunc, $limit, $outputSerializer) {
    $buckets = array();
    $c = 0;
    $batch = min(10 * $numPartitions, 1000);
    foreach ($iterator as $key => $value) {
        #wordcount为例，这是word=>count
        file_put_contents('/home/gt/php_worker9.txt', 'here0 ' . $key . ' ' . $value . '
', FILE_APPEND);
        $buckets[$partitionFunc($key) % $numPartitions] = array();
        $buckets[$partitionFunc($key) % $numPartitions][$key] = $value;
        $c++;
        if ($c % 1000 == 0 && memory_get_usage() / 1024 / 1024 > $limit || $c > $batch) {
            $n = sizeof($buckets);
            $size = 0;
            $result = array();
            foreach ($buckets as $key2 => $value2) {
                #value是一个array
                array_push($result, serialize($key2));
                $d = serialize($value2);
                unset($value2);
                array_push($result, $d);
                $size += strlen($d);
            }
            $avg = intval($size / $n) >> 20;
            # let 1M < avg < 10M
            if ($avg < 1) {
                $batch *= 1.5;
            } elseif ($avg > 10) {
                $batch = max(intval($batch / 1.5), 1);
            }
            $c = 0;
            return $result;
        }
    }
    $result = array();
    foreach ($buckets as $key => $value) {
        file_put_contents('/home/gt/php_worker9.txt', 'here ' . $key . ' ' . $value . '
', FILE_APPEND);
        array_push($result, serialize($key));
        array_push($result, serialize($value));
    }
    return $result;
};";s:7:"context";a:3:{s:13:"numPartitions";i:2;s:13:"partitionFunc";C:32:"SuperClosure\SerializableClosure":240:{a:5:{s:4:"code";s:137:"function ($x) {
    if ($x == null) {
        return 0;
    }
    $h = null;
    if (is_array($x)) {
    }
    return hash('md5', $x);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:5:"limit";i:256;}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":3796:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":1619:{a:5:{s:4:"code";s:67:"function ($split, $iterator) use($f) {
    return $f($iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":1395:{a:5:{s:4:"code";s:332:"function ($iterator) use($memory, $serializer, $createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc) {
    $agg = new \aggregator($createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc);
    $merger = new \ExternalMerger($agg, $memory * 0.9, $serializer);
    $merger->mergeValues($iterator);
    return $merger->items();
};";s:7:"context";a:5:{s:6:"memory";i:512;s:10:"serializer";O:23:"auto_batched_serializer":10:{s:9:"best_size";i:65536;s:20:"UNLIMITED_BATCH_SIZE";i:-1;s:18:"UNKNOWN_BATCH_SIZE";i:0;s:10:"serializer";N;s:10:"batch_size";i:0;s:19:"END_OF_DATA_SECTION";i:-1;s:20:"PHP_EXCEPTION_THROWN";i:-2;s:11:"TIMING_DATA";i:-3;s:13:"END_OF_STREAM";i:-4;s:4:"NULL";i:-5;}s:18:"createCombinerFunc";C:32:"SuperClosure\SerializableClosure":135:{a:5:{s:4:"code";s:33:"function ($x) {
    return $x;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"mergeValueFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}s:18:"mergeCombinersFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1813:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":369:{a:5:{s:4:"code";s:76:"function ($any, $iterator) use($f) {
    return array_map($f, $iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":137:{a:5:{s:4:"code";s:43:"function ($x) {
    return array($x, 1);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1081:{a:5:{s:4:"code";s:758:"function ($split, $iterator) use($f) {
    $sub_is_array = False;
    foreach ($iterator as $key => $value) {
        $temp = $f($value);
        if (is_array($temp)) {
            $sub_is_array = True;
            break;
        }
    }
    if ($sub_is_array) {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            if (is_array($temp)) {
                foreach ($temp as $e) {
                    array_push($result, $e);
                }
            }
        }
        return $result;
    } else {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            array_push($result, $temp);
        }
        return $result;
    }
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":166:{a:5:{s:4:"code";s:72:"function ($line) {
    $temp = explode(' ', $line);
    return $temp;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}
here5
here6test test test test try try try 
here7 array
here7a string
here7a string
here8  Array
socket_create()成功47315

socket_connect()成功
首次read_int()成功1
首次read_utf()成功5.6
here3C:32:"SuperClosure\SerializableClosure":6224:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":2064:{a:5:{s:4:"code";s:1610:"function ($split, $iterator) use($numPartitions, $partitionFunc, $limit, $outputSerializer) {
    $buckets = array();
    $c = 0;
    $batch = min(10 * $numPartitions, 1000);
    foreach ($iterator as $key => $value) {
        #wordcount为例，这是word=>count
        file_put_contents('/home/gt/php_worker9.txt', 'here0 ' . $key . ' ' . $value . '
', FILE_APPEND);
        $buckets[$partitionFunc($key) % $numPartitions] = array();
        $buckets[$partitionFunc($key) % $numPartitions][$key] = $value;
        $c++;
        if ($c % 1000 == 0 && memory_get_usage() / 1024 / 1024 > $limit || $c > $batch) {
            $n = sizeof($buckets);
            $size = 0;
            $result = array();
            foreach ($buckets as $key2 => $value2) {
                #value是一个array
                array_push($result, serialize($key2));
                $d = serialize($value2);
                unset($value2);
                array_push($result, $d);
                $size += strlen($d);
            }
            $avg = intval($size / $n) >> 20;
            # let 1M < avg < 10M
            if ($avg < 1) {
                $batch *= 1.5;
            } elseif ($avg > 10) {
                $batch = max(intval($batch / 1.5), 1);
            }
            $c = 0;
            return $result;
        }
    }
    $result = array();
    foreach ($buckets as $key => $value) {
        file_put_contents('/home/gt/php_worker9.txt', 'here ' . $key . ' ' . $value . '
', FILE_APPEND);
        array_push($result, serialize($key));
        array_push($result, serialize($value));
    }
    return $result;
};";s:7:"context";a:3:{s:13:"numPartitions";i:2;s:13:"partitionFunc";C:32:"SuperClosure\SerializableClosure":240:{a:5:{s:4:"code";s:137:"function ($x) {
    if ($x == null) {
        return 0;
    }
    $h = null;
    if (is_array($x)) {
    }
    return hash('md5', $x);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:5:"limit";i:256;}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":3796:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":1619:{a:5:{s:4:"code";s:67:"function ($split, $iterator) use($f) {
    return $f($iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":1395:{a:5:{s:4:"code";s:332:"function ($iterator) use($memory, $serializer, $createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc) {
    $agg = new \aggregator($createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc);
    $merger = new \ExternalMerger($agg, $memory * 0.9, $serializer);
    $merger->mergeValues($iterator);
    return $merger->items();
};";s:7:"context";a:5:{s:6:"memory";i:512;s:10:"serializer";O:23:"auto_batched_serializer":10:{s:9:"best_size";i:65536;s:20:"UNLIMITED_BATCH_SIZE";i:-1;s:18:"UNKNOWN_BATCH_SIZE";i:0;s:10:"serializer";N;s:10:"batch_size";i:0;s:19:"END_OF_DATA_SECTION";i:-1;s:20:"PHP_EXCEPTION_THROWN";i:-2;s:11:"TIMING_DATA";i:-3;s:13:"END_OF_STREAM";i:-4;s:4:"NULL";i:-5;}s:18:"createCombinerFunc";C:32:"SuperClosure\SerializableClosure":135:{a:5:{s:4:"code";s:33:"function ($x) {
    return $x;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"mergeValueFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}s:18:"mergeCombinersFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1813:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":369:{a:5:{s:4:"code";s:76:"function ($any, $iterator) use($f) {
    return array_map($f, $iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":137:{a:5:{s:4:"code";s:43:"function ($x) {
    return array($x, 1);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1081:{a:5:{s:4:"code";s:758:"function ($split, $iterator) use($f) {
    $sub_is_array = False;
    foreach ($iterator as $key => $value) {
        $temp = $f($value);
        if (is_array($temp)) {
            $sub_is_array = True;
            break;
        }
    }
    if ($sub_is_array) {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            if (is_array($temp)) {
                foreach ($temp as $e) {
                    array_push($result, $e);
                }
            }
        }
        return $result;
    } else {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            array_push($result, $temp);
        }
        return $result;
    }
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":166:{a:5:{s:4:"code";s:72:"function ($line) {
    $temp = explode(' ', $line);
    return $temp;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}
here5
here6do do do 
here7 array
here7a string
here7a string
here8  Array
socket_create()成功33070

socket_connect()成功
首次read_int()成功0
首次read_utf()成功5.6
here3C:32:"SuperClosure\SerializableClosure":6224:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":2064:{a:5:{s:4:"code";s:1610:"function ($split, $iterator) use($numPartitions, $partitionFunc, $limit, $outputSerializer) {
    $buckets = array();
    $c = 0;
    $batch = min(10 * $numPartitions, 1000);
    foreach ($iterator as $key => $value) {
        #wordcount为例，这是word=>count
        file_put_contents('/home/gt/php_worker9.txt', 'here0 ' . $key . ' ' . $value . '
', FILE_APPEND);
        $buckets[$partitionFunc($key) % $numPartitions] = array();
        $buckets[$partitionFunc($key) % $numPartitions][$key] = $value;
        $c++;
        if ($c % 1000 == 0 && memory_get_usage() / 1024 / 1024 > $limit || $c > $batch) {
            $n = sizeof($buckets);
            $size = 0;
            $result = array();
            foreach ($buckets as $key2 => $value2) {
                #value是一个array
                array_push($result, serialize($key2));
                $d = serialize($value2);
                unset($value2);
                array_push($result, $d);
                $size += strlen($d);
            }
            $avg = intval($size / $n) >> 20;
            # let 1M < avg < 10M
            if ($avg < 1) {
                $batch *= 1.5;
            } elseif ($avg > 10) {
                $batch = max(intval($batch / 1.5), 1);
            }
            $c = 0;
            return $result;
        }
    }
    $result = array();
    foreach ($buckets as $key => $value) {
        file_put_contents('/home/gt/php_worker9.txt', 'here ' . $key . ' ' . $value . '
', FILE_APPEND);
        array_push($result, serialize($key));
        array_push($result, serialize($value));
    }
    return $result;
};";s:7:"context";a:3:{s:13:"numPartitions";i:2;s:13:"partitionFunc";C:32:"SuperClosure\SerializableClosure":240:{a:5:{s:4:"code";s:137:"function ($x) {
    if ($x == null) {
        return 0;
    }
    $h = null;
    if (is_array($x)) {
    }
    return hash('md5', $x);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:5:"limit";i:256;}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":3796:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":1619:{a:5:{s:4:"code";s:67:"function ($split, $iterator) use($f) {
    return $f($iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":1395:{a:5:{s:4:"code";s:332:"function ($iterator) use($memory, $serializer, $createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc) {
    $agg = new \aggregator($createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc);
    $merger = new \ExternalMerger($agg, $memory * 0.9, $serializer);
    $merger->mergeValues($iterator);
    return $merger->items();
};";s:7:"context";a:5:{s:6:"memory";i:512;s:10:"serializer";O:23:"auto_batched_serializer":10:{s:9:"best_size";i:65536;s:20:"UNLIMITED_BATCH_SIZE";i:-1;s:18:"UNKNOWN_BATCH_SIZE";i:0;s:10:"serializer";N;s:10:"batch_size";i:0;s:19:"END_OF_DATA_SECTION";i:-1;s:20:"PHP_EXCEPTION_THROWN";i:-2;s:11:"TIMING_DATA";i:-3;s:13:"END_OF_STREAM";i:-4;s:4:"NULL";i:-5;}s:18:"createCombinerFunc";C:32:"SuperClosure\SerializableClosure":135:{a:5:{s:4:"code";s:33:"function ($x) {
    return $x;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"mergeValueFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}s:18:"mergeCombinersFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1813:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":369:{a:5:{s:4:"code";s:76:"function ($any, $iterator) use($f) {
    return array_map($f, $iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":137:{a:5:{s:4:"code";s:43:"function ($x) {
    return array($x, 1);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1081:{a:5:{s:4:"code";s:758:"function ($split, $iterator) use($f) {
    $sub_is_array = False;
    foreach ($iterator as $key => $value) {
        $temp = $f($value);
        if (is_array($temp)) {
            $sub_is_array = True;
            break;
        }
    }
    if ($sub_is_array) {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            if (is_array($temp)) {
                foreach ($temp as $e) {
                    array_push($result, $e);
                }
            }
        }
        return $result;
    } else {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            array_push($result, $temp);
        }
        return $result;
    }
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":166:{a:5:{s:4:"code";s:72:"function ($line) {
    $temp = explode(' ', $line);
    return $temp;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}
here5
here6test test test test try try try 
here7 array
here7a string
here7a string
here8  Array
socket_create()成功49962

socket_connect()成功
首次read_int()成功1
首次read_utf()成功5.6
here3C:32:"SuperClosure\SerializableClosure":6224:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":2064:{a:5:{s:4:"code";s:1610:"function ($split, $iterator) use($numPartitions, $partitionFunc, $limit, $outputSerializer) {
    $buckets = array();
    $c = 0;
    $batch = min(10 * $numPartitions, 1000);
    foreach ($iterator as $key => $value) {
        #wordcount为例，这是word=>count
        file_put_contents('/home/gt/php_worker9.txt', 'here0 ' . $key . ' ' . $value . '
', FILE_APPEND);
        $buckets[$partitionFunc($key) % $numPartitions] = array();
        $buckets[$partitionFunc($key) % $numPartitions][$key] = $value;
        $c++;
        if ($c % 1000 == 0 && memory_get_usage() / 1024 / 1024 > $limit || $c > $batch) {
            $n = sizeof($buckets);
            $size = 0;
            $result = array();
            foreach ($buckets as $key2 => $value2) {
                #value是一个array
                array_push($result, serialize($key2));
                $d = serialize($value2);
                unset($value2);
                array_push($result, $d);
                $size += strlen($d);
            }
            $avg = intval($size / $n) >> 20;
            # let 1M < avg < 10M
            if ($avg < 1) {
                $batch *= 1.5;
            } elseif ($avg > 10) {
                $batch = max(intval($batch / 1.5), 1);
            }
            $c = 0;
            return $result;
        }
    }
    $result = array();
    foreach ($buckets as $key => $value) {
        file_put_contents('/home/gt/php_worker9.txt', 'here ' . $key . ' ' . $value . '
', FILE_APPEND);
        array_push($result, serialize($key));
        array_push($result, serialize($value));
    }
    return $result;
};";s:7:"context";a:3:{s:13:"numPartitions";i:2;s:13:"partitionFunc";C:32:"SuperClosure\SerializableClosure":240:{a:5:{s:4:"code";s:137:"function ($x) {
    if ($x == null) {
        return 0;
    }
    $h = null;
    if (is_array($x)) {
    }
    return hash('md5', $x);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:5:"limit";i:256;}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":3796:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":1619:{a:5:{s:4:"code";s:67:"function ($split, $iterator) use($f) {
    return $f($iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":1395:{a:5:{s:4:"code";s:332:"function ($iterator) use($memory, $serializer, $createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc) {
    $agg = new \aggregator($createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc);
    $merger = new \ExternalMerger($agg, $memory * 0.9, $serializer);
    $merger->mergeValues($iterator);
    return $merger->items();
};";s:7:"context";a:5:{s:6:"memory";i:512;s:10:"serializer";O:23:"auto_batched_serializer":10:{s:9:"best_size";i:65536;s:20:"UNLIMITED_BATCH_SIZE";i:-1;s:18:"UNKNOWN_BATCH_SIZE";i:0;s:10:"serializer";N;s:10:"batch_size";i:0;s:19:"END_OF_DATA_SECTION";i:-1;s:20:"PHP_EXCEPTION_THROWN";i:-2;s:11:"TIMING_DATA";i:-3;s:13:"END_OF_STREAM";i:-4;s:4:"NULL";i:-5;}s:18:"createCombinerFunc";C:32:"SuperClosure\SerializableClosure":135:{a:5:{s:4:"code";s:33:"function ($x) {
    return $x;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"mergeValueFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}s:18:"mergeCombinersFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1813:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":369:{a:5:{s:4:"code";s:76:"function ($any, $iterator) use($f) {
    return array_map($f, $iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":137:{a:5:{s:4:"code";s:43:"function ($x) {
    return array($x, 1);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1081:{a:5:{s:4:"code";s:758:"function ($split, $iterator) use($f) {
    $sub_is_array = False;
    foreach ($iterator as $key => $value) {
        $temp = $f($value);
        if (is_array($temp)) {
            $sub_is_array = True;
            break;
        }
    }
    if ($sub_is_array) {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            if (is_array($temp)) {
                foreach ($temp as $e) {
                    array_push($result, $e);
                }
            }
        }
        return $result;
    } else {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            array_push($result, $temp);
        }
        return $result;
    }
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":166:{a:5:{s:4:"code";s:72:"function ($line) {
    $temp = explode(' ', $line);
    return $temp;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}
here5
here6do do do 
here7 array
here7a string
here7a string
here8  Array
socket_create()成功49492

socket_connect()成功
首次read_int()成功0
首次read_utf()成功5.6
here3C:32:"SuperClosure\SerializableClosure":6224:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":2064:{a:5:{s:4:"code";s:1610:"function ($split, $iterator) use($numPartitions, $partitionFunc, $limit, $outputSerializer) {
    $buckets = array();
    $c = 0;
    $batch = min(10 * $numPartitions, 1000);
    foreach ($iterator as $key => $value) {
        #wordcount为例，这是word=>count
        file_put_contents('/home/gt/php_worker9.txt', 'here0 ' . $key . ' ' . $value . '
', FILE_APPEND);
        $buckets[$partitionFunc($key) % $numPartitions] = array();
        $buckets[$partitionFunc($key) % $numPartitions][$key] = $value;
        $c++;
        if ($c % 1000 == 0 && memory_get_usage() / 1024 / 1024 > $limit || $c > $batch) {
            $n = sizeof($buckets);
            $size = 0;
            $result = array();
            foreach ($buckets as $key2 => $value2) {
                #value是一个array
                array_push($result, serialize($key2));
                $d = serialize($value2);
                unset($value2);
                array_push($result, $d);
                $size += strlen($d);
            }
            $avg = intval($size / $n) >> 20;
            # let 1M < avg < 10M
            if ($avg < 1) {
                $batch *= 1.5;
            } elseif ($avg > 10) {
                $batch = max(intval($batch / 1.5), 1);
            }
            $c = 0;
            return $result;
        }
    }
    $result = array();
    foreach ($buckets as $key => $value) {
        file_put_contents('/home/gt/php_worker9.txt', 'here ' . $key . ' ' . $value . '
', FILE_APPEND);
        array_push($result, serialize($key));
        array_push($result, serialize($value));
    }
    return $result;
};";s:7:"context";a:3:{s:13:"numPartitions";i:2;s:13:"partitionFunc";C:32:"SuperClosure\SerializableClosure":240:{a:5:{s:4:"code";s:137:"function ($x) {
    if ($x == null) {
        return 0;
    }
    $h = null;
    if (is_array($x)) {
    }
    return hash('md5', $x);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:5:"limit";i:256;}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":3796:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":1619:{a:5:{s:4:"code";s:67:"function ($split, $iterator) use($f) {
    return $f($iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":1395:{a:5:{s:4:"code";s:332:"function ($iterator) use($memory, $serializer, $createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc) {
    $agg = new \aggregator($createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc);
    $merger = new \ExternalMerger($agg, $memory * 0.9, $serializer);
    $merger->mergeValues($iterator);
    return $merger->items();
};";s:7:"context";a:5:{s:6:"memory";i:512;s:10:"serializer";O:23:"auto_batched_serializer":10:{s:9:"best_size";i:65536;s:20:"UNLIMITED_BATCH_SIZE";i:-1;s:18:"UNKNOWN_BATCH_SIZE";i:0;s:10:"serializer";N;s:10:"batch_size";i:0;s:19:"END_OF_DATA_SECTION";i:-1;s:20:"PHP_EXCEPTION_THROWN";i:-2;s:11:"TIMING_DATA";i:-3;s:13:"END_OF_STREAM";i:-4;s:4:"NULL";i:-5;}s:18:"createCombinerFunc";C:32:"SuperClosure\SerializableClosure":135:{a:5:{s:4:"code";s:33:"function ($x) {
    return $x;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"mergeValueFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}s:18:"mergeCombinersFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1813:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":369:{a:5:{s:4:"code";s:76:"function ($any, $iterator) use($f) {
    return array_map($f, $iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":137:{a:5:{s:4:"code";s:43:"function ($x) {
    return array($x, 1);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1081:{a:5:{s:4:"code";s:758:"function ($split, $iterator) use($f) {
    $sub_is_array = False;
    foreach ($iterator as $key => $value) {
        $temp = $f($value);
        if (is_array($temp)) {
            $sub_is_array = True;
            break;
        }
    }
    if ($sub_is_array) {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            if (is_array($temp)) {
                foreach ($temp as $e) {
                    array_push($result, $e);
                }
            }
        }
        return $result;
    } else {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            array_push($result, $temp);
        }
        return $result;
    }
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":166:{a:5:{s:4:"code";s:72:"function ($line) {
    $temp = explode(' ', $line);
    return $temp;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}
here5
here6test test test test try try try 
here7 array
here7a string
here7a string
here8  Array
socket_create()成功50036

socket_connect()成功
首次read_int()成功1
首次read_utf()成功5.6
here3C:32:"SuperClosure\SerializableClosure":6224:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":2064:{a:5:{s:4:"code";s:1610:"function ($split, $iterator) use($numPartitions, $partitionFunc, $limit, $outputSerializer) {
    $buckets = array();
    $c = 0;
    $batch = min(10 * $numPartitions, 1000);
    foreach ($iterator as $key => $value) {
        #wordcount为例，这是word=>count
        file_put_contents('/home/gt/php_worker9.txt', 'here0 ' . $key . ' ' . $value . '
', FILE_APPEND);
        $buckets[$partitionFunc($key) % $numPartitions] = array();
        $buckets[$partitionFunc($key) % $numPartitions][$key] = $value;
        $c++;
        if ($c % 1000 == 0 && memory_get_usage() / 1024 / 1024 > $limit || $c > $batch) {
            $n = sizeof($buckets);
            $size = 0;
            $result = array();
            foreach ($buckets as $key2 => $value2) {
                #value是一个array
                array_push($result, serialize($key2));
                $d = serialize($value2);
                unset($value2);
                array_push($result, $d);
                $size += strlen($d);
            }
            $avg = intval($size / $n) >> 20;
            # let 1M < avg < 10M
            if ($avg < 1) {
                $batch *= 1.5;
            } elseif ($avg > 10) {
                $batch = max(intval($batch / 1.5), 1);
            }
            $c = 0;
            return $result;
        }
    }
    $result = array();
    foreach ($buckets as $key => $value) {
        file_put_contents('/home/gt/php_worker9.txt', 'here ' . $key . ' ' . $value . '
', FILE_APPEND);
        array_push($result, serialize($key));
        array_push($result, serialize($value));
    }
    return $result;
};";s:7:"context";a:3:{s:13:"numPartitions";i:2;s:13:"partitionFunc";C:32:"SuperClosure\SerializableClosure":240:{a:5:{s:4:"code";s:137:"function ($x) {
    if ($x == null) {
        return 0;
    }
    $h = null;
    if (is_array($x)) {
    }
    return hash('md5', $x);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:5:"limit";i:256;}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":3796:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":1619:{a:5:{s:4:"code";s:67:"function ($split, $iterator) use($f) {
    return $f($iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":1395:{a:5:{s:4:"code";s:332:"function ($iterator) use($memory, $serializer, $createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc) {
    $agg = new \aggregator($createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc);
    $merger = new \ExternalMerger($agg, $memory * 0.9, $serializer);
    $merger->mergeValues($iterator);
    return $merger->items();
};";s:7:"context";a:5:{s:6:"memory";i:512;s:10:"serializer";O:23:"auto_batched_serializer":10:{s:9:"best_size";i:65536;s:20:"UNLIMITED_BATCH_SIZE";i:-1;s:18:"UNKNOWN_BATCH_SIZE";i:0;s:10:"serializer";N;s:10:"batch_size";i:0;s:19:"END_OF_DATA_SECTION";i:-1;s:20:"PHP_EXCEPTION_THROWN";i:-2;s:11:"TIMING_DATA";i:-3;s:13:"END_OF_STREAM";i:-4;s:4:"NULL";i:-5;}s:18:"createCombinerFunc";C:32:"SuperClosure\SerializableClosure":135:{a:5:{s:4:"code";s:33:"function ($x) {
    return $x;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"mergeValueFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}s:18:"mergeCombinersFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1813:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":369:{a:5:{s:4:"code";s:76:"function ($any, $iterator) use($f) {
    return array_map($f, $iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":137:{a:5:{s:4:"code";s:43:"function ($x) {
    return array($x, 1);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1081:{a:5:{s:4:"code";s:758:"function ($split, $iterator) use($f) {
    $sub_is_array = False;
    foreach ($iterator as $key => $value) {
        $temp = $f($value);
        if (is_array($temp)) {
            $sub_is_array = True;
            break;
        }
    }
    if ($sub_is_array) {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            if (is_array($temp)) {
                foreach ($temp as $e) {
                    array_push($result, $e);
                }
            }
        }
        return $result;
    } else {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            array_push($result, $temp);
        }
        return $result;
    }
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":166:{a:5:{s:4:"code";s:72:"function ($line) {
    $temp = explode(' ', $line);
    return $temp;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}
here5
here6do do do 
here7 array
here7a string
here7a string
here8  Array
socket_create()成功53860

socket_connect()成功
首次read_int()成功0
首次read_utf()成功5.6
here3C:32:"SuperClosure\SerializableClosure":6224:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":2064:{a:5:{s:4:"code";s:1610:"function ($split, $iterator) use($numPartitions, $partitionFunc, $limit, $outputSerializer) {
    $buckets = array();
    $c = 0;
    $batch = min(10 * $numPartitions, 1000);
    foreach ($iterator as $key => $value) {
        #wordcount为例，这是word=>count
        file_put_contents('/home/gt/php_worker9.txt', 'here0 ' . $key . ' ' . $value . '
', FILE_APPEND);
        $buckets[$partitionFunc($key) % $numPartitions] = array();
        $buckets[$partitionFunc($key) % $numPartitions][$key] = $value;
        $c++;
        if ($c % 1000 == 0 && memory_get_usage() / 1024 / 1024 > $limit || $c > $batch) {
            $n = sizeof($buckets);
            $size = 0;
            $result = array();
            foreach ($buckets as $key2 => $value2) {
                #value是一个array
                array_push($result, serialize($key2));
                $d = serialize($value2);
                unset($value2);
                array_push($result, $d);
                $size += strlen($d);
            }
            $avg = intval($size / $n) >> 20;
            # let 1M < avg < 10M
            if ($avg < 1) {
                $batch *= 1.5;
            } elseif ($avg > 10) {
                $batch = max(intval($batch / 1.5), 1);
            }
            $c = 0;
            return $result;
        }
    }
    $result = array();
    foreach ($buckets as $key => $value) {
        file_put_contents('/home/gt/php_worker9.txt', 'here ' . $key . ' ' . $value . '
', FILE_APPEND);
        array_push($result, serialize($key));
        array_push($result, serialize($value));
    }
    return $result;
};";s:7:"context";a:3:{s:13:"numPartitions";i:2;s:13:"partitionFunc";C:32:"SuperClosure\SerializableClosure":240:{a:5:{s:4:"code";s:137:"function ($x) {
    if ($x == null) {
        return 0;
    }
    $h = null;
    if (is_array($x)) {
    }
    return hash('md5', $x);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:5:"limit";i:256;}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":3796:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":1619:{a:5:{s:4:"code";s:67:"function ($split, $iterator) use($f) {
    return $f($iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":1395:{a:5:{s:4:"code";s:332:"function ($iterator) use($memory, $serializer, $createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc) {
    $agg = new \aggregator($createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc);
    $merger = new \ExternalMerger($agg, $memory * 0.9, $serializer);
    $merger->mergeValues($iterator);
    return $merger->items();
};";s:7:"context";a:5:{s:6:"memory";i:512;s:10:"serializer";O:23:"auto_batched_serializer":10:{s:9:"best_size";i:65536;s:20:"UNLIMITED_BATCH_SIZE";i:-1;s:18:"UNKNOWN_BATCH_SIZE";i:0;s:10:"serializer";N;s:10:"batch_size";i:0;s:19:"END_OF_DATA_SECTION";i:-1;s:20:"PHP_EXCEPTION_THROWN";i:-2;s:11:"TIMING_DATA";i:-3;s:13:"END_OF_STREAM";i:-4;s:4:"NULL";i:-5;}s:18:"createCombinerFunc";C:32:"SuperClosure\SerializableClosure":135:{a:5:{s:4:"code";s:33:"function ($x) {
    return $x;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"mergeValueFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}s:18:"mergeCombinersFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1813:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":369:{a:5:{s:4:"code";s:76:"function ($any, $iterator) use($f) {
    return array_map($f, $iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":137:{a:5:{s:4:"code";s:43:"function ($x) {
    return array($x, 1);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1081:{a:5:{s:4:"code";s:758:"function ($split, $iterator) use($f) {
    $sub_is_array = False;
    foreach ($iterator as $key => $value) {
        $temp = $f($value);
        if (is_array($temp)) {
            $sub_is_array = True;
            break;
        }
    }
    if ($sub_is_array) {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            if (is_array($temp)) {
                foreach ($temp as $e) {
                    array_push($result, $e);
                }
            }
        }
        return $result;
    } else {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            array_push($result, $temp);
        }
        return $result;
    }
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":166:{a:5:{s:4:"code";s:72:"function ($line) {
    $temp = explode(' ', $line);
    return $temp;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}
here5
here6test test test test try try try 
here7 array
here7a string
here7a string
here8  Array
socket_create()成功39958

socket_connect()成功
首次read_int()成功1
首次read_utf()成功5.6
here3C:32:"SuperClosure\SerializableClosure":6224:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":2064:{a:5:{s:4:"code";s:1610:"function ($split, $iterator) use($numPartitions, $partitionFunc, $limit, $outputSerializer) {
    $buckets = array();
    $c = 0;
    $batch = min(10 * $numPartitions, 1000);
    foreach ($iterator as $key => $value) {
        #wordcount为例，这是word=>count
        file_put_contents('/home/gt/php_worker9.txt', 'here0 ' . $key . ' ' . $value . '
', FILE_APPEND);
        $buckets[$partitionFunc($key) % $numPartitions] = array();
        $buckets[$partitionFunc($key) % $numPartitions][$key] = $value;
        $c++;
        if ($c % 1000 == 0 && memory_get_usage() / 1024 / 1024 > $limit || $c > $batch) {
            $n = sizeof($buckets);
            $size = 0;
            $result = array();
            foreach ($buckets as $key2 => $value2) {
                #value是一个array
                array_push($result, serialize($key2));
                $d = serialize($value2);
                unset($value2);
                array_push($result, $d);
                $size += strlen($d);
            }
            $avg = intval($size / $n) >> 20;
            # let 1M < avg < 10M
            if ($avg < 1) {
                $batch *= 1.5;
            } elseif ($avg > 10) {
                $batch = max(intval($batch / 1.5), 1);
            }
            $c = 0;
            return $result;
        }
    }
    $result = array();
    foreach ($buckets as $key => $value) {
        file_put_contents('/home/gt/php_worker9.txt', 'here ' . $key . ' ' . $value . '
', FILE_APPEND);
        array_push($result, serialize($key));
        array_push($result, serialize($value));
    }
    return $result;
};";s:7:"context";a:3:{s:13:"numPartitions";i:2;s:13:"partitionFunc";C:32:"SuperClosure\SerializableClosure":240:{a:5:{s:4:"code";s:137:"function ($x) {
    if ($x == null) {
        return 0;
    }
    $h = null;
    if (is_array($x)) {
    }
    return hash('md5', $x);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:5:"limit";i:256;}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":3796:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":1619:{a:5:{s:4:"code";s:67:"function ($split, $iterator) use($f) {
    return $f($iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":1395:{a:5:{s:4:"code";s:332:"function ($iterator) use($memory, $serializer, $createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc) {
    $agg = new \aggregator($createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc);
    $merger = new \ExternalMerger($agg, $memory * 0.9, $serializer);
    $merger->mergeValues($iterator);
    return $merger->items();
};";s:7:"context";a:5:{s:6:"memory";i:512;s:10:"serializer";O:23:"auto_batched_serializer":10:{s:9:"best_size";i:65536;s:20:"UNLIMITED_BATCH_SIZE";i:-1;s:18:"UNKNOWN_BATCH_SIZE";i:0;s:10:"serializer";N;s:10:"batch_size";i:0;s:19:"END_OF_DATA_SECTION";i:-1;s:20:"PHP_EXCEPTION_THROWN";i:-2;s:11:"TIMING_DATA";i:-3;s:13:"END_OF_STREAM";i:-4;s:4:"NULL";i:-5;}s:18:"createCombinerFunc";C:32:"SuperClosure\SerializableClosure":135:{a:5:{s:4:"code";s:33:"function ($x) {
    return $x;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"mergeValueFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}s:18:"mergeCombinersFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1813:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":369:{a:5:{s:4:"code";s:76:"function ($any, $iterator) use($f) {
    return array_map($f, $iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":137:{a:5:{s:4:"code";s:43:"function ($x) {
    return array($x, 1);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1081:{a:5:{s:4:"code";s:758:"function ($split, $iterator) use($f) {
    $sub_is_array = False;
    foreach ($iterator as $key => $value) {
        $temp = $f($value);
        if (is_array($temp)) {
            $sub_is_array = True;
            break;
        }
    }
    if ($sub_is_array) {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            if (is_array($temp)) {
                foreach ($temp as $e) {
                    array_push($result, $e);
                }
            }
        }
        return $result;
    } else {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            array_push($result, $temp);
        }
        return $result;
    }
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":166:{a:5:{s:4:"code";s:72:"function ($line) {
    $temp = explode(' ', $line);
    return $temp;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}
here5
here6do do do 
here7 array
here7a string
here7a string
here8  Array
socket_create()成功43901

socket_connect()成功
首次read_int()成功0
首次read_utf()成功5.6
here3C:32:"SuperClosure\SerializableClosure":6224:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":2064:{a:5:{s:4:"code";s:1610:"function ($split, $iterator) use($numPartitions, $partitionFunc, $limit, $outputSerializer) {
    $buckets = array();
    $c = 0;
    $batch = min(10 * $numPartitions, 1000);
    foreach ($iterator as $key => $value) {
        #wordcount为例，这是word=>count
        file_put_contents('/home/gt/php_worker9.txt', 'here0 ' . $key . ' ' . $value . '
', FILE_APPEND);
        $buckets[$partitionFunc($key) % $numPartitions] = array();
        $buckets[$partitionFunc($key) % $numPartitions][$key] = $value;
        $c++;
        if ($c % 1000 == 0 && memory_get_usage() / 1024 / 1024 > $limit || $c > $batch) {
            $n = sizeof($buckets);
            $size = 0;
            $result = array();
            foreach ($buckets as $key2 => $value2) {
                #value是一个array
                array_push($result, serialize($key2));
                $d = serialize($value2);
                unset($value2);
                array_push($result, $d);
                $size += strlen($d);
            }
            $avg = intval($size / $n) >> 20;
            # let 1M < avg < 10M
            if ($avg < 1) {
                $batch *= 1.5;
            } elseif ($avg > 10) {
                $batch = max(intval($batch / 1.5), 1);
            }
            $c = 0;
            return $result;
        }
    }
    $result = array();
    foreach ($buckets as $key => $value) {
        file_put_contents('/home/gt/php_worker9.txt', 'here ' . $key . ' ' . $value . '
', FILE_APPEND);
        array_push($result, serialize($key));
        array_push($result, serialize($value));
    }
    return $result;
};";s:7:"context";a:3:{s:13:"numPartitions";i:2;s:13:"partitionFunc";C:32:"SuperClosure\SerializableClosure":240:{a:5:{s:4:"code";s:137:"function ($x) {
    if ($x == null) {
        return 0;
    }
    $h = null;
    if (is_array($x)) {
    }
    return hash('md5', $x);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:5:"limit";i:256;}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":3796:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":1619:{a:5:{s:4:"code";s:67:"function ($split, $iterator) use($f) {
    return $f($iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":1395:{a:5:{s:4:"code";s:332:"function ($iterator) use($memory, $serializer, $createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc) {
    $agg = new \aggregator($createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc);
    $merger = new \ExternalMerger($agg, $memory * 0.9, $serializer);
    $merger->mergeValues($iterator);
    return $merger->items();
};";s:7:"context";a:5:{s:6:"memory";i:512;s:10:"serializer";O:23:"auto_batched_serializer":10:{s:9:"best_size";i:65536;s:20:"UNLIMITED_BATCH_SIZE";i:-1;s:18:"UNKNOWN_BATCH_SIZE";i:0;s:10:"serializer";N;s:10:"batch_size";i:0;s:19:"END_OF_DATA_SECTION";i:-1;s:20:"PHP_EXCEPTION_THROWN";i:-2;s:11:"TIMING_DATA";i:-3;s:13:"END_OF_STREAM";i:-4;s:4:"NULL";i:-5;}s:18:"createCombinerFunc";C:32:"SuperClosure\SerializableClosure":135:{a:5:{s:4:"code";s:33:"function ($x) {
    return $x;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"mergeValueFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}s:18:"mergeCombinersFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1813:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":369:{a:5:{s:4:"code";s:76:"function ($any, $iterator) use($f) {
    return array_map($f, $iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":137:{a:5:{s:4:"code";s:43:"function ($x) {
    return array($x, 1);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1081:{a:5:{s:4:"code";s:758:"function ($split, $iterator) use($f) {
    $sub_is_array = False;
    foreach ($iterator as $key => $value) {
        $temp = $f($value);
        if (is_array($temp)) {
            $sub_is_array = True;
            break;
        }
    }
    if ($sub_is_array) {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            if (is_array($temp)) {
                foreach ($temp as $e) {
                    array_push($result, $e);
                }
            }
        }
        return $result;
    } else {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            array_push($result, $temp);
        }
        return $result;
    }
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":166:{a:5:{s:4:"code";s:72:"function ($line) {
    $temp = explode(' ', $line);
    return $temp;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}
here5
here6test test test test try try try 
here7 array
here7a string
here7a string
here8  Array
socket_create()成功60540

socket_connect()成功
首次read_int()成功0
首次read_utf()成功5.6
here3C:32:"SuperClosure\SerializableClosure":6224:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":2064:{a:5:{s:4:"code";s:1610:"function ($split, $iterator) use($numPartitions, $partitionFunc, $limit, $outputSerializer) {
    $buckets = array();
    $c = 0;
    $batch = min(10 * $numPartitions, 1000);
    foreach ($iterator as $key => $value) {
        #wordcount为例，这是word=>count
        file_put_contents('/home/gt/php_worker9.txt', 'here0 ' . $key . ' ' . $value . '
', FILE_APPEND);
        $buckets[$partitionFunc($key) % $numPartitions] = array();
        $buckets[$partitionFunc($key) % $numPartitions][$key] = $value;
        $c++;
        if ($c % 1000 == 0 && memory_get_usage() / 1024 / 1024 > $limit || $c > $batch) {
            $n = sizeof($buckets);
            $size = 0;
            $result = array();
            foreach ($buckets as $key2 => $value2) {
                #value是一个array
                array_push($result, serialize($key2));
                $d = serialize($value2);
                unset($value2);
                array_push($result, $d);
                $size += strlen($d);
            }
            $avg = intval($size / $n) >> 20;
            # let 1M < avg < 10M
            if ($avg < 1) {
                $batch *= 1.5;
            } elseif ($avg > 10) {
                $batch = max(intval($batch / 1.5), 1);
            }
            $c = 0;
            return $result;
        }
    }
    $result = array();
    foreach ($buckets as $key => $value) {
        file_put_contents('/home/gt/php_worker9.txt', 'here ' . $key . ' ' . $value . '
', FILE_APPEND);
        array_push($result, serialize($key));
        array_push($result, serialize($value));
    }
    return $result;
};";s:7:"context";a:3:{s:13:"numPartitions";i:2;s:13:"partitionFunc";C:32:"SuperClosure\SerializableClosure":240:{a:5:{s:4:"code";s:137:"function ($x) {
    if ($x == null) {
        return 0;
    }
    $h = null;
    if (is_array($x)) {
    }
    return hash('md5', $x);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:5:"limit";i:256;}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":3796:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":1619:{a:5:{s:4:"code";s:67:"function ($split, $iterator) use($f) {
    return $f($iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":1395:{a:5:{s:4:"code";s:332:"function ($iterator) use($memory, $serializer, $createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc) {
    $agg = new \aggregator($createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc);
    $merger = new \ExternalMerger($agg, $memory * 0.9, $serializer);
    $merger->mergeValues($iterator);
    return $merger->items();
};";s:7:"context";a:5:{s:6:"memory";i:512;s:10:"serializer";O:23:"auto_batched_serializer":10:{s:9:"best_size";i:65536;s:20:"UNLIMITED_BATCH_SIZE";i:-1;s:18:"UNKNOWN_BATCH_SIZE";i:0;s:10:"serializer";N;s:10:"batch_size";i:0;s:19:"END_OF_DATA_SECTION";i:-1;s:20:"PHP_EXCEPTION_THROWN";i:-2;s:11:"TIMING_DATA";i:-3;s:13:"END_OF_STREAM";i:-4;s:4:"NULL";i:-5;}s:18:"createCombinerFunc";C:32:"SuperClosure\SerializableClosure":135:{a:5:{s:4:"code";s:33:"function ($x) {
    return $x;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"mergeValueFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}s:18:"mergeCombinersFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1813:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":369:{a:5:{s:4:"code";s:76:"function ($any, $iterator) use($f) {
    return array_map($f, $iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":137:{a:5:{s:4:"code";s:43:"function ($x) {
    return array($x, 1);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1081:{a:5:{s:4:"code";s:758:"function ($split, $iterator) use($f) {
    $sub_is_array = False;
    foreach ($iterator as $key => $value) {
        $temp = $f($value);
        if (is_array($temp)) {
            $sub_is_array = True;
            break;
        }
    }
    if ($sub_is_array) {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            if (is_array($temp)) {
                foreach ($temp as $e) {
                    array_push($result, $e);
                }
            }
        }
        return $result;
    } else {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            array_push($result, $temp);
        }
        return $result;
    }
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":166:{a:5:{s:4:"code";s:72:"function ($line) {
    $temp = explode(' ', $line);
    return $temp;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}
here5
here6test test test test try try try 
here7 array
here7a string
here7a string
here8  Array
socket_create()成功35479

socket_connect()成功
首次read_int()成功1
首次read_utf()成功5.6
here3C:32:"SuperClosure\SerializableClosure":6224:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":2064:{a:5:{s:4:"code";s:1610:"function ($split, $iterator) use($numPartitions, $partitionFunc, $limit, $outputSerializer) {
    $buckets = array();
    $c = 0;
    $batch = min(10 * $numPartitions, 1000);
    foreach ($iterator as $key => $value) {
        #wordcount为例，这是word=>count
        file_put_contents('/home/gt/php_worker9.txt', 'here0 ' . $key . ' ' . $value . '
', FILE_APPEND);
        $buckets[$partitionFunc($key) % $numPartitions] = array();
        $buckets[$partitionFunc($key) % $numPartitions][$key] = $value;
        $c++;
        if ($c % 1000 == 0 && memory_get_usage() / 1024 / 1024 > $limit || $c > $batch) {
            $n = sizeof($buckets);
            $size = 0;
            $result = array();
            foreach ($buckets as $key2 => $value2) {
                #value是一个array
                array_push($result, serialize($key2));
                $d = serialize($value2);
                unset($value2);
                array_push($result, $d);
                $size += strlen($d);
            }
            $avg = intval($size / $n) >> 20;
            # let 1M < avg < 10M
            if ($avg < 1) {
                $batch *= 1.5;
            } elseif ($avg > 10) {
                $batch = max(intval($batch / 1.5), 1);
            }
            $c = 0;
            return $result;
        }
    }
    $result = array();
    foreach ($buckets as $key => $value) {
        file_put_contents('/home/gt/php_worker9.txt', 'here ' . $key . ' ' . $value . '
', FILE_APPEND);
        array_push($result, serialize($key));
        array_push($result, serialize($value));
    }
    return $result;
};";s:7:"context";a:3:{s:13:"numPartitions";i:2;s:13:"partitionFunc";C:32:"SuperClosure\SerializableClosure":240:{a:5:{s:4:"code";s:137:"function ($x) {
    if ($x == null) {
        return 0;
    }
    $h = null;
    if (is_array($x)) {
    }
    return hash('md5', $x);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:5:"limit";i:256;}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":3796:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":1619:{a:5:{s:4:"code";s:67:"function ($split, $iterator) use($f) {
    return $f($iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":1395:{a:5:{s:4:"code";s:332:"function ($iterator) use($memory, $serializer, $createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc) {
    $agg = new \aggregator($createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc);
    $merger = new \ExternalMerger($agg, $memory * 0.9, $serializer);
    $merger->mergeValues($iterator);
    return $merger->items();
};";s:7:"context";a:5:{s:6:"memory";i:512;s:10:"serializer";O:23:"auto_batched_serializer":10:{s:9:"best_size";i:65536;s:20:"UNLIMITED_BATCH_SIZE";i:-1;s:18:"UNKNOWN_BATCH_SIZE";i:0;s:10:"serializer";N;s:10:"batch_size";i:0;s:19:"END_OF_DATA_SECTION";i:-1;s:20:"PHP_EXCEPTION_THROWN";i:-2;s:11:"TIMING_DATA";i:-3;s:13:"END_OF_STREAM";i:-4;s:4:"NULL";i:-5;}s:18:"createCombinerFunc";C:32:"SuperClosure\SerializableClosure":135:{a:5:{s:4:"code";s:33:"function ($x) {
    return $x;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"mergeValueFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}s:18:"mergeCombinersFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1813:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":369:{a:5:{s:4:"code";s:76:"function ($any, $iterator) use($f) {
    return array_map($f, $iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":137:{a:5:{s:4:"code";s:43:"function ($x) {
    return array($x, 1);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1081:{a:5:{s:4:"code";s:758:"function ($split, $iterator) use($f) {
    $sub_is_array = False;
    foreach ($iterator as $key => $value) {
        $temp = $f($value);
        if (is_array($temp)) {
            $sub_is_array = True;
            break;
        }
    }
    if ($sub_is_array) {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            if (is_array($temp)) {
                foreach ($temp as $e) {
                    array_push($result, $e);
                }
            }
        }
        return $result;
    } else {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            array_push($result, $temp);
        }
        return $result;
    }
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":166:{a:5:{s:4:"code";s:72:"function ($line) {
    $temp = explode(' ', $line);
    return $temp;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}
here5
here6do do do 
here7 array
here7a string
here7a string
here8  Array
socket_create()成功56834

socket_connect()成功
首次read_int()成功0
首次read_utf()成功5.6
socket_create()成功52260

socket_connect()成功
首次read_int()成功1
首次read_utf()成功5.6
here3C:32:"SuperClosure\SerializableClosure":6230:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":2070:{a:5:{s:4:"code";s:1616:"function ($split, $iterator) use($numPartitions, $partitionFunc, $limit, $outputSerializer) {
    $buckets = array();
    $c = 0;
    $batch = min(10 * $numPartitions, 1000);
    foreach ($iterator as $key => $value) {
        #wordcount为例，这是word=>count
        file_put_contents('/home/gt/php_worker9.txt', 'here0 ' . $key . ' ' . $value . '
', FILE_APPEND);
        $buckets[$partitionFunc($key) % $numPartitions] = array();
        $buckets[$partitionFunc($key) % $numPartitions][$key] = $value;
        $c++;
        if ($c % 1000 == 0 && memory_get_usage() / 1024 / 1024 > $limit || $c > $batch) {
            $n = sizeof($buckets);
            $size = 0;
            $result = array();
            foreach ($buckets as $key2 => $value2) {
                #value是一个array
                array_push($result, serialize($key2));
                $d = serialize($value2);
                unset($value2);
                array_push($result, $d);
                $size += strlen($d);
            }
            $avg = intval($size / $n) >> 20;
            # let 1M < avg < 10M
            if ($avg < 1) {
                $batch *= 1.5;
            } elseif ($avg > 10) {
                $batch = max(intval($batch / 1.5), 1);
            }
            $c = 0;
            return $result;
        }
    }
    $result = array();
    foreach ($buckets as $value) {
        $k = $value[0];
        $v = $value[1];
        file_put_contents('/home/gt/php_worker9.txt', 'here ' . $k . ' ' . $v . '
', FILE_APPEND);
        array_push($result, $k);
        array_push($result, $v);
    }
    return $result;
};";s:7:"context";a:3:{s:13:"numPartitions";i:2;s:13:"partitionFunc";C:32:"SuperClosure\SerializableClosure":240:{a:5:{s:4:"code";s:137:"function ($x) {
    if ($x == null) {
        return 0;
    }
    $h = null;
    if (is_array($x)) {
    }
    return hash('md5', $x);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:5:"limit";i:256;}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":3796:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":1619:{a:5:{s:4:"code";s:67:"function ($split, $iterator) use($f) {
    return $f($iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":1395:{a:5:{s:4:"code";s:332:"function ($iterator) use($memory, $serializer, $createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc) {
    $agg = new \aggregator($createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc);
    $merger = new \ExternalMerger($agg, $memory * 0.9, $serializer);
    $merger->mergeValues($iterator);
    return $merger->items();
};";s:7:"context";a:5:{s:6:"memory";i:512;s:10:"serializer";O:23:"auto_batched_serializer":10:{s:9:"best_size";i:65536;s:20:"UNLIMITED_BATCH_SIZE";i:-1;s:18:"UNKNOWN_BATCH_SIZE";i:0;s:10:"serializer";N;s:10:"batch_size";i:0;s:19:"END_OF_DATA_SECTION";i:-1;s:20:"PHP_EXCEPTION_THROWN";i:-2;s:11:"TIMING_DATA";i:-3;s:13:"END_OF_STREAM";i:-4;s:4:"NULL";i:-5;}s:18:"createCombinerFunc";C:32:"SuperClosure\SerializableClosure":135:{a:5:{s:4:"code";s:33:"function ($x) {
    return $x;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"mergeValueFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}s:18:"mergeCombinersFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1813:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":369:{a:5:{s:4:"code";s:76:"function ($any, $iterator) use($f) {
    return array_map($f, $iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":137:{a:5:{s:4:"code";s:43:"function ($x) {
    return array($x, 1);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1081:{a:5:{s:4:"code";s:758:"function ($split, $iterator) use($f) {
    $sub_is_array = False;
    foreach ($iterator as $key => $value) {
        $temp = $f($value);
        if (is_array($temp)) {
            $sub_is_array = True;
            break;
        }
    }
    if ($sub_is_array) {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            if (is_array($temp)) {
                foreach ($temp as $e) {
                    array_push($result, $e);
                }
            }
        }
        return $result;
    } else {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            array_push($result, $temp);
        }
        return $result;
    }
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":166:{a:5:{s:4:"code";s:72:"function ($line) {
    $temp = explode(' ', $line);
    return $temp;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}
here3C:32:"SuperClosure\SerializableClosure":6230:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":2070:{a:5:{s:4:"code";s:1616:"function ($split, $iterator) use($numPartitions, $partitionFunc, $limit, $outputSerializer) {
    $buckets = array();
    $c = 0;
    $batch = min(10 * $numPartitions, 1000);
    foreach ($iterator as $key => $value) {
        #wordcount为例，这是word=>count
        file_put_contents('/home/gt/php_worker9.txt', 'here0 ' . $key . ' ' . $value . '
', FILE_APPEND);
        $buckets[$partitionFunc($key) % $numPartitions] = array();
        $buckets[$partitionFunc($key) % $numPartitions][$key] = $value;
        $c++;
        if ($c % 1000 == 0 && memory_get_usage() / 1024 / 1024 > $limit || $c > $batch) {
            $n = sizeof($buckets);
            $size = 0;
            $result = array();
            foreach ($buckets as $key2 => $value2) {
                #value是一个array
                array_push($result, serialize($key2));
                $d = serialize($value2);
                unset($value2);
                array_push($result, $d);
                $size += strlen($d);
            }
            $avg = intval($size / $n) >> 20;
            # let 1M < avg < 10M
            if ($avg < 1) {
                $batch *= 1.5;
            } elseif ($avg > 10) {
                $batch = max(intval($batch / 1.5), 1);
            }
            $c = 0;
            return $result;
        }
    }
    $result = array();
    foreach ($buckets as $value) {
        $k = $value[0];
        $v = $value[1];
        file_put_contents('/home/gt/php_worker9.txt', 'here ' . $k . ' ' . $v . '
', FILE_APPEND);
        array_push($result, $k);
        array_push($result, $v);
    }
    return $result;
};";s:7:"context";a:3:{s:13:"numPartitions";i:2;s:13:"partitionFunc";C:32:"SuperClosure\SerializableClosure":240:{a:5:{s:4:"code";s:137:"function ($x) {
    if ($x == null) {
        return 0;
    }
    $h = null;
    if (is_array($x)) {
    }
    return hash('md5', $x);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:5:"limit";i:256;}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":3796:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":1619:{a:5:{s:4:"code";s:67:"function ($split, $iterator) use($f) {
    return $f($iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":1395:{a:5:{s:4:"code";s:332:"function ($iterator) use($memory, $serializer, $createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc) {
    $agg = new \aggregator($createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc);
    $merger = new \ExternalMerger($agg, $memory * 0.9, $serializer);
    $merger->mergeValues($iterator);
    return $merger->items();
};";s:7:"context";a:5:{s:6:"memory";i:512;s:10:"serializer";O:23:"auto_batched_serializer":10:{s:9:"best_size";i:65536;s:20:"UNLIMITED_BATCH_SIZE";i:-1;s:18:"UNKNOWN_BATCH_SIZE";i:0;s:10:"serializer";N;s:10:"batch_size";i:0;s:19:"END_OF_DATA_SECTION";i:-1;s:20:"PHP_EXCEPTION_THROWN";i:-2;s:11:"TIMING_DATA";i:-3;s:13:"END_OF_STREAM";i:-4;s:4:"NULL";i:-5;}s:18:"createCombinerFunc";C:32:"SuperClosure\SerializableClosure":135:{a:5:{s:4:"code";s:33:"function ($x) {
    return $x;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"mergeValueFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}s:18:"mergeCombinersFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1813:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":369:{a:5:{s:4:"code";s:76:"function ($any, $iterator) use($f) {
    return array_map($f, $iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":137:{a:5:{s:4:"code";s:43:"function ($x) {
    return array($x, 1);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1081:{a:5:{s:4:"code";s:758:"function ($split, $iterator) use($f) {
    $sub_is_array = False;
    foreach ($iterator as $key => $value) {
        $temp = $f($value);
        if (is_array($temp)) {
            $sub_is_array = True;
            break;
        }
    }
    if ($sub_is_array) {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            if (is_array($temp)) {
                foreach ($temp as $e) {
                    array_push($result, $e);
                }
            }
        }
        return $result;
    } else {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            array_push($result, $temp);
        }
        return $result;
    }
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":166:{a:5:{s:4:"code";s:72:"function ($line) {
    $temp = explode(' ', $line);
    return $temp;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}
here5
here6test test test test try try try 
here5
here6do do do 
here7 array
here7a NULL
here7a NULL
here8  Array
here7 array
here7a NULL
here7a NULL
here8  Array
socket_create()成功57337

socket_connect()成功
首次read_int()成功0
首次read_utf()成功5.6
socket_create()成功33574

socket_connect()成功
here3C:32:"SuperClosure\SerializableClosure":6230:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":2070:{a:5:{s:4:"code";s:1616:"function ($split, $iterator) use($numPartitions, $partitionFunc, $limit, $outputSerializer) {
    $buckets = array();
    $c = 0;
    $batch = min(10 * $numPartitions, 1000);
    foreach ($iterator as $key => $value) {
        #wordcount为例，这是word=>count
        file_put_contents('/home/gt/php_worker9.txt', 'here0 ' . $key . ' ' . $value . '
', FILE_APPEND);
        $buckets[$partitionFunc($key) % $numPartitions] = array();
        $buckets[$partitionFunc($key) % $numPartitions][$key] = $value;
        $c++;
        if ($c % 1000 == 0 && memory_get_usage() / 1024 / 1024 > $limit || $c > $batch) {
            $n = sizeof($buckets);
            $size = 0;
            $result = array();
            foreach ($buckets as $key2 => $value2) {
                #value是一个array
                array_push($result, serialize($key2));
                $d = serialize($value2);
                unset($value2);
                array_push($result, $d);
                $size += strlen($d);
            }
            $avg = intval($size / $n) >> 20;
            # let 1M < avg < 10M
            if ($avg < 1) {
                $batch *= 1.5;
            } elseif ($avg > 10) {
                $batch = max(intval($batch / 1.5), 1);
            }
            $c = 0;
            return $result;
        }
    }
    $result = array();
    foreach ($buckets as $value) {
        $k = $value[0];
        $v = $value[1];
        file_put_contents('/home/gt/php_worker9.txt', 'here ' . $k . ' ' . $v . '
', FILE_APPEND);
        array_push($result, $k);
        array_push($result, $v);
    }
    return $result;
};";s:7:"context";a:3:{s:13:"numPartitions";i:2;s:13:"partitionFunc";C:32:"SuperClosure\SerializableClosure":240:{a:5:{s:4:"code";s:137:"function ($x) {
    if ($x == null) {
        return 0;
    }
    $h = null;
    if (is_array($x)) {
    }
    return hash('md5', $x);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:5:"limit";i:256;}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":3796:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":1619:{a:5:{s:4:"code";s:67:"function ($split, $iterator) use($f) {
    return $f($iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":1395:{a:5:{s:4:"code";s:332:"function ($iterator) use($memory, $serializer, $createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc) {
    $agg = new \aggregator($createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc);
    $merger = new \ExternalMerger($agg, $memory * 0.9, $serializer);
    $merger->mergeValues($iterator);
    return $merger->items();
};";s:7:"context";a:5:{s:6:"memory";i:512;s:10:"serializer";O:23:"auto_batched_serializer":10:{s:9:"best_size";i:65536;s:20:"UNLIMITED_BATCH_SIZE";i:-1;s:18:"UNKNOWN_BATCH_SIZE";i:0;s:10:"serializer";N;s:10:"batch_size";i:0;s:19:"END_OF_DATA_SECTION";i:-1;s:20:"PHP_EXCEPTION_THROWN";i:-2;s:11:"TIMING_DATA";i:-3;s:13:"END_OF_STREAM";i:-4;s:4:"NULL";i:-5;}s:18:"createCombinerFunc";C:32:"SuperClosure\SerializableClosure":135:{a:5:{s:4:"code";s:33:"function ($x) {
    return $x;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"mergeValueFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}s:18:"mergeCombinersFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1813:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":369:{a:5:{s:4:"code";s:76:"function ($any, $iterator) use($f) {
    return array_map($f, $iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":137:{a:5:{s:4:"code";s:43:"function ($x) {
    return array($x, 1);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1081:{a:5:{s:4:"code";s:758:"function ($split, $iterator) use($f) {
    $sub_is_array = False;
    foreach ($iterator as $key => $value) {
        $temp = $f($value);
        if (is_array($temp)) {
            $sub_is_array = True;
            break;
        }
    }
    if ($sub_is_array) {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            if (is_array($temp)) {
                foreach ($temp as $e) {
                    array_push($result, $e);
                }
            }
        }
        return $result;
    } else {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            array_push($result, $temp);
        }
        return $result;
    }
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":166:{a:5:{s:4:"code";s:72:"function ($line) {
    $temp = explode(' ', $line);
    return $temp;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}
首次read_int()成功1
首次read_utf()成功5.6
here5
here6test test test test try try try 
here7 array
here7a NULL
here7a NULL
here8  Array
here3C:32:"SuperClosure\SerializableClosure":6230:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":2070:{a:5:{s:4:"code";s:1616:"function ($split, $iterator) use($numPartitions, $partitionFunc, $limit, $outputSerializer) {
    $buckets = array();
    $c = 0;
    $batch = min(10 * $numPartitions, 1000);
    foreach ($iterator as $key => $value) {
        #wordcount为例，这是word=>count
        file_put_contents('/home/gt/php_worker9.txt', 'here0 ' . $key . ' ' . $value . '
', FILE_APPEND);
        $buckets[$partitionFunc($key) % $numPartitions] = array();
        $buckets[$partitionFunc($key) % $numPartitions][$key] = $value;
        $c++;
        if ($c % 1000 == 0 && memory_get_usage() / 1024 / 1024 > $limit || $c > $batch) {
            $n = sizeof($buckets);
            $size = 0;
            $result = array();
            foreach ($buckets as $key2 => $value2) {
                #value是一个array
                array_push($result, serialize($key2));
                $d = serialize($value2);
                unset($value2);
                array_push($result, $d);
                $size += strlen($d);
            }
            $avg = intval($size / $n) >> 20;
            # let 1M < avg < 10M
            if ($avg < 1) {
                $batch *= 1.5;
            } elseif ($avg > 10) {
                $batch = max(intval($batch / 1.5), 1);
            }
            $c = 0;
            return $result;
        }
    }
    $result = array();
    foreach ($buckets as $value) {
        $k = $value[0];
        $v = $value[1];
        file_put_contents('/home/gt/php_worker9.txt', 'here ' . $k . ' ' . $v . '
', FILE_APPEND);
        array_push($result, $k);
        array_push($result, $v);
    }
    return $result;
};";s:7:"context";a:3:{s:13:"numPartitions";i:2;s:13:"partitionFunc";C:32:"SuperClosure\SerializableClosure":240:{a:5:{s:4:"code";s:137:"function ($x) {
    if ($x == null) {
        return 0;
    }
    $h = null;
    if (is_array($x)) {
    }
    return hash('md5', $x);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:5:"limit";i:256;}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":3796:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":1619:{a:5:{s:4:"code";s:67:"function ($split, $iterator) use($f) {
    return $f($iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":1395:{a:5:{s:4:"code";s:332:"function ($iterator) use($memory, $serializer, $createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc) {
    $agg = new \aggregator($createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc);
    $merger = new \ExternalMerger($agg, $memory * 0.9, $serializer);
    $merger->mergeValues($iterator);
    return $merger->items();
};";s:7:"context";a:5:{s:6:"memory";i:512;s:10:"serializer";O:23:"auto_batched_serializer":10:{s:9:"best_size";i:65536;s:20:"UNLIMITED_BATCH_SIZE";i:-1;s:18:"UNKNOWN_BATCH_SIZE";i:0;s:10:"serializer";N;s:10:"batch_size";i:0;s:19:"END_OF_DATA_SECTION";i:-1;s:20:"PHP_EXCEPTION_THROWN";i:-2;s:11:"TIMING_DATA";i:-3;s:13:"END_OF_STREAM";i:-4;s:4:"NULL";i:-5;}s:18:"createCombinerFunc";C:32:"SuperClosure\SerializableClosure":135:{a:5:{s:4:"code";s:33:"function ($x) {
    return $x;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"mergeValueFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}s:18:"mergeCombinersFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1813:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":369:{a:5:{s:4:"code";s:76:"function ($any, $iterator) use($f) {
    return array_map($f, $iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":137:{a:5:{s:4:"code";s:43:"function ($x) {
    return array($x, 1);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1081:{a:5:{s:4:"code";s:758:"function ($split, $iterator) use($f) {
    $sub_is_array = False;
    foreach ($iterator as $key => $value) {
        $temp = $f($value);
        if (is_array($temp)) {
            $sub_is_array = True;
            break;
        }
    }
    if ($sub_is_array) {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            if (is_array($temp)) {
                foreach ($temp as $e) {
                    array_push($result, $e);
                }
            }
        }
        return $result;
    } else {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            array_push($result, $temp);
        }
        return $result;
    }
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":166:{a:5:{s:4:"code";s:72:"function ($line) {
    $temp = explode(' ', $line);
    return $temp;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}
here5
here6do do do 
here7 array
here7a NULL
here7a NULL
here8  Array
socket_create()成功45660

socket_connect()成功
首次read_int()成功1
首次read_utf()成功5.6
here3C:32:"SuperClosure\SerializableClosure":6230:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":2070:{a:5:{s:4:"code";s:1616:"function ($split, $iterator) use($numPartitions, $partitionFunc, $limit, $outputSerializer) {
    $buckets = array();
    $c = 0;
    $batch = min(10 * $numPartitions, 1000);
    foreach ($iterator as $key => $value) {
        #wordcount为例，这是word=>count
        file_put_contents('/home/gt/php_worker9.txt', 'here0 ' . $key . ' ' . $value . '
', FILE_APPEND);
        $buckets[$partitionFunc($key) % $numPartitions] = array();
        $buckets[$partitionFunc($key) % $numPartitions][$key] = $value;
        $c++;
        if ($c % 1000 == 0 && memory_get_usage() / 1024 / 1024 > $limit || $c > $batch) {
            $n = sizeof($buckets);
            $size = 0;
            $result = array();
            foreach ($buckets as $key2 => $value2) {
                #value是一个array
                array_push($result, serialize($key2));
                $d = serialize($value2);
                unset($value2);
                array_push($result, $d);
                $size += strlen($d);
            }
            $avg = intval($size / $n) >> 20;
            # let 1M < avg < 10M
            if ($avg < 1) {
                $batch *= 1.5;
            } elseif ($avg > 10) {
                $batch = max(intval($batch / 1.5), 1);
            }
            $c = 0;
            return $result;
        }
    }
    $result = array();
    foreach ($buckets as $value) {
        $k = $value[0];
        $v = $value[1];
        file_put_contents('/home/gt/php_worker9.txt', 'here ' . $k . ' ' . $v . '
', FILE_APPEND);
        array_push($result, $k);
        array_push($result, $v);
    }
    return $result;
};";s:7:"context";a:3:{s:13:"numPartitions";i:2;s:13:"partitionFunc";C:32:"SuperClosure\SerializableClosure":240:{a:5:{s:4:"code";s:137:"function ($x) {
    if ($x == null) {
        return 0;
    }
    $h = null;
    if (is_array($x)) {
    }
    return hash('md5', $x);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:5:"limit";i:256;}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":3796:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":1619:{a:5:{s:4:"code";s:67:"function ($split, $iterator) use($f) {
    return $f($iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":1395:{a:5:{s:4:"code";s:332:"function ($iterator) use($memory, $serializer, $createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc) {
    $agg = new \aggregator($createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc);
    $merger = new \ExternalMerger($agg, $memory * 0.9, $serializer);
    $merger->mergeValues($iterator);
    return $merger->items();
};";s:7:"context";a:5:{s:6:"memory";i:512;s:10:"serializer";O:23:"auto_batched_serializer":10:{s:9:"best_size";i:65536;s:20:"UNLIMITED_BATCH_SIZE";i:-1;s:18:"UNKNOWN_BATCH_SIZE";i:0;s:10:"serializer";N;s:10:"batch_size";i:0;s:19:"END_OF_DATA_SECTION";i:-1;s:20:"PHP_EXCEPTION_THROWN";i:-2;s:11:"TIMING_DATA";i:-3;s:13:"END_OF_STREAM";i:-4;s:4:"NULL";i:-5;}s:18:"createCombinerFunc";C:32:"SuperClosure\SerializableClosure":135:{a:5:{s:4:"code";s:33:"function ($x) {
    return $x;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"mergeValueFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}s:18:"mergeCombinersFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1813:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":369:{a:5:{s:4:"code";s:76:"function ($any, $iterator) use($f) {
    return array_map($f, $iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":137:{a:5:{s:4:"code";s:43:"function ($x) {
    return array($x, 1);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1081:{a:5:{s:4:"code";s:758:"function ($split, $iterator) use($f) {
    $sub_is_array = False;
    foreach ($iterator as $key => $value) {
        $temp = $f($value);
        if (is_array($temp)) {
            $sub_is_array = True;
            break;
        }
    }
    if ($sub_is_array) {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            if (is_array($temp)) {
                foreach ($temp as $e) {
                    array_push($result, $e);
                }
            }
        }
        return $result;
    } else {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            array_push($result, $temp);
        }
        return $result;
    }
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":166:{a:5:{s:4:"code";s:72:"function ($line) {
    $temp = explode(' ', $line);
    return $temp;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}
here5
here6do do do 
here7 array
here7a NULL
here7a NULL
here8  Array
socket_create()成功38309

socket_connect()成功
首次read_int()成功0
首次read_utf()成功5.6
here3C:32:"SuperClosure\SerializableClosure":6230:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":2070:{a:5:{s:4:"code";s:1616:"function ($split, $iterator) use($numPartitions, $partitionFunc, $limit, $outputSerializer) {
    $buckets = array();
    $c = 0;
    $batch = min(10 * $numPartitions, 1000);
    foreach ($iterator as $key => $value) {
        #wordcount为例，这是word=>count
        file_put_contents('/home/gt/php_worker9.txt', 'here0 ' . $key . ' ' . $value . '
', FILE_APPEND);
        $buckets[$partitionFunc($key) % $numPartitions] = array();
        $buckets[$partitionFunc($key) % $numPartitions][$key] = $value;
        $c++;
        if ($c % 1000 == 0 && memory_get_usage() / 1024 / 1024 > $limit || $c > $batch) {
            $n = sizeof($buckets);
            $size = 0;
            $result = array();
            foreach ($buckets as $key2 => $value2) {
                #value是一个array
                array_push($result, serialize($key2));
                $d = serialize($value2);
                unset($value2);
                array_push($result, $d);
                $size += strlen($d);
            }
            $avg = intval($size / $n) >> 20;
            # let 1M < avg < 10M
            if ($avg < 1) {
                $batch *= 1.5;
            } elseif ($avg > 10) {
                $batch = max(intval($batch / 1.5), 1);
            }
            $c = 0;
            return $result;
        }
    }
    $result = array();
    foreach ($buckets as $value) {
        $k = $value[0];
        $v = $value[1];
        file_put_contents('/home/gt/php_worker9.txt', 'here ' . $k . ' ' . $v . '
', FILE_APPEND);
        array_push($result, $k);
        array_push($result, $v);
    }
    return $result;
};";s:7:"context";a:3:{s:13:"numPartitions";i:2;s:13:"partitionFunc";C:32:"SuperClosure\SerializableClosure":240:{a:5:{s:4:"code";s:137:"function ($x) {
    if ($x == null) {
        return 0;
    }
    $h = null;
    if (is_array($x)) {
    }
    return hash('md5', $x);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:5:"limit";i:256;}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":3796:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":1619:{a:5:{s:4:"code";s:67:"function ($split, $iterator) use($f) {
    return $f($iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":1395:{a:5:{s:4:"code";s:332:"function ($iterator) use($memory, $serializer, $createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc) {
    $agg = new \aggregator($createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc);
    $merger = new \ExternalMerger($agg, $memory * 0.9, $serializer);
    $merger->mergeValues($iterator);
    return $merger->items();
};";s:7:"context";a:5:{s:6:"memory";i:512;s:10:"serializer";O:23:"auto_batched_serializer":10:{s:9:"best_size";i:65536;s:20:"UNLIMITED_BATCH_SIZE";i:-1;s:18:"UNKNOWN_BATCH_SIZE";i:0;s:10:"serializer";N;s:10:"batch_size";i:0;s:19:"END_OF_DATA_SECTION";i:-1;s:20:"PHP_EXCEPTION_THROWN";i:-2;s:11:"TIMING_DATA";i:-3;s:13:"END_OF_STREAM";i:-4;s:4:"NULL";i:-5;}s:18:"createCombinerFunc";C:32:"SuperClosure\SerializableClosure":135:{a:5:{s:4:"code";s:33:"function ($x) {
    return $x;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"mergeValueFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}s:18:"mergeCombinersFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1813:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":369:{a:5:{s:4:"code";s:76:"function ($any, $iterator) use($f) {
    return array_map($f, $iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":137:{a:5:{s:4:"code";s:43:"function ($x) {
    return array($x, 1);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1081:{a:5:{s:4:"code";s:758:"function ($split, $iterator) use($f) {
    $sub_is_array = False;
    foreach ($iterator as $key => $value) {
        $temp = $f($value);
        if (is_array($temp)) {
            $sub_is_array = True;
            break;
        }
    }
    if ($sub_is_array) {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            if (is_array($temp)) {
                foreach ($temp as $e) {
                    array_push($result, $e);
                }
            }
        }
        return $result;
    } else {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            array_push($result, $temp);
        }
        return $result;
    }
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":166:{a:5:{s:4:"code";s:72:"function ($line) {
    $temp = explode(' ', $line);
    return $temp;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}
here5
here6test test test test try try try 
here7 array
here7a NULL
here7a NULL
here8  Array
socket_create()成功59307

socket_connect()成功
首次read_int()成功1
首次read_utf()成功5.6
here3C:32:"SuperClosure\SerializableClosure":6230:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":2070:{a:5:{s:4:"code";s:1616:"function ($split, $iterator) use($numPartitions, $partitionFunc, $limit, $outputSerializer) {
    $buckets = array();
    $c = 0;
    $batch = min(10 * $numPartitions, 1000);
    foreach ($iterator as $key => $value) {
        #wordcount为例，这是word=>count
        file_put_contents('/home/gt/php_worker9.txt', 'here0 ' . $key . ' ' . $value . '
', FILE_APPEND);
        $buckets[$partitionFunc($key) % $numPartitions] = array();
        $buckets[$partitionFunc($key) % $numPartitions][$key] = $value;
        $c++;
        if ($c % 1000 == 0 && memory_get_usage() / 1024 / 1024 > $limit || $c > $batch) {
            $n = sizeof($buckets);
            $size = 0;
            $result = array();
            foreach ($buckets as $key2 => $value2) {
                #value是一个array
                array_push($result, serialize($key2));
                $d = serialize($value2);
                unset($value2);
                array_push($result, $d);
                $size += strlen($d);
            }
            $avg = intval($size / $n) >> 20;
            # let 1M < avg < 10M
            if ($avg < 1) {
                $batch *= 1.5;
            } elseif ($avg > 10) {
                $batch = max(intval($batch / 1.5), 1);
            }
            $c = 0;
            return $result;
        }
    }
    $result = array();
    foreach ($buckets as $value) {
        $k = $value[0];
        $v = $value[1];
        file_put_contents('/home/gt/php_worker9.txt', 'here ' . $k . ' ' . $v . '
', FILE_APPEND);
        array_push($result, $k);
        array_push($result, $v);
    }
    return $result;
};";s:7:"context";a:3:{s:13:"numPartitions";i:2;s:13:"partitionFunc";C:32:"SuperClosure\SerializableClosure":240:{a:5:{s:4:"code";s:137:"function ($x) {
    if ($x == null) {
        return 0;
    }
    $h = null;
    if (is_array($x)) {
    }
    return hash('md5', $x);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:5:"limit";i:256;}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":3796:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":1619:{a:5:{s:4:"code";s:67:"function ($split, $iterator) use($f) {
    return $f($iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":1395:{a:5:{s:4:"code";s:332:"function ($iterator) use($memory, $serializer, $createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc) {
    $agg = new \aggregator($createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc);
    $merger = new \ExternalMerger($agg, $memory * 0.9, $serializer);
    $merger->mergeValues($iterator);
    return $merger->items();
};";s:7:"context";a:5:{s:6:"memory";i:512;s:10:"serializer";O:23:"auto_batched_serializer":10:{s:9:"best_size";i:65536;s:20:"UNLIMITED_BATCH_SIZE";i:-1;s:18:"UNKNOWN_BATCH_SIZE";i:0;s:10:"serializer";N;s:10:"batch_size";i:0;s:19:"END_OF_DATA_SECTION";i:-1;s:20:"PHP_EXCEPTION_THROWN";i:-2;s:11:"TIMING_DATA";i:-3;s:13:"END_OF_STREAM";i:-4;s:4:"NULL";i:-5;}s:18:"createCombinerFunc";C:32:"SuperClosure\SerializableClosure":135:{a:5:{s:4:"code";s:33:"function ($x) {
    return $x;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"mergeValueFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}s:18:"mergeCombinersFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1813:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":369:{a:5:{s:4:"code";s:76:"function ($any, $iterator) use($f) {
    return array_map($f, $iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":137:{a:5:{s:4:"code";s:43:"function ($x) {
    return array($x, 1);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1081:{a:5:{s:4:"code";s:758:"function ($split, $iterator) use($f) {
    $sub_is_array = False;
    foreach ($iterator as $key => $value) {
        $temp = $f($value);
        if (is_array($temp)) {
            $sub_is_array = True;
            break;
        }
    }
    if ($sub_is_array) {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            if (is_array($temp)) {
                foreach ($temp as $e) {
                    array_push($result, $e);
                }
            }
        }
        return $result;
    } else {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            array_push($result, $temp);
        }
        return $result;
    }
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":166:{a:5:{s:4:"code";s:72:"function ($line) {
    $temp = explode(' ', $line);
    return $temp;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}
here5
here6do do do 
here7 array
here7a NULL
here7a NULL
here8  Array
socket_create()成功47616

socket_connect()成功
首次read_int()成功0
首次read_utf()成功5.6
here3C:32:"SuperClosure\SerializableClosure":6230:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":2070:{a:5:{s:4:"code";s:1616:"function ($split, $iterator) use($numPartitions, $partitionFunc, $limit, $outputSerializer) {
    $buckets = array();
    $c = 0;
    $batch = min(10 * $numPartitions, 1000);
    foreach ($iterator as $key => $value) {
        #wordcount为例，这是word=>count
        file_put_contents('/home/gt/php_worker9.txt', 'here0 ' . $key . ' ' . $value . '
', FILE_APPEND);
        $buckets[$partitionFunc($key) % $numPartitions] = array();
        $buckets[$partitionFunc($key) % $numPartitions][$key] = $value;
        $c++;
        if ($c % 1000 == 0 && memory_get_usage() / 1024 / 1024 > $limit || $c > $batch) {
            $n = sizeof($buckets);
            $size = 0;
            $result = array();
            foreach ($buckets as $key2 => $value2) {
                #value是一个array
                array_push($result, serialize($key2));
                $d = serialize($value2);
                unset($value2);
                array_push($result, $d);
                $size += strlen($d);
            }
            $avg = intval($size / $n) >> 20;
            # let 1M < avg < 10M
            if ($avg < 1) {
                $batch *= 1.5;
            } elseif ($avg > 10) {
                $batch = max(intval($batch / 1.5), 1);
            }
            $c = 0;
            return $result;
        }
    }
    $result = array();
    foreach ($buckets as $value) {
        $k = $value[0];
        $v = $value[1];
        file_put_contents('/home/gt/php_worker9.txt', 'here ' . $k . ' ' . $v . '
', FILE_APPEND);
        array_push($result, $k);
        array_push($result, $v);
    }
    return $result;
};";s:7:"context";a:3:{s:13:"numPartitions";i:2;s:13:"partitionFunc";C:32:"SuperClosure\SerializableClosure":240:{a:5:{s:4:"code";s:137:"function ($x) {
    if ($x == null) {
        return 0;
    }
    $h = null;
    if (is_array($x)) {
    }
    return hash('md5', $x);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:5:"limit";i:256;}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":3796:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":1619:{a:5:{s:4:"code";s:67:"function ($split, $iterator) use($f) {
    return $f($iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":1395:{a:5:{s:4:"code";s:332:"function ($iterator) use($memory, $serializer, $createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc) {
    $agg = new \aggregator($createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc);
    $merger = new \ExternalMerger($agg, $memory * 0.9, $serializer);
    $merger->mergeValues($iterator);
    return $merger->items();
};";s:7:"context";a:5:{s:6:"memory";i:512;s:10:"serializer";O:23:"auto_batched_serializer":10:{s:9:"best_size";i:65536;s:20:"UNLIMITED_BATCH_SIZE";i:-1;s:18:"UNKNOWN_BATCH_SIZE";i:0;s:10:"serializer";N;s:10:"batch_size";i:0;s:19:"END_OF_DATA_SECTION";i:-1;s:20:"PHP_EXCEPTION_THROWN";i:-2;s:11:"TIMING_DATA";i:-3;s:13:"END_OF_STREAM";i:-4;s:4:"NULL";i:-5;}s:18:"createCombinerFunc";C:32:"SuperClosure\SerializableClosure":135:{a:5:{s:4:"code";s:33:"function ($x) {
    return $x;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"mergeValueFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}s:18:"mergeCombinersFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1813:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":369:{a:5:{s:4:"code";s:76:"function ($any, $iterator) use($f) {
    return array_map($f, $iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":137:{a:5:{s:4:"code";s:43:"function ($x) {
    return array($x, 1);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1081:{a:5:{s:4:"code";s:758:"function ($split, $iterator) use($f) {
    $sub_is_array = False;
    foreach ($iterator as $key => $value) {
        $temp = $f($value);
        if (is_array($temp)) {
            $sub_is_array = True;
            break;
        }
    }
    if ($sub_is_array) {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            if (is_array($temp)) {
                foreach ($temp as $e) {
                    array_push($result, $e);
                }
            }
        }
        return $result;
    } else {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            array_push($result, $temp);
        }
        return $result;
    }
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":166:{a:5:{s:4:"code";s:72:"function ($line) {
    $temp = explode(' ', $line);
    return $temp;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}
here5
here6test test test test try try try 
here7 array
here7a NULL
here7a NULL
here8  Array
socket_create()成功42924

socket_connect()成功
首次read_int()成功0
首次read_utf()成功5.6
here3C:32:"SuperClosure\SerializableClosure":6239:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":2079:{a:5:{s:4:"code";s:1625:"function ($split, $iterator) use($numPartitions, $partitionFunc, $limit, $outputSerializer) {
    $buckets = array();
    $c = 0;
    $batch = min(10 * $numPartitions, 1000);
    foreach ($iterator as $key => $value) {
        #wordcount为例，这是word=>count
        file_put_contents('/home/gt/php_worker9.txt', 'here0 ' . $key . ' ' . $value . '
', FILE_APPEND);
        $buckets[$partitionFunc($key) % $numPartitions] = array();
        $buckets[$partitionFunc($key) % $numPartitions][$key] = $value;
        $c++;
        if ($c % 1000 == 0 && memory_get_usage() / 1024 / 1024 > $limit || $c > $batch) {
            $n = sizeof($buckets);
            $size = 0;
            $result = array();
            foreach ($buckets as $key2 => $value2) {
                #value是一个array
                array_push($result, serialize($key2));
                $d = serialize($value2);
                unset($value2);
                array_push($result, $d);
                $size += strlen($d);
            }
            $avg = intval($size / $n) >> 20;
            # let 1M < avg < 10M
            if ($avg < 1) {
                $batch *= 1.5;
            } elseif ($avg > 10) {
                $batch = max(intval($batch / 1.5), 1);
            }
            $c = 0;
            return $result;
        }
    }
    $result = array();
    foreach ($buckets as $key => $value) {
        $k = $value[0];
        $v = $value[1];
        file_put_contents('/home/gt/php_worker9.txt', 'here1 ' . $k . ' ' . $v . '
', FILE_APPEND);
        array_push($result, $k);
        array_push($result, $v);
    }
    return $result;
};";s:7:"context";a:3:{s:13:"numPartitions";i:2;s:13:"partitionFunc";C:32:"SuperClosure\SerializableClosure":240:{a:5:{s:4:"code";s:137:"function ($x) {
    if ($x == null) {
        return 0;
    }
    $h = null;
    if (is_array($x)) {
    }
    return hash('md5', $x);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:5:"limit";i:256;}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":3796:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":1619:{a:5:{s:4:"code";s:67:"function ($split, $iterator) use($f) {
    return $f($iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":1395:{a:5:{s:4:"code";s:332:"function ($iterator) use($memory, $serializer, $createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc) {
    $agg = new \aggregator($createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc);
    $merger = new \ExternalMerger($agg, $memory * 0.9, $serializer);
    $merger->mergeValues($iterator);
    return $merger->items();
};";s:7:"context";a:5:{s:6:"memory";i:512;s:10:"serializer";O:23:"auto_batched_serializer":10:{s:9:"best_size";i:65536;s:20:"UNLIMITED_BATCH_SIZE";i:-1;s:18:"UNKNOWN_BATCH_SIZE";i:0;s:10:"serializer";N;s:10:"batch_size";i:0;s:19:"END_OF_DATA_SECTION";i:-1;s:20:"PHP_EXCEPTION_THROWN";i:-2;s:11:"TIMING_DATA";i:-3;s:13:"END_OF_STREAM";i:-4;s:4:"NULL";i:-5;}s:18:"createCombinerFunc";C:32:"SuperClosure\SerializableClosure":135:{a:5:{s:4:"code";s:33:"function ($x) {
    return $x;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"mergeValueFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}s:18:"mergeCombinersFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1813:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":369:{a:5:{s:4:"code";s:76:"function ($any, $iterator) use($f) {
    return array_map($f, $iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":137:{a:5:{s:4:"code";s:43:"function ($x) {
    return array($x, 1);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1081:{a:5:{s:4:"code";s:758:"function ($split, $iterator) use($f) {
    $sub_is_array = False;
    foreach ($iterator as $key => $value) {
        $temp = $f($value);
        if (is_array($temp)) {
            $sub_is_array = True;
            break;
        }
    }
    if ($sub_is_array) {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            if (is_array($temp)) {
                foreach ($temp as $e) {
                    array_push($result, $e);
                }
            }
        }
        return $result;
    } else {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            array_push($result, $temp);
        }
        return $result;
    }
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":166:{a:5:{s:4:"code";s:72:"function ($line) {
    $temp = explode(' ', $line);
    return $temp;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}
socket_create()成功35968

socket_connect()成功
here5
here6test test test test try try try 
here7 array
here7a NULL
here7a NULL
here8  Array
首次read_int()成功1
首次read_utf()成功5.6
here3C:32:"SuperClosure\SerializableClosure":6239:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":2079:{a:5:{s:4:"code";s:1625:"function ($split, $iterator) use($numPartitions, $partitionFunc, $limit, $outputSerializer) {
    $buckets = array();
    $c = 0;
    $batch = min(10 * $numPartitions, 1000);
    foreach ($iterator as $key => $value) {
        #wordcount为例，这是word=>count
        file_put_contents('/home/gt/php_worker9.txt', 'here0 ' . $key . ' ' . $value . '
', FILE_APPEND);
        $buckets[$partitionFunc($key) % $numPartitions] = array();
        $buckets[$partitionFunc($key) % $numPartitions][$key] = $value;
        $c++;
        if ($c % 1000 == 0 && memory_get_usage() / 1024 / 1024 > $limit || $c > $batch) {
            $n = sizeof($buckets);
            $size = 0;
            $result = array();
            foreach ($buckets as $key2 => $value2) {
                #value是一个array
                array_push($result, serialize($key2));
                $d = serialize($value2);
                unset($value2);
                array_push($result, $d);
                $size += strlen($d);
            }
            $avg = intval($size / $n) >> 20;
            # let 1M < avg < 10M
            if ($avg < 1) {
                $batch *= 1.5;
            } elseif ($avg > 10) {
                $batch = max(intval($batch / 1.5), 1);
            }
            $c = 0;
            return $result;
        }
    }
    $result = array();
    foreach ($buckets as $key => $value) {
        $k = $value[0];
        $v = $value[1];
        file_put_contents('/home/gt/php_worker9.txt', 'here1 ' . $k . ' ' . $v . '
', FILE_APPEND);
        array_push($result, $k);
        array_push($result, $v);
    }
    return $result;
};";s:7:"context";a:3:{s:13:"numPartitions";i:2;s:13:"partitionFunc";C:32:"SuperClosure\SerializableClosure":240:{a:5:{s:4:"code";s:137:"function ($x) {
    if ($x == null) {
        return 0;
    }
    $h = null;
    if (is_array($x)) {
    }
    return hash('md5', $x);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:5:"limit";i:256;}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":3796:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":1619:{a:5:{s:4:"code";s:67:"function ($split, $iterator) use($f) {
    return $f($iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":1395:{a:5:{s:4:"code";s:332:"function ($iterator) use($memory, $serializer, $createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc) {
    $agg = new \aggregator($createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc);
    $merger = new \ExternalMerger($agg, $memory * 0.9, $serializer);
    $merger->mergeValues($iterator);
    return $merger->items();
};";s:7:"context";a:5:{s:6:"memory";i:512;s:10:"serializer";O:23:"auto_batched_serializer":10:{s:9:"best_size";i:65536;s:20:"UNLIMITED_BATCH_SIZE";i:-1;s:18:"UNKNOWN_BATCH_SIZE";i:0;s:10:"serializer";N;s:10:"batch_size";i:0;s:19:"END_OF_DATA_SECTION";i:-1;s:20:"PHP_EXCEPTION_THROWN";i:-2;s:11:"TIMING_DATA";i:-3;s:13:"END_OF_STREAM";i:-4;s:4:"NULL";i:-5;}s:18:"createCombinerFunc";C:32:"SuperClosure\SerializableClosure":135:{a:5:{s:4:"code";s:33:"function ($x) {
    return $x;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"mergeValueFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}s:18:"mergeCombinersFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1813:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":369:{a:5:{s:4:"code";s:76:"function ($any, $iterator) use($f) {
    return array_map($f, $iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":137:{a:5:{s:4:"code";s:43:"function ($x) {
    return array($x, 1);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1081:{a:5:{s:4:"code";s:758:"function ($split, $iterator) use($f) {
    $sub_is_array = False;
    foreach ($iterator as $key => $value) {
        $temp = $f($value);
        if (is_array($temp)) {
            $sub_is_array = True;
            break;
        }
    }
    if ($sub_is_array) {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            if (is_array($temp)) {
                foreach ($temp as $e) {
                    array_push($result, $e);
                }
            }
        }
        return $result;
    } else {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            array_push($result, $temp);
        }
        return $result;
    }
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":166:{a:5:{s:4:"code";s:72:"function ($line) {
    $temp = explode(' ', $line);
    return $temp;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}
here5
here6do do do 
here7 array
here7a NULL
here7a NULL
here8  Array
socket_create()成功48548

socket_connect()成功
首次read_int()成功1
首次read_utf()成功5.6
here3C:32:"SuperClosure\SerializableClosure":6239:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":2079:{a:5:{s:4:"code";s:1625:"function ($split, $iterator) use($numPartitions, $partitionFunc, $limit, $outputSerializer) {
    $buckets = array();
    $c = 0;
    $batch = min(10 * $numPartitions, 1000);
    foreach ($iterator as $key => $value) {
        #wordcount为例，这是word=>count
        file_put_contents('/home/gt/php_worker9.txt', 'here0 ' . $key . ' ' . $value . '
', FILE_APPEND);
        $buckets[$partitionFunc($key) % $numPartitions] = array();
        $buckets[$partitionFunc($key) % $numPartitions][$key] = $value;
        $c++;
        if ($c % 1000 == 0 && memory_get_usage() / 1024 / 1024 > $limit || $c > $batch) {
            $n = sizeof($buckets);
            $size = 0;
            $result = array();
            foreach ($buckets as $key2 => $value2) {
                #value是一个array
                array_push($result, serialize($key2));
                $d = serialize($value2);
                unset($value2);
                array_push($result, $d);
                $size += strlen($d);
            }
            $avg = intval($size / $n) >> 20;
            # let 1M < avg < 10M
            if ($avg < 1) {
                $batch *= 1.5;
            } elseif ($avg > 10) {
                $batch = max(intval($batch / 1.5), 1);
            }
            $c = 0;
            return $result;
        }
    }
    $result = array();
    foreach ($buckets as $key => $value) {
        $k = $value[0];
        $v = $value[1];
        file_put_contents('/home/gt/php_worker9.txt', 'here1 ' . $k . ' ' . $v . '
', FILE_APPEND);
        array_push($result, $k);
        array_push($result, $v);
    }
    return $result;
};";s:7:"context";a:3:{s:13:"numPartitions";i:2;s:13:"partitionFunc";C:32:"SuperClosure\SerializableClosure":240:{a:5:{s:4:"code";s:137:"function ($x) {
    if ($x == null) {
        return 0;
    }
    $h = null;
    if (is_array($x)) {
    }
    return hash('md5', $x);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:5:"limit";i:256;}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":3796:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":1619:{a:5:{s:4:"code";s:67:"function ($split, $iterator) use($f) {
    return $f($iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":1395:{a:5:{s:4:"code";s:332:"function ($iterator) use($memory, $serializer, $createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc) {
    $agg = new \aggregator($createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc);
    $merger = new \ExternalMerger($agg, $memory * 0.9, $serializer);
    $merger->mergeValues($iterator);
    return $merger->items();
};";s:7:"context";a:5:{s:6:"memory";i:512;s:10:"serializer";O:23:"auto_batched_serializer":10:{s:9:"best_size";i:65536;s:20:"UNLIMITED_BATCH_SIZE";i:-1;s:18:"UNKNOWN_BATCH_SIZE";i:0;s:10:"serializer";N;s:10:"batch_size";i:0;s:19:"END_OF_DATA_SECTION";i:-1;s:20:"PHP_EXCEPTION_THROWN";i:-2;s:11:"TIMING_DATA";i:-3;s:13:"END_OF_STREAM";i:-4;s:4:"NULL";i:-5;}s:18:"createCombinerFunc";C:32:"SuperClosure\SerializableClosure":135:{a:5:{s:4:"code";s:33:"function ($x) {
    return $x;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"mergeValueFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}s:18:"mergeCombinersFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1813:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":369:{a:5:{s:4:"code";s:76:"function ($any, $iterator) use($f) {
    return array_map($f, $iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":137:{a:5:{s:4:"code";s:43:"function ($x) {
    return array($x, 1);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1081:{a:5:{s:4:"code";s:758:"function ($split, $iterator) use($f) {
    $sub_is_array = False;
    foreach ($iterator as $key => $value) {
        $temp = $f($value);
        if (is_array($temp)) {
            $sub_is_array = True;
            break;
        }
    }
    if ($sub_is_array) {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            if (is_array($temp)) {
                foreach ($temp as $e) {
                    array_push($result, $e);
                }
            }
        }
        return $result;
    } else {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            array_push($result, $temp);
        }
        return $result;
    }
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":166:{a:5:{s:4:"code";s:72:"function ($line) {
    $temp = explode(' ', $line);
    return $temp;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}
here5
here6do do do 
here7 array
here7a NULL
here7a NULL
here8  Array
socket_create()成功53527

socket_connect()成功
首次read_int()成功0
首次read_utf()成功5.6
here3C:32:"SuperClosure\SerializableClosure":6239:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":2079:{a:5:{s:4:"code";s:1625:"function ($split, $iterator) use($numPartitions, $partitionFunc, $limit, $outputSerializer) {
    $buckets = array();
    $c = 0;
    $batch = min(10 * $numPartitions, 1000);
    foreach ($iterator as $key => $value) {
        #wordcount为例，这是word=>count
        file_put_contents('/home/gt/php_worker9.txt', 'here0 ' . $key . ' ' . $value . '
', FILE_APPEND);
        $buckets[$partitionFunc($key) % $numPartitions] = array();
        $buckets[$partitionFunc($key) % $numPartitions][$key] = $value;
        $c++;
        if ($c % 1000 == 0 && memory_get_usage() / 1024 / 1024 > $limit || $c > $batch) {
            $n = sizeof($buckets);
            $size = 0;
            $result = array();
            foreach ($buckets as $key2 => $value2) {
                #value是一个array
                array_push($result, serialize($key2));
                $d = serialize($value2);
                unset($value2);
                array_push($result, $d);
                $size += strlen($d);
            }
            $avg = intval($size / $n) >> 20;
            # let 1M < avg < 10M
            if ($avg < 1) {
                $batch *= 1.5;
            } elseif ($avg > 10) {
                $batch = max(intval($batch / 1.5), 1);
            }
            $c = 0;
            return $result;
        }
    }
    $result = array();
    foreach ($buckets as $key => $value) {
        $k = $value[0];
        $v = $value[1];
        file_put_contents('/home/gt/php_worker9.txt', 'here1 ' . $k . ' ' . $v . '
', FILE_APPEND);
        array_push($result, $k);
        array_push($result, $v);
    }
    return $result;
};";s:7:"context";a:3:{s:13:"numPartitions";i:2;s:13:"partitionFunc";C:32:"SuperClosure\SerializableClosure":240:{a:5:{s:4:"code";s:137:"function ($x) {
    if ($x == null) {
        return 0;
    }
    $h = null;
    if (is_array($x)) {
    }
    return hash('md5', $x);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:5:"limit";i:256;}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":3796:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":1619:{a:5:{s:4:"code";s:67:"function ($split, $iterator) use($f) {
    return $f($iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":1395:{a:5:{s:4:"code";s:332:"function ($iterator) use($memory, $serializer, $createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc) {
    $agg = new \aggregator($createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc);
    $merger = new \ExternalMerger($agg, $memory * 0.9, $serializer);
    $merger->mergeValues($iterator);
    return $merger->items();
};";s:7:"context";a:5:{s:6:"memory";i:512;s:10:"serializer";O:23:"auto_batched_serializer":10:{s:9:"best_size";i:65536;s:20:"UNLIMITED_BATCH_SIZE";i:-1;s:18:"UNKNOWN_BATCH_SIZE";i:0;s:10:"serializer";N;s:10:"batch_size";i:0;s:19:"END_OF_DATA_SECTION";i:-1;s:20:"PHP_EXCEPTION_THROWN";i:-2;s:11:"TIMING_DATA";i:-3;s:13:"END_OF_STREAM";i:-4;s:4:"NULL";i:-5;}s:18:"createCombinerFunc";C:32:"SuperClosure\SerializableClosure":135:{a:5:{s:4:"code";s:33:"function ($x) {
    return $x;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"mergeValueFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}s:18:"mergeCombinersFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1813:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":369:{a:5:{s:4:"code";s:76:"function ($any, $iterator) use($f) {
    return array_map($f, $iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":137:{a:5:{s:4:"code";s:43:"function ($x) {
    return array($x, 1);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1081:{a:5:{s:4:"code";s:758:"function ($split, $iterator) use($f) {
    $sub_is_array = False;
    foreach ($iterator as $key => $value) {
        $temp = $f($value);
        if (is_array($temp)) {
            $sub_is_array = True;
            break;
        }
    }
    if ($sub_is_array) {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            if (is_array($temp)) {
                foreach ($temp as $e) {
                    array_push($result, $e);
                }
            }
        }
        return $result;
    } else {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            array_push($result, $temp);
        }
        return $result;
    }
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":166:{a:5:{s:4:"code";s:72:"function ($line) {
    $temp = explode(' ', $line);
    return $temp;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}
here5
here6test test test test try try try 
here7 array
here7a NULL
here7a NULL
here8  Array
socket_create()成功58815

socket_connect()成功
首次read_int()成功1
首次read_utf()成功5.6
here3C:32:"SuperClosure\SerializableClosure":6239:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":2079:{a:5:{s:4:"code";s:1625:"function ($split, $iterator) use($numPartitions, $partitionFunc, $limit, $outputSerializer) {
    $buckets = array();
    $c = 0;
    $batch = min(10 * $numPartitions, 1000);
    foreach ($iterator as $key => $value) {
        #wordcount为例，这是word=>count
        file_put_contents('/home/gt/php_worker9.txt', 'here0 ' . $key . ' ' . $value . '
', FILE_APPEND);
        $buckets[$partitionFunc($key) % $numPartitions] = array();
        $buckets[$partitionFunc($key) % $numPartitions][$key] = $value;
        $c++;
        if ($c % 1000 == 0 && memory_get_usage() / 1024 / 1024 > $limit || $c > $batch) {
            $n = sizeof($buckets);
            $size = 0;
            $result = array();
            foreach ($buckets as $key2 => $value2) {
                #value是一个array
                array_push($result, serialize($key2));
                $d = serialize($value2);
                unset($value2);
                array_push($result, $d);
                $size += strlen($d);
            }
            $avg = intval($size / $n) >> 20;
            # let 1M < avg < 10M
            if ($avg < 1) {
                $batch *= 1.5;
            } elseif ($avg > 10) {
                $batch = max(intval($batch / 1.5), 1);
            }
            $c = 0;
            return $result;
        }
    }
    $result = array();
    foreach ($buckets as $key => $value) {
        $k = $value[0];
        $v = $value[1];
        file_put_contents('/home/gt/php_worker9.txt', 'here1 ' . $k . ' ' . $v . '
', FILE_APPEND);
        array_push($result, $k);
        array_push($result, $v);
    }
    return $result;
};";s:7:"context";a:3:{s:13:"numPartitions";i:2;s:13:"partitionFunc";C:32:"SuperClosure\SerializableClosure":240:{a:5:{s:4:"code";s:137:"function ($x) {
    if ($x == null) {
        return 0;
    }
    $h = null;
    if (is_array($x)) {
    }
    return hash('md5', $x);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:5:"limit";i:256;}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":3796:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":1619:{a:5:{s:4:"code";s:67:"function ($split, $iterator) use($f) {
    return $f($iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":1395:{a:5:{s:4:"code";s:332:"function ($iterator) use($memory, $serializer, $createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc) {
    $agg = new \aggregator($createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc);
    $merger = new \ExternalMerger($agg, $memory * 0.9, $serializer);
    $merger->mergeValues($iterator);
    return $merger->items();
};";s:7:"context";a:5:{s:6:"memory";i:512;s:10:"serializer";O:23:"auto_batched_serializer":10:{s:9:"best_size";i:65536;s:20:"UNLIMITED_BATCH_SIZE";i:-1;s:18:"UNKNOWN_BATCH_SIZE";i:0;s:10:"serializer";N;s:10:"batch_size";i:0;s:19:"END_OF_DATA_SECTION";i:-1;s:20:"PHP_EXCEPTION_THROWN";i:-2;s:11:"TIMING_DATA";i:-3;s:13:"END_OF_STREAM";i:-4;s:4:"NULL";i:-5;}s:18:"createCombinerFunc";C:32:"SuperClosure\SerializableClosure":135:{a:5:{s:4:"code";s:33:"function ($x) {
    return $x;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"mergeValueFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}s:18:"mergeCombinersFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1813:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":369:{a:5:{s:4:"code";s:76:"function ($any, $iterator) use($f) {
    return array_map($f, $iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":137:{a:5:{s:4:"code";s:43:"function ($x) {
    return array($x, 1);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1081:{a:5:{s:4:"code";s:758:"function ($split, $iterator) use($f) {
    $sub_is_array = False;
    foreach ($iterator as $key => $value) {
        $temp = $f($value);
        if (is_array($temp)) {
            $sub_is_array = True;
            break;
        }
    }
    if ($sub_is_array) {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            if (is_array($temp)) {
                foreach ($temp as $e) {
                    array_push($result, $e);
                }
            }
        }
        return $result;
    } else {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            array_push($result, $temp);
        }
        return $result;
    }
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":166:{a:5:{s:4:"code";s:72:"function ($line) {
    $temp = explode(' ', $line);
    return $temp;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}
here5
here6do do do 
here7 array
here7a NULL
here7a NULL
here8  Array
socket_create()成功35323

socket_connect()成功
首次read_int()成功0
首次read_utf()成功5.6
here3C:32:"SuperClosure\SerializableClosure":6239:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":2079:{a:5:{s:4:"code";s:1625:"function ($split, $iterator) use($numPartitions, $partitionFunc, $limit, $outputSerializer) {
    $buckets = array();
    $c = 0;
    $batch = min(10 * $numPartitions, 1000);
    foreach ($iterator as $key => $value) {
        #wordcount为例，这是word=>count
        file_put_contents('/home/gt/php_worker9.txt', 'here0 ' . $key . ' ' . $value . '
', FILE_APPEND);
        $buckets[$partitionFunc($key) % $numPartitions] = array();
        $buckets[$partitionFunc($key) % $numPartitions][$key] = $value;
        $c++;
        if ($c % 1000 == 0 && memory_get_usage() / 1024 / 1024 > $limit || $c > $batch) {
            $n = sizeof($buckets);
            $size = 0;
            $result = array();
            foreach ($buckets as $key2 => $value2) {
                #value是一个array
                array_push($result, serialize($key2));
                $d = serialize($value2);
                unset($value2);
                array_push($result, $d);
                $size += strlen($d);
            }
            $avg = intval($size / $n) >> 20;
            # let 1M < avg < 10M
            if ($avg < 1) {
                $batch *= 1.5;
            } elseif ($avg > 10) {
                $batch = max(intval($batch / 1.5), 1);
            }
            $c = 0;
            return $result;
        }
    }
    $result = array();
    foreach ($buckets as $key => $value) {
        $k = $value[0];
        $v = $value[1];
        file_put_contents('/home/gt/php_worker9.txt', 'here1 ' . $k . ' ' . $v . '
', FILE_APPEND);
        array_push($result, $k);
        array_push($result, $v);
    }
    return $result;
};";s:7:"context";a:3:{s:13:"numPartitions";i:2;s:13:"partitionFunc";C:32:"SuperClosure\SerializableClosure":240:{a:5:{s:4:"code";s:137:"function ($x) {
    if ($x == null) {
        return 0;
    }
    $h = null;
    if (is_array($x)) {
    }
    return hash('md5', $x);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:5:"limit";i:256;}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":3796:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":1619:{a:5:{s:4:"code";s:67:"function ($split, $iterator) use($f) {
    return $f($iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":1395:{a:5:{s:4:"code";s:332:"function ($iterator) use($memory, $serializer, $createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc) {
    $agg = new \aggregator($createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc);
    $merger = new \ExternalMerger($agg, $memory * 0.9, $serializer);
    $merger->mergeValues($iterator);
    return $merger->items();
};";s:7:"context";a:5:{s:6:"memory";i:512;s:10:"serializer";O:23:"auto_batched_serializer":10:{s:9:"best_size";i:65536;s:20:"UNLIMITED_BATCH_SIZE";i:-1;s:18:"UNKNOWN_BATCH_SIZE";i:0;s:10:"serializer";N;s:10:"batch_size";i:0;s:19:"END_OF_DATA_SECTION";i:-1;s:20:"PHP_EXCEPTION_THROWN";i:-2;s:11:"TIMING_DATA";i:-3;s:13:"END_OF_STREAM";i:-4;s:4:"NULL";i:-5;}s:18:"createCombinerFunc";C:32:"SuperClosure\SerializableClosure":135:{a:5:{s:4:"code";s:33:"function ($x) {
    return $x;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"mergeValueFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}s:18:"mergeCombinersFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1813:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":369:{a:5:{s:4:"code";s:76:"function ($any, $iterator) use($f) {
    return array_map($f, $iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":137:{a:5:{s:4:"code";s:43:"function ($x) {
    return array($x, 1);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1081:{a:5:{s:4:"code";s:758:"function ($split, $iterator) use($f) {
    $sub_is_array = False;
    foreach ($iterator as $key => $value) {
        $temp = $f($value);
        if (is_array($temp)) {
            $sub_is_array = True;
            break;
        }
    }
    if ($sub_is_array) {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            if (is_array($temp)) {
                foreach ($temp as $e) {
                    array_push($result, $e);
                }
            }
        }
        return $result;
    } else {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            array_push($result, $temp);
        }
        return $result;
    }
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":166:{a:5:{s:4:"code";s:72:"function ($line) {
    $temp = explode(' ', $line);
    return $temp;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}
here5
here6test test test test try try try 
here7 array
here7a NULL
here7a NULL
here8  Array
socket_create()成功41474

socket_connect()成功
首次read_int()成功1
首次read_utf()成功5.6
here3C:32:"SuperClosure\SerializableClosure":6239:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":2079:{a:5:{s:4:"code";s:1625:"function ($split, $iterator) use($numPartitions, $partitionFunc, $limit, $outputSerializer) {
    $buckets = array();
    $c = 0;
    $batch = min(10 * $numPartitions, 1000);
    foreach ($iterator as $key => $value) {
        #wordcount为例，这是word=>count
        file_put_contents('/home/gt/php_worker9.txt', 'here0 ' . $key . ' ' . $value . '
', FILE_APPEND);
        $buckets[$partitionFunc($key) % $numPartitions] = array();
        $buckets[$partitionFunc($key) % $numPartitions][$key] = $value;
        $c++;
        if ($c % 1000 == 0 && memory_get_usage() / 1024 / 1024 > $limit || $c > $batch) {
            $n = sizeof($buckets);
            $size = 0;
            $result = array();
            foreach ($buckets as $key2 => $value2) {
                #value是一个array
                array_push($result, serialize($key2));
                $d = serialize($value2);
                unset($value2);
                array_push($result, $d);
                $size += strlen($d);
            }
            $avg = intval($size / $n) >> 20;
            # let 1M < avg < 10M
            if ($avg < 1) {
                $batch *= 1.5;
            } elseif ($avg > 10) {
                $batch = max(intval($batch / 1.5), 1);
            }
            $c = 0;
            return $result;
        }
    }
    $result = array();
    foreach ($buckets as $key => $value) {
        $k = $value[0];
        $v = $value[1];
        file_put_contents('/home/gt/php_worker9.txt', 'here1 ' . $k . ' ' . $v . '
', FILE_APPEND);
        array_push($result, $k);
        array_push($result, $v);
    }
    return $result;
};";s:7:"context";a:3:{s:13:"numPartitions";i:2;s:13:"partitionFunc";C:32:"SuperClosure\SerializableClosure":240:{a:5:{s:4:"code";s:137:"function ($x) {
    if ($x == null) {
        return 0;
    }
    $h = null;
    if (is_array($x)) {
    }
    return hash('md5', $x);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:5:"limit";i:256;}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":3796:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":1619:{a:5:{s:4:"code";s:67:"function ($split, $iterator) use($f) {
    return $f($iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":1395:{a:5:{s:4:"code";s:332:"function ($iterator) use($memory, $serializer, $createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc) {
    $agg = new \aggregator($createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc);
    $merger = new \ExternalMerger($agg, $memory * 0.9, $serializer);
    $merger->mergeValues($iterator);
    return $merger->items();
};";s:7:"context";a:5:{s:6:"memory";i:512;s:10:"serializer";O:23:"auto_batched_serializer":10:{s:9:"best_size";i:65536;s:20:"UNLIMITED_BATCH_SIZE";i:-1;s:18:"UNKNOWN_BATCH_SIZE";i:0;s:10:"serializer";N;s:10:"batch_size";i:0;s:19:"END_OF_DATA_SECTION";i:-1;s:20:"PHP_EXCEPTION_THROWN";i:-2;s:11:"TIMING_DATA";i:-3;s:13:"END_OF_STREAM";i:-4;s:4:"NULL";i:-5;}s:18:"createCombinerFunc";C:32:"SuperClosure\SerializableClosure":135:{a:5:{s:4:"code";s:33:"function ($x) {
    return $x;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"mergeValueFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}s:18:"mergeCombinersFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1813:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":369:{a:5:{s:4:"code";s:76:"function ($any, $iterator) use($f) {
    return array_map($f, $iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":137:{a:5:{s:4:"code";s:43:"function ($x) {
    return array($x, 1);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1081:{a:5:{s:4:"code";s:758:"function ($split, $iterator) use($f) {
    $sub_is_array = False;
    foreach ($iterator as $key => $value) {
        $temp = $f($value);
        if (is_array($temp)) {
            $sub_is_array = True;
            break;
        }
    }
    if ($sub_is_array) {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            if (is_array($temp)) {
                foreach ($temp as $e) {
                    array_push($result, $e);
                }
            }
        }
        return $result;
    } else {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            array_push($result, $temp);
        }
        return $result;
    }
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":166:{a:5:{s:4:"code";s:72:"function ($line) {
    $temp = explode(' ', $line);
    return $temp;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}
here5
here6do do do 
here7 array
here7a NULL
here7a NULL
here8  Array
socket_create()成功57152

socket_connect()成功
首次read_int()成功0
首次read_utf()成功5.6
here3C:32:"SuperClosure\SerializableClosure":6239:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":2079:{a:5:{s:4:"code";s:1625:"function ($split, $iterator) use($numPartitions, $partitionFunc, $limit, $outputSerializer) {
    $buckets = array();
    $c = 0;
    $batch = min(10 * $numPartitions, 1000);
    foreach ($iterator as $key => $value) {
        #wordcount为例，这是word=>count
        file_put_contents('/home/gt/php_worker9.txt', 'here0 ' . $key . ' ' . $value . '
', FILE_APPEND);
        $buckets[$partitionFunc($key) % $numPartitions] = array();
        $buckets[$partitionFunc($key) % $numPartitions][$key] = $value;
        $c++;
        if ($c % 1000 == 0 && memory_get_usage() / 1024 / 1024 > $limit || $c > $batch) {
            $n = sizeof($buckets);
            $size = 0;
            $result = array();
            foreach ($buckets as $key2 => $value2) {
                #value是一个array
                array_push($result, serialize($key2));
                $d = serialize($value2);
                unset($value2);
                array_push($result, $d);
                $size += strlen($d);
            }
            $avg = intval($size / $n) >> 20;
            # let 1M < avg < 10M
            if ($avg < 1) {
                $batch *= 1.5;
            } elseif ($avg > 10) {
                $batch = max(intval($batch / 1.5), 1);
            }
            $c = 0;
            return $result;
        }
    }
    $result = array();
    foreach ($buckets as $key => $value) {
        $k = $value[0];
        $v = $value[1];
        file_put_contents('/home/gt/php_worker9.txt', 'here1 ' . $k . ' ' . $v . '
', FILE_APPEND);
        array_push($result, $k);
        array_push($result, $v);
    }
    return $result;
};";s:7:"context";a:3:{s:13:"numPartitions";i:2;s:13:"partitionFunc";C:32:"SuperClosure\SerializableClosure":240:{a:5:{s:4:"code";s:137:"function ($x) {
    if ($x == null) {
        return 0;
    }
    $h = null;
    if (is_array($x)) {
    }
    return hash('md5', $x);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:5:"limit";i:256;}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":3796:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":1619:{a:5:{s:4:"code";s:67:"function ($split, $iterator) use($f) {
    return $f($iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":1395:{a:5:{s:4:"code";s:332:"function ($iterator) use($memory, $serializer, $createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc) {
    $agg = new \aggregator($createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc);
    $merger = new \ExternalMerger($agg, $memory * 0.9, $serializer);
    $merger->mergeValues($iterator);
    return $merger->items();
};";s:7:"context";a:5:{s:6:"memory";i:512;s:10:"serializer";O:23:"auto_batched_serializer":10:{s:9:"best_size";i:65536;s:20:"UNLIMITED_BATCH_SIZE";i:-1;s:18:"UNKNOWN_BATCH_SIZE";i:0;s:10:"serializer";N;s:10:"batch_size";i:0;s:19:"END_OF_DATA_SECTION";i:-1;s:20:"PHP_EXCEPTION_THROWN";i:-2;s:11:"TIMING_DATA";i:-3;s:13:"END_OF_STREAM";i:-4;s:4:"NULL";i:-5;}s:18:"createCombinerFunc";C:32:"SuperClosure\SerializableClosure":135:{a:5:{s:4:"code";s:33:"function ($x) {
    return $x;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"mergeValueFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}s:18:"mergeCombinersFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1813:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":369:{a:5:{s:4:"code";s:76:"function ($any, $iterator) use($f) {
    return array_map($f, $iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":137:{a:5:{s:4:"code";s:43:"function ($x) {
    return array($x, 1);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1081:{a:5:{s:4:"code";s:758:"function ($split, $iterator) use($f) {
    $sub_is_array = False;
    foreach ($iterator as $key => $value) {
        $temp = $f($value);
        if (is_array($temp)) {
            $sub_is_array = True;
            break;
        }
    }
    if ($sub_is_array) {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            if (is_array($temp)) {
                foreach ($temp as $e) {
                    array_push($result, $e);
                }
            }
        }
        return $result;
    } else {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            array_push($result, $temp);
        }
        return $result;
    }
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":166:{a:5:{s:4:"code";s:72:"function ($line) {
    $temp = explode(' ', $line);
    return $temp;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}
here5
here6test test test test try try try 
here7 array
here7a NULL
here7a NULL
here8  Array
socket_create()成功41053

socket_connect()成功
首次read_int()成功0
首次read_utf()成功5.6
socket_create()成功46539

socket_connect()成功
首次read_int()成功1
首次read_utf()成功5.6
here3C:32:"SuperClosure\SerializableClosure":6244:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":2084:{a:5:{s:4:"code";s:1630:"function ($split, $iterator) use($numPartitions, $partitionFunc, $limit, $outputSerializer) {
    $buckets = array();
    $c = 0;
    $batch = min(10 * $numPartitions, 1000);
    foreach ($iterator as $key => $value) {
        #wordcount为例，这是word=>count
        file_put_contents('/home/gt/php_worker9.txt', 'here0 ' . $key . ' ' . $value . '
', FILE_APPEND);
        $buckets[$partitionFunc($key) % $numPartitions] = array();
        $buckets[$partitionFunc($key) % $numPartitions][$key] = $value;
        $c++;
        if ($c % 1000 == 0 && memory_get_usage() / 1024 / 1024 > $limit || $c > $batch) {
            $n = sizeof($buckets);
            $size = 0;
            $result = array();
            foreach ($buckets as $key2 => $value2) {
                #value是一个array
                array_push($result, serialize($key2));
                $d = serialize($value2);
                unset($value2);
                array_push($result, $d);
                $size += strlen($d);
            }
            $avg = intval($size / $n) >> 20;
            # let 1M < avg < 10M
            if ($avg < 1) {
                $batch *= 1.5;
            } elseif ($avg > 10) {
                $batch = max(intval($batch / 1.5), 1);
            }
            $c = 0;
            return $result;
        }
    }
    $result = array();
    foreach ($buckets as $key => $value) {
        foreach ($value as $k => $v) {
            file_put_contents('/home/gt/php_worker9.txt', 'here1 ' . $k . ' ' . $v . '
', FILE_APPEND);
        }
        array_push($result, $k);
        array_push($result, $v);
    }
    return $result;
};";s:7:"context";a:3:{s:13:"numPartitions";i:2;s:13:"partitionFunc";C:32:"SuperClosure\SerializableClosure":240:{a:5:{s:4:"code";s:137:"function ($x) {
    if ($x == null) {
        return 0;
    }
    $h = null;
    if (is_array($x)) {
    }
    return hash('md5', $x);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:5:"limit";i:256;}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":3796:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":1619:{a:5:{s:4:"code";s:67:"function ($split, $iterator) use($f) {
    return $f($iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":1395:{a:5:{s:4:"code";s:332:"function ($iterator) use($memory, $serializer, $createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc) {
    $agg = new \aggregator($createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc);
    $merger = new \ExternalMerger($agg, $memory * 0.9, $serializer);
    $merger->mergeValues($iterator);
    return $merger->items();
};";s:7:"context";a:5:{s:6:"memory";i:512;s:10:"serializer";O:23:"auto_batched_serializer":10:{s:9:"best_size";i:65536;s:20:"UNLIMITED_BATCH_SIZE";i:-1;s:18:"UNKNOWN_BATCH_SIZE";i:0;s:10:"serializer";N;s:10:"batch_size";i:0;s:19:"END_OF_DATA_SECTION";i:-1;s:20:"PHP_EXCEPTION_THROWN";i:-2;s:11:"TIMING_DATA";i:-3;s:13:"END_OF_STREAM";i:-4;s:4:"NULL";i:-5;}s:18:"createCombinerFunc";C:32:"SuperClosure\SerializableClosure":135:{a:5:{s:4:"code";s:33:"function ($x) {
    return $x;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"mergeValueFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}s:18:"mergeCombinersFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1813:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":369:{a:5:{s:4:"code";s:76:"function ($any, $iterator) use($f) {
    return array_map($f, $iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":137:{a:5:{s:4:"code";s:43:"function ($x) {
    return array($x, 1);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1081:{a:5:{s:4:"code";s:758:"function ($split, $iterator) use($f) {
    $sub_is_array = False;
    foreach ($iterator as $key => $value) {
        $temp = $f($value);
        if (is_array($temp)) {
            $sub_is_array = True;
            break;
        }
    }
    if ($sub_is_array) {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            if (is_array($temp)) {
                foreach ($temp as $e) {
                    array_push($result, $e);
                }
            }
        }
        return $result;
    } else {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            array_push($result, $temp);
        }
        return $result;
    }
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":166:{a:5:{s:4:"code";s:72:"function ($line) {
    $temp = explode(' ', $line);
    return $temp;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}
here5
here6test test test test try try try 
here7 array
here7a string
here7a integer
here8  Array
here3C:32:"SuperClosure\SerializableClosure":6244:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":2084:{a:5:{s:4:"code";s:1630:"function ($split, $iterator) use($numPartitions, $partitionFunc, $limit, $outputSerializer) {
    $buckets = array();
    $c = 0;
    $batch = min(10 * $numPartitions, 1000);
    foreach ($iterator as $key => $value) {
        #wordcount为例，这是word=>count
        file_put_contents('/home/gt/php_worker9.txt', 'here0 ' . $key . ' ' . $value . '
', FILE_APPEND);
        $buckets[$partitionFunc($key) % $numPartitions] = array();
        $buckets[$partitionFunc($key) % $numPartitions][$key] = $value;
        $c++;
        if ($c % 1000 == 0 && memory_get_usage() / 1024 / 1024 > $limit || $c > $batch) {
            $n = sizeof($buckets);
            $size = 0;
            $result = array();
            foreach ($buckets as $key2 => $value2) {
                #value是一个array
                array_push($result, serialize($key2));
                $d = serialize($value2);
                unset($value2);
                array_push($result, $d);
                $size += strlen($d);
            }
            $avg = intval($size / $n) >> 20;
            # let 1M < avg < 10M
            if ($avg < 1) {
                $batch *= 1.5;
            } elseif ($avg > 10) {
                $batch = max(intval($batch / 1.5), 1);
            }
            $c = 0;
            return $result;
        }
    }
    $result = array();
    foreach ($buckets as $key => $value) {
        foreach ($value as $k => $v) {
            file_put_contents('/home/gt/php_worker9.txt', 'here1 ' . $k . ' ' . $v . '
', FILE_APPEND);
        }
        array_push($result, $k);
        array_push($result, $v);
    }
    return $result;
};";s:7:"context";a:3:{s:13:"numPartitions";i:2;s:13:"partitionFunc";C:32:"SuperClosure\SerializableClosure":240:{a:5:{s:4:"code";s:137:"function ($x) {
    if ($x == null) {
        return 0;
    }
    $h = null;
    if (is_array($x)) {
    }
    return hash('md5', $x);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:5:"limit";i:256;}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":3796:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":1619:{a:5:{s:4:"code";s:67:"function ($split, $iterator) use($f) {
    return $f($iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":1395:{a:5:{s:4:"code";s:332:"function ($iterator) use($memory, $serializer, $createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc) {
    $agg = new \aggregator($createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc);
    $merger = new \ExternalMerger($agg, $memory * 0.9, $serializer);
    $merger->mergeValues($iterator);
    return $merger->items();
};";s:7:"context";a:5:{s:6:"memory";i:512;s:10:"serializer";O:23:"auto_batched_serializer":10:{s:9:"best_size";i:65536;s:20:"UNLIMITED_BATCH_SIZE";i:-1;s:18:"UNKNOWN_BATCH_SIZE";i:0;s:10:"serializer";N;s:10:"batch_size";i:0;s:19:"END_OF_DATA_SECTION";i:-1;s:20:"PHP_EXCEPTION_THROWN";i:-2;s:11:"TIMING_DATA";i:-3;s:13:"END_OF_STREAM";i:-4;s:4:"NULL";i:-5;}s:18:"createCombinerFunc";C:32:"SuperClosure\SerializableClosure":135:{a:5:{s:4:"code";s:33:"function ($x) {
    return $x;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"mergeValueFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}s:18:"mergeCombinersFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1813:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":369:{a:5:{s:4:"code";s:76:"function ($any, $iterator) use($f) {
    return array_map($f, $iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":137:{a:5:{s:4:"code";s:43:"function ($x) {
    return array($x, 1);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1081:{a:5:{s:4:"code";s:758:"function ($split, $iterator) use($f) {
    $sub_is_array = False;
    foreach ($iterator as $key => $value) {
        $temp = $f($value);
        if (is_array($temp)) {
            $sub_is_array = True;
            break;
        }
    }
    if ($sub_is_array) {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            if (is_array($temp)) {
                foreach ($temp as $e) {
                    array_push($result, $e);
                }
            }
        }
        return $result;
    } else {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            array_push($result, $temp);
        }
        return $result;
    }
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":166:{a:5:{s:4:"code";s:72:"function ($line) {
    $temp = explode(' ', $line);
    return $temp;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}
here5
here6do do do 
here7 array
here7a string
here7a integer
here8  Array
socket_create()成功44024

socket_connect()成功
首次read_int()成功0
首次read_utf()成功5.6
here3C:32:"SuperClosure\SerializableClosure":6244:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":2084:{a:5:{s:4:"code";s:1630:"function ($split, $iterator) use($numPartitions, $partitionFunc, $limit, $outputSerializer) {
    $buckets = array();
    $c = 0;
    $batch = min(10 * $numPartitions, 1000);
    foreach ($iterator as $key => $value) {
        #wordcount为例，这是word=>count
        file_put_contents('/home/gt/php_worker9.txt', 'here0 ' . $key . ' ' . $value . '
', FILE_APPEND);
        $buckets[$partitionFunc($key) % $numPartitions] = array();
        $buckets[$partitionFunc($key) % $numPartitions][$key] = $value;
        $c++;
        if ($c % 1000 == 0 && memory_get_usage() / 1024 / 1024 > $limit || $c > $batch) {
            $n = sizeof($buckets);
            $size = 0;
            $result = array();
            foreach ($buckets as $key2 => $value2) {
                #value是一个array
                array_push($result, serialize($key2));
                $d = serialize($value2);
                unset($value2);
                array_push($result, $d);
                $size += strlen($d);
            }
            $avg = intval($size / $n) >> 20;
            # let 1M < avg < 10M
            if ($avg < 1) {
                $batch *= 1.5;
            } elseif ($avg > 10) {
                $batch = max(intval($batch / 1.5), 1);
            }
            $c = 0;
            return $result;
        }
    }
    $result = array();
    foreach ($buckets as $key => $value) {
        foreach ($value as $k => $v) {
            file_put_contents('/home/gt/php_worker9.txt', 'here1 ' . $k . ' ' . $v . '
', FILE_APPEND);
        }
        array_push($result, $k);
        array_push($result, $v);
    }
    return $result;
};";s:7:"context";a:3:{s:13:"numPartitions";i:2;s:13:"partitionFunc";C:32:"SuperClosure\SerializableClosure":240:{a:5:{s:4:"code";s:137:"function ($x) {
    if ($x == null) {
        return 0;
    }
    $h = null;
    if (is_array($x)) {
    }
    return hash('md5', $x);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:5:"limit";i:256;}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":3796:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":1619:{a:5:{s:4:"code";s:67:"function ($split, $iterator) use($f) {
    return $f($iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":1395:{a:5:{s:4:"code";s:332:"function ($iterator) use($memory, $serializer, $createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc) {
    $agg = new \aggregator($createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc);
    $merger = new \ExternalMerger($agg, $memory * 0.9, $serializer);
    $merger->mergeValues($iterator);
    return $merger->items();
};";s:7:"context";a:5:{s:6:"memory";i:512;s:10:"serializer";O:23:"auto_batched_serializer":10:{s:9:"best_size";i:65536;s:20:"UNLIMITED_BATCH_SIZE";i:-1;s:18:"UNKNOWN_BATCH_SIZE";i:0;s:10:"serializer";N;s:10:"batch_size";i:0;s:19:"END_OF_DATA_SECTION";i:-1;s:20:"PHP_EXCEPTION_THROWN";i:-2;s:11:"TIMING_DATA";i:-3;s:13:"END_OF_STREAM";i:-4;s:4:"NULL";i:-5;}s:18:"createCombinerFunc";C:32:"SuperClosure\SerializableClosure":135:{a:5:{s:4:"code";s:33:"function ($x) {
    return $x;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"mergeValueFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}s:18:"mergeCombinersFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1813:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":369:{a:5:{s:4:"code";s:76:"function ($any, $iterator) use($f) {
    return array_map($f, $iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":137:{a:5:{s:4:"code";s:43:"function ($x) {
    return array($x, 1);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1081:{a:5:{s:4:"code";s:758:"function ($split, $iterator) use($f) {
    $sub_is_array = False;
    foreach ($iterator as $key => $value) {
        $temp = $f($value);
        if (is_array($temp)) {
            $sub_is_array = True;
            break;
        }
    }
    if ($sub_is_array) {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            if (is_array($temp)) {
                foreach ($temp as $e) {
                    array_push($result, $e);
                }
            }
        }
        return $result;
    } else {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            array_push($result, $temp);
        }
        return $result;
    }
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":166:{a:5:{s:4:"code";s:72:"function ($line) {
    $temp = explode(' ', $line);
    return $temp;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}
here5
here6test test test test try try try 
here7 array
here7a string
here7a integer
here8  Array
socket_create()成功52940

socket_connect()成功
首次read_int()成功1
首次read_utf()成功5.6
here3C:32:"SuperClosure\SerializableClosure":6244:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":2084:{a:5:{s:4:"code";s:1630:"function ($split, $iterator) use($numPartitions, $partitionFunc, $limit, $outputSerializer) {
    $buckets = array();
    $c = 0;
    $batch = min(10 * $numPartitions, 1000);
    foreach ($iterator as $key => $value) {
        #wordcount为例，这是word=>count
        file_put_contents('/home/gt/php_worker9.txt', 'here0 ' . $key . ' ' . $value . '
', FILE_APPEND);
        $buckets[$partitionFunc($key) % $numPartitions] = array();
        $buckets[$partitionFunc($key) % $numPartitions][$key] = $value;
        $c++;
        if ($c % 1000 == 0 && memory_get_usage() / 1024 / 1024 > $limit || $c > $batch) {
            $n = sizeof($buckets);
            $size = 0;
            $result = array();
            foreach ($buckets as $key2 => $value2) {
                #value是一个array
                array_push($result, serialize($key2));
                $d = serialize($value2);
                unset($value2);
                array_push($result, $d);
                $size += strlen($d);
            }
            $avg = intval($size / $n) >> 20;
            # let 1M < avg < 10M
            if ($avg < 1) {
                $batch *= 1.5;
            } elseif ($avg > 10) {
                $batch = max(intval($batch / 1.5), 1);
            }
            $c = 0;
            return $result;
        }
    }
    $result = array();
    foreach ($buckets as $key => $value) {
        foreach ($value as $k => $v) {
            file_put_contents('/home/gt/php_worker9.txt', 'here1 ' . $k . ' ' . $v . '
', FILE_APPEND);
        }
        array_push($result, $k);
        array_push($result, $v);
    }
    return $result;
};";s:7:"context";a:3:{s:13:"numPartitions";i:2;s:13:"partitionFunc";C:32:"SuperClosure\SerializableClosure":240:{a:5:{s:4:"code";s:137:"function ($x) {
    if ($x == null) {
        return 0;
    }
    $h = null;
    if (is_array($x)) {
    }
    return hash('md5', $x);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:5:"limit";i:256;}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":3796:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":1619:{a:5:{s:4:"code";s:67:"function ($split, $iterator) use($f) {
    return $f($iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":1395:{a:5:{s:4:"code";s:332:"function ($iterator) use($memory, $serializer, $createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc) {
    $agg = new \aggregator($createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc);
    $merger = new \ExternalMerger($agg, $memory * 0.9, $serializer);
    $merger->mergeValues($iterator);
    return $merger->items();
};";s:7:"context";a:5:{s:6:"memory";i:512;s:10:"serializer";O:23:"auto_batched_serializer":10:{s:9:"best_size";i:65536;s:20:"UNLIMITED_BATCH_SIZE";i:-1;s:18:"UNKNOWN_BATCH_SIZE";i:0;s:10:"serializer";N;s:10:"batch_size";i:0;s:19:"END_OF_DATA_SECTION";i:-1;s:20:"PHP_EXCEPTION_THROWN";i:-2;s:11:"TIMING_DATA";i:-3;s:13:"END_OF_STREAM";i:-4;s:4:"NULL";i:-5;}s:18:"createCombinerFunc";C:32:"SuperClosure\SerializableClosure":135:{a:5:{s:4:"code";s:33:"function ($x) {
    return $x;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"mergeValueFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}s:18:"mergeCombinersFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1813:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":369:{a:5:{s:4:"code";s:76:"function ($any, $iterator) use($f) {
    return array_map($f, $iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":137:{a:5:{s:4:"code";s:43:"function ($x) {
    return array($x, 1);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1081:{a:5:{s:4:"code";s:758:"function ($split, $iterator) use($f) {
    $sub_is_array = False;
    foreach ($iterator as $key => $value) {
        $temp = $f($value);
        if (is_array($temp)) {
            $sub_is_array = True;
            break;
        }
    }
    if ($sub_is_array) {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            if (is_array($temp)) {
                foreach ($temp as $e) {
                    array_push($result, $e);
                }
            }
        }
        return $result;
    } else {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            array_push($result, $temp);
        }
        return $result;
    }
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":166:{a:5:{s:4:"code";s:72:"function ($line) {
    $temp = explode(' ', $line);
    return $temp;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}
here5
here6do do do 
here7 array
here7a string
here7a integer
here8  Array
socket_create()成功47787

socket_connect()成功
首次read_int()成功0
首次read_utf()成功5.6
here3C:32:"SuperClosure\SerializableClosure":6244:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":2084:{a:5:{s:4:"code";s:1630:"function ($split, $iterator) use($numPartitions, $partitionFunc, $limit, $outputSerializer) {
    $buckets = array();
    $c = 0;
    $batch = min(10 * $numPartitions, 1000);
    foreach ($iterator as $key => $value) {
        #wordcount为例，这是word=>count
        file_put_contents('/home/gt/php_worker9.txt', 'here0 ' . $key . ' ' . $value . '
', FILE_APPEND);
        $buckets[$partitionFunc($key) % $numPartitions] = array();
        $buckets[$partitionFunc($key) % $numPartitions][$key] = $value;
        $c++;
        if ($c % 1000 == 0 && memory_get_usage() / 1024 / 1024 > $limit || $c > $batch) {
            $n = sizeof($buckets);
            $size = 0;
            $result = array();
            foreach ($buckets as $key2 => $value2) {
                #value是一个array
                array_push($result, serialize($key2));
                $d = serialize($value2);
                unset($value2);
                array_push($result, $d);
                $size += strlen($d);
            }
            $avg = intval($size / $n) >> 20;
            # let 1M < avg < 10M
            if ($avg < 1) {
                $batch *= 1.5;
            } elseif ($avg > 10) {
                $batch = max(intval($batch / 1.5), 1);
            }
            $c = 0;
            return $result;
        }
    }
    $result = array();
    foreach ($buckets as $key => $value) {
        foreach ($value as $k => $v) {
            file_put_contents('/home/gt/php_worker9.txt', 'here1 ' . $k . ' ' . $v . '
', FILE_APPEND);
        }
        array_push($result, $k);
        array_push($result, $v);
    }
    return $result;
};";s:7:"context";a:3:{s:13:"numPartitions";i:2;s:13:"partitionFunc";C:32:"SuperClosure\SerializableClosure":240:{a:5:{s:4:"code";s:137:"function ($x) {
    if ($x == null) {
        return 0;
    }
    $h = null;
    if (is_array($x)) {
    }
    return hash('md5', $x);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:5:"limit";i:256;}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":3796:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":1619:{a:5:{s:4:"code";s:67:"function ($split, $iterator) use($f) {
    return $f($iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":1395:{a:5:{s:4:"code";s:332:"function ($iterator) use($memory, $serializer, $createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc) {
    $agg = new \aggregator($createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc);
    $merger = new \ExternalMerger($agg, $memory * 0.9, $serializer);
    $merger->mergeValues($iterator);
    return $merger->items();
};";s:7:"context";a:5:{s:6:"memory";i:512;s:10:"serializer";O:23:"auto_batched_serializer":10:{s:9:"best_size";i:65536;s:20:"UNLIMITED_BATCH_SIZE";i:-1;s:18:"UNKNOWN_BATCH_SIZE";i:0;s:10:"serializer";N;s:10:"batch_size";i:0;s:19:"END_OF_DATA_SECTION";i:-1;s:20:"PHP_EXCEPTION_THROWN";i:-2;s:11:"TIMING_DATA";i:-3;s:13:"END_OF_STREAM";i:-4;s:4:"NULL";i:-5;}s:18:"createCombinerFunc";C:32:"SuperClosure\SerializableClosure":135:{a:5:{s:4:"code";s:33:"function ($x) {
    return $x;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"mergeValueFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}s:18:"mergeCombinersFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1813:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":369:{a:5:{s:4:"code";s:76:"function ($any, $iterator) use($f) {
    return array_map($f, $iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":137:{a:5:{s:4:"code";s:43:"function ($x) {
    return array($x, 1);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1081:{a:5:{s:4:"code";s:758:"function ($split, $iterator) use($f) {
    $sub_is_array = False;
    foreach ($iterator as $key => $value) {
        $temp = $f($value);
        if (is_array($temp)) {
            $sub_is_array = True;
            break;
        }
    }
    if ($sub_is_array) {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            if (is_array($temp)) {
                foreach ($temp as $e) {
                    array_push($result, $e);
                }
            }
        }
        return $result;
    } else {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            array_push($result, $temp);
        }
        return $result;
    }
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":166:{a:5:{s:4:"code";s:72:"function ($line) {
    $temp = explode(' ', $line);
    return $temp;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}
socket_create()成功33402

here5
here6test test test test try try try 
here7 array
here7a string
socket_connect()成功
here7a integer
here8  Array
首次read_int()成功1
首次read_utf()成功5.6
here3C:32:"SuperClosure\SerializableClosure":6244:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":2084:{a:5:{s:4:"code";s:1630:"function ($split, $iterator) use($numPartitions, $partitionFunc, $limit, $outputSerializer) {
    $buckets = array();
    $c = 0;
    $batch = min(10 * $numPartitions, 1000);
    foreach ($iterator as $key => $value) {
        #wordcount为例，这是word=>count
        file_put_contents('/home/gt/php_worker9.txt', 'here0 ' . $key . ' ' . $value . '
', FILE_APPEND);
        $buckets[$partitionFunc($key) % $numPartitions] = array();
        $buckets[$partitionFunc($key) % $numPartitions][$key] = $value;
        $c++;
        if ($c % 1000 == 0 && memory_get_usage() / 1024 / 1024 > $limit || $c > $batch) {
            $n = sizeof($buckets);
            $size = 0;
            $result = array();
            foreach ($buckets as $key2 => $value2) {
                #value是一个array
                array_push($result, serialize($key2));
                $d = serialize($value2);
                unset($value2);
                array_push($result, $d);
                $size += strlen($d);
            }
            $avg = intval($size / $n) >> 20;
            # let 1M < avg < 10M
            if ($avg < 1) {
                $batch *= 1.5;
            } elseif ($avg > 10) {
                $batch = max(intval($batch / 1.5), 1);
            }
            $c = 0;
            return $result;
        }
    }
    $result = array();
    foreach ($buckets as $key => $value) {
        foreach ($value as $k => $v) {
            file_put_contents('/home/gt/php_worker9.txt', 'here1 ' . $k . ' ' . $v . '
', FILE_APPEND);
        }
        array_push($result, $k);
        array_push($result, $v);
    }
    return $result;
};";s:7:"context";a:3:{s:13:"numPartitions";i:2;s:13:"partitionFunc";C:32:"SuperClosure\SerializableClosure":240:{a:5:{s:4:"code";s:137:"function ($x) {
    if ($x == null) {
        return 0;
    }
    $h = null;
    if (is_array($x)) {
    }
    return hash('md5', $x);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:5:"limit";i:256;}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":3796:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":1619:{a:5:{s:4:"code";s:67:"function ($split, $iterator) use($f) {
    return $f($iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":1395:{a:5:{s:4:"code";s:332:"function ($iterator) use($memory, $serializer, $createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc) {
    $agg = new \aggregator($createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc);
    $merger = new \ExternalMerger($agg, $memory * 0.9, $serializer);
    $merger->mergeValues($iterator);
    return $merger->items();
};";s:7:"context";a:5:{s:6:"memory";i:512;s:10:"serializer";O:23:"auto_batched_serializer":10:{s:9:"best_size";i:65536;s:20:"UNLIMITED_BATCH_SIZE";i:-1;s:18:"UNKNOWN_BATCH_SIZE";i:0;s:10:"serializer";N;s:10:"batch_size";i:0;s:19:"END_OF_DATA_SECTION";i:-1;s:20:"PHP_EXCEPTION_THROWN";i:-2;s:11:"TIMING_DATA";i:-3;s:13:"END_OF_STREAM";i:-4;s:4:"NULL";i:-5;}s:18:"createCombinerFunc";C:32:"SuperClosure\SerializableClosure":135:{a:5:{s:4:"code";s:33:"function ($x) {
    return $x;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"mergeValueFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}s:18:"mergeCombinersFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1813:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":369:{a:5:{s:4:"code";s:76:"function ($any, $iterator) use($f) {
    return array_map($f, $iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":137:{a:5:{s:4:"code";s:43:"function ($x) {
    return array($x, 1);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1081:{a:5:{s:4:"code";s:758:"function ($split, $iterator) use($f) {
    $sub_is_array = False;
    foreach ($iterator as $key => $value) {
        $temp = $f($value);
        if (is_array($temp)) {
            $sub_is_array = True;
            break;
        }
    }
    if ($sub_is_array) {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            if (is_array($temp)) {
                foreach ($temp as $e) {
                    array_push($result, $e);
                }
            }
        }
        return $result;
    } else {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            array_push($result, $temp);
        }
        return $result;
    }
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":166:{a:5:{s:4:"code";s:72:"function ($line) {
    $temp = explode(' ', $line);
    return $temp;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}
here5
here6do do do 
here7 array
here7a string
here7a integer
here8  Array
socket_create()成功36014

socket_connect()成功
首次read_int()成功0
首次read_utf()成功5.6
socket_create()成功57534

here3C:32:"SuperClosure\SerializableClosure":6244:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":2084:{a:5:{s:4:"code";s:1630:"function ($split, $iterator) use($numPartitions, $partitionFunc, $limit, $outputSerializer) {
    $buckets = array();
    $c = 0;
    $batch = min(10 * $numPartitions, 1000);
    foreach ($iterator as $key => $value) {
        #wordcount为例，这是word=>count
        file_put_contents('/home/gt/php_worker9.txt', 'here0 ' . $key . ' ' . $value . '
', FILE_APPEND);
        $buckets[$partitionFunc($key) % $numPartitions] = array();
        $buckets[$partitionFunc($key) % $numPartitions][$key] = $value;
        $c++;
        if ($c % 1000 == 0 && memory_get_usage() / 1024 / 1024 > $limit || $c > $batch) {
            $n = sizeof($buckets);
            $size = 0;
            $result = array();
            foreach ($buckets as $key2 => $value2) {
                #value是一个array
                array_push($result, serialize($key2));
                $d = serialize($value2);
                unset($value2);
                array_push($result, $d);
                $size += strlen($d);
            }
            $avg = intval($size / $n) >> 20;
            # let 1M < avg < 10M
            if ($avg < 1) {
                $batch *= 1.5;
            } elseif ($avg > 10) {
                $batch = max(intval($batch / 1.5), 1);
            }
            $c = 0;
            return $result;
        }
    }
    $result = array();
    foreach ($buckets as $key => $value) {
        foreach ($value as $k => $v) {
            file_put_contents('/home/gt/php_worker9.txt', 'here1 ' . $k . ' ' . $v . '
', FILE_APPEND);
        }
        array_push($result, $k);
        array_push($result, $v);
    }
    return $result;
};";s:7:"context";a:3:{s:13:"numPartitions";i:2;s:13:"partitionFunc";C:32:"SuperClosure\SerializableClosure":240:{a:5:{s:4:"code";s:137:"function ($x) {
    if ($x == null) {
        return 0;
    }
    $h = null;
    if (is_array($x)) {
    }
    return hash('md5', $x);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:5:"limit";i:256;}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":3796:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":1619:{a:5:{s:4:"code";s:67:"function ($split, $iterator) use($f) {
    return $f($iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":1395:{a:5:{s:4:"code";s:332:"function ($iterator) use($memory, $serializer, $createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc) {
    $agg = new \aggregator($createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc);
    $merger = new \ExternalMerger($agg, $memory * 0.9, $serializer);
    $merger->mergeValues($iterator);
    return $merger->items();
};";s:7:"context";a:5:{s:6:"memory";i:512;s:10:"serializer";O:23:"auto_batched_serializer":10:{s:9:"best_size";i:65536;s:20:"UNLIMITED_BATCH_SIZE";i:-1;s:18:"UNKNOWN_BATCH_SIZE";i:0;s:10:"serializer";N;s:10:"batch_size";i:0;s:19:"END_OF_DATA_SECTION";i:-1;s:20:"PHP_EXCEPTION_THROWN";i:-2;s:11:"TIMING_DATA";i:-3;s:13:"END_OF_STREAM";i:-4;s:4:"NULL";i:-5;}s:18:"createCombinerFunc";C:32:"SuperClosure\SerializableClosure":135:{a:5:{s:4:"code";s:33:"function ($x) {
    return $x;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"mergeValueFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}s:18:"mergeCombinersFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1813:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":369:{a:5:{s:4:"code";s:76:"function ($any, $iterator) use($f) {
    return array_map($f, $iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":137:{a:5:{s:4:"code";s:43:"function ($x) {
    return array($x, 1);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1081:{a:5:{s:4:"code";s:758:"function ($split, $iterator) use($f) {
    $sub_is_array = False;
    foreach ($iterator as $key => $value) {
        $temp = $f($value);
        if (is_array($temp)) {
            $sub_is_array = True;
            break;
        }
    }
    if ($sub_is_array) {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            if (is_array($temp)) {
                foreach ($temp as $e) {
                    array_push($result, $e);
                }
            }
        }
        return $result;
    } else {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            array_push($result, $temp);
        }
        return $result;
    }
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":166:{a:5:{s:4:"code";s:72:"function ($line) {
    $temp = explode(' ', $line);
    return $temp;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}
socket_connect()成功
首次read_int()成功1
首次read_utf()成功5.6
here5
here6test test test test try try try 
here7 array
here7a string
here7a integer
here8  Array
here3C:32:"SuperClosure\SerializableClosure":6244:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":2084:{a:5:{s:4:"code";s:1630:"function ($split, $iterator) use($numPartitions, $partitionFunc, $limit, $outputSerializer) {
    $buckets = array();
    $c = 0;
    $batch = min(10 * $numPartitions, 1000);
    foreach ($iterator as $key => $value) {
        #wordcount为例，这是word=>count
        file_put_contents('/home/gt/php_worker9.txt', 'here0 ' . $key . ' ' . $value . '
', FILE_APPEND);
        $buckets[$partitionFunc($key) % $numPartitions] = array();
        $buckets[$partitionFunc($key) % $numPartitions][$key] = $value;
        $c++;
        if ($c % 1000 == 0 && memory_get_usage() / 1024 / 1024 > $limit || $c > $batch) {
            $n = sizeof($buckets);
            $size = 0;
            $result = array();
            foreach ($buckets as $key2 => $value2) {
                #value是一个array
                array_push($result, serialize($key2));
                $d = serialize($value2);
                unset($value2);
                array_push($result, $d);
                $size += strlen($d);
            }
            $avg = intval($size / $n) >> 20;
            # let 1M < avg < 10M
            if ($avg < 1) {
                $batch *= 1.5;
            } elseif ($avg > 10) {
                $batch = max(intval($batch / 1.5), 1);
            }
            $c = 0;
            return $result;
        }
    }
    $result = array();
    foreach ($buckets as $key => $value) {
        foreach ($value as $k => $v) {
            file_put_contents('/home/gt/php_worker9.txt', 'here1 ' . $k . ' ' . $v . '
', FILE_APPEND);
        }
        array_push($result, $k);
        array_push($result, $v);
    }
    return $result;
};";s:7:"context";a:3:{s:13:"numPartitions";i:2;s:13:"partitionFunc";C:32:"SuperClosure\SerializableClosure":240:{a:5:{s:4:"code";s:137:"function ($x) {
    if ($x == null) {
        return 0;
    }
    $h = null;
    if (is_array($x)) {
    }
    return hash('md5', $x);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:5:"limit";i:256;}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":3796:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":1619:{a:5:{s:4:"code";s:67:"function ($split, $iterator) use($f) {
    return $f($iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":1395:{a:5:{s:4:"code";s:332:"function ($iterator) use($memory, $serializer, $createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc) {
    $agg = new \aggregator($createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc);
    $merger = new \ExternalMerger($agg, $memory * 0.9, $serializer);
    $merger->mergeValues($iterator);
    return $merger->items();
};";s:7:"context";a:5:{s:6:"memory";i:512;s:10:"serializer";O:23:"auto_batched_serializer":10:{s:9:"best_size";i:65536;s:20:"UNLIMITED_BATCH_SIZE";i:-1;s:18:"UNKNOWN_BATCH_SIZE";i:0;s:10:"serializer";N;s:10:"batch_size";i:0;s:19:"END_OF_DATA_SECTION";i:-1;s:20:"PHP_EXCEPTION_THROWN";i:-2;s:11:"TIMING_DATA";i:-3;s:13:"END_OF_STREAM";i:-4;s:4:"NULL";i:-5;}s:18:"createCombinerFunc";C:32:"SuperClosure\SerializableClosure":135:{a:5:{s:4:"code";s:33:"function ($x) {
    return $x;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"mergeValueFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}s:18:"mergeCombinersFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1813:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":369:{a:5:{s:4:"code";s:76:"function ($any, $iterator) use($f) {
    return array_map($f, $iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":137:{a:5:{s:4:"code";s:43:"function ($x) {
    return array($x, 1);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1081:{a:5:{s:4:"code";s:758:"function ($split, $iterator) use($f) {
    $sub_is_array = False;
    foreach ($iterator as $key => $value) {
        $temp = $f($value);
        if (is_array($temp)) {
            $sub_is_array = True;
            break;
        }
    }
    if ($sub_is_array) {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            if (is_array($temp)) {
                foreach ($temp as $e) {
                    array_push($result, $e);
                }
            }
        }
        return $result;
    } else {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            array_push($result, $temp);
        }
        return $result;
    }
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":166:{a:5:{s:4:"code";s:72:"function ($line) {
    $temp = explode(' ', $line);
    return $temp;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}
here5
here6do do do 
here7 array
here7a string
here7a integer
here8  Array
socket_create()成功46952

socket_connect()成功
首次read_int()成功0
首次read_utf()成功5.6
here3C:32:"SuperClosure\SerializableClosure":6250:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":2090:{a:5:{s:4:"code";s:1636:"function ($split, $iterator) use($numPartitions, $partitionFunc, $limit, $outputSerializer) {
    $buckets = array();
    $c = 0;
    $batch = min(10 * $numPartitions, 1000);
    foreach ($iterator as $key => $value) {
        #wordcount为例，这是word=>count
        file_put_contents('/home/gt/php_worker9.txt', 'here0 ' . $key . ' ' . $value . '
', FILE_APPEND);
        $buckets[$partitionFunc($key) % $numPartitions] = array();
        $buckets[$partitionFunc($key) % $numPartitions][$key] = $value;
        $c++;
        if ($c % 1000 == 0 && memory_get_usage() / 1024 / 1024 > $limit || $c > $batch) {
            $n = sizeof($buckets);
            $size = 0;
            $result = array();
            foreach ($buckets as $key2 => $value2) {
                #value是一个array
                array_push($result, serialize($key2));
                $d = serialize($value2);
                unset($value2);
                array_push($result, $d);
                $size += strlen($d);
            }
            $avg = intval($size / $n) >> 20;
            # let 1M < avg < 10M
            if ($avg < 1) {
                $batch *= 1.5;
            } elseif ($avg > 10) {
                $batch = max(intval($batch / 1.5), 1);
            }
            $c = 0;
            return $result;
        }
    }
    $result = array();
    foreach ($buckets as $key => $value) {
        foreach ($value as $k => $v) {
            file_put_contents('/home/gt/php_worker9.txt', 'here1 ' . $k . ' ' . $v . '
', FILE_APPEND);
        }
        array_push($result, $key);
        array_push($result, $value);
    }
    return $result;
};";s:7:"context";a:3:{s:13:"numPartitions";i:2;s:13:"partitionFunc";C:32:"SuperClosure\SerializableClosure":240:{a:5:{s:4:"code";s:137:"function ($x) {
    if ($x == null) {
        return 0;
    }
    $h = null;
    if (is_array($x)) {
    }
    return hash('md5', $x);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:5:"limit";i:256;}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":3796:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":1619:{a:5:{s:4:"code";s:67:"function ($split, $iterator) use($f) {
    return $f($iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":1395:{a:5:{s:4:"code";s:332:"function ($iterator) use($memory, $serializer, $createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc) {
    $agg = new \aggregator($createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc);
    $merger = new \ExternalMerger($agg, $memory * 0.9, $serializer);
    $merger->mergeValues($iterator);
    return $merger->items();
};";s:7:"context";a:5:{s:6:"memory";i:512;s:10:"serializer";O:23:"auto_batched_serializer":10:{s:9:"best_size";i:65536;s:20:"UNLIMITED_BATCH_SIZE";i:-1;s:18:"UNKNOWN_BATCH_SIZE";i:0;s:10:"serializer";N;s:10:"batch_size";i:0;s:19:"END_OF_DATA_SECTION";i:-1;s:20:"PHP_EXCEPTION_THROWN";i:-2;s:11:"TIMING_DATA";i:-3;s:13:"END_OF_STREAM";i:-4;s:4:"NULL";i:-5;}s:18:"createCombinerFunc";C:32:"SuperClosure\SerializableClosure":135:{a:5:{s:4:"code";s:33:"function ($x) {
    return $x;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"mergeValueFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}s:18:"mergeCombinersFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1813:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":369:{a:5:{s:4:"code";s:76:"function ($any, $iterator) use($f) {
    return array_map($f, $iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":137:{a:5:{s:4:"code";s:43:"function ($x) {
    return array($x, 1);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1081:{a:5:{s:4:"code";s:758:"function ($split, $iterator) use($f) {
    $sub_is_array = False;
    foreach ($iterator as $key => $value) {
        $temp = $f($value);
        if (is_array($temp)) {
            $sub_is_array = True;
            break;
        }
    }
    if ($sub_is_array) {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            if (is_array($temp)) {
                foreach ($temp as $e) {
                    array_push($result, $e);
                }
            }
        }
        return $result;
    } else {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            array_push($result, $temp);
        }
        return $result;
    }
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":166:{a:5:{s:4:"code";s:72:"function ($line) {
    $temp = explode(' ', $line);
    return $temp;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}
here5
here6test test test test try try try 
here7 array
here7a integer
here7a array
here7b 1
here8  Array
socket_create()成功58493

socket_connect()成功
首次read_int()成功1
首次read_utf()成功5.6
here3C:32:"SuperClosure\SerializableClosure":6250:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":2090:{a:5:{s:4:"code";s:1636:"function ($split, $iterator) use($numPartitions, $partitionFunc, $limit, $outputSerializer) {
    $buckets = array();
    $c = 0;
    $batch = min(10 * $numPartitions, 1000);
    foreach ($iterator as $key => $value) {
        #wordcount为例，这是word=>count
        file_put_contents('/home/gt/php_worker9.txt', 'here0 ' . $key . ' ' . $value . '
', FILE_APPEND);
        $buckets[$partitionFunc($key) % $numPartitions] = array();
        $buckets[$partitionFunc($key) % $numPartitions][$key] = $value;
        $c++;
        if ($c % 1000 == 0 && memory_get_usage() / 1024 / 1024 > $limit || $c > $batch) {
            $n = sizeof($buckets);
            $size = 0;
            $result = array();
            foreach ($buckets as $key2 => $value2) {
                #value是一个array
                array_push($result, serialize($key2));
                $d = serialize($value2);
                unset($value2);
                array_push($result, $d);
                $size += strlen($d);
            }
            $avg = intval($size / $n) >> 20;
            # let 1M < avg < 10M
            if ($avg < 1) {
                $batch *= 1.5;
            } elseif ($avg > 10) {
                $batch = max(intval($batch / 1.5), 1);
            }
            $c = 0;
            return $result;
        }
    }
    $result = array();
    foreach ($buckets as $key => $value) {
        foreach ($value as $k => $v) {
            file_put_contents('/home/gt/php_worker9.txt', 'here1 ' . $k . ' ' . $v . '
', FILE_APPEND);
        }
        array_push($result, $key);
        array_push($result, $value);
    }
    return $result;
};";s:7:"context";a:3:{s:13:"numPartitions";i:2;s:13:"partitionFunc";C:32:"SuperClosure\SerializableClosure":240:{a:5:{s:4:"code";s:137:"function ($x) {
    if ($x == null) {
        return 0;
    }
    $h = null;
    if (is_array($x)) {
    }
    return hash('md5', $x);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:5:"limit";i:256;}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":3796:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":1619:{a:5:{s:4:"code";s:67:"function ($split, $iterator) use($f) {
    return $f($iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":1395:{a:5:{s:4:"code";s:332:"function ($iterator) use($memory, $serializer, $createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc) {
    $agg = new \aggregator($createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc);
    $merger = new \ExternalMerger($agg, $memory * 0.9, $serializer);
    $merger->mergeValues($iterator);
    return $merger->items();
};";s:7:"context";a:5:{s:6:"memory";i:512;s:10:"serializer";O:23:"auto_batched_serializer":10:{s:9:"best_size";i:65536;s:20:"UNLIMITED_BATCH_SIZE";i:-1;s:18:"UNKNOWN_BATCH_SIZE";i:0;s:10:"serializer";N;s:10:"batch_size";i:0;s:19:"END_OF_DATA_SECTION";i:-1;s:20:"PHP_EXCEPTION_THROWN";i:-2;s:11:"TIMING_DATA";i:-3;s:13:"END_OF_STREAM";i:-4;s:4:"NULL";i:-5;}s:18:"createCombinerFunc";C:32:"SuperClosure\SerializableClosure":135:{a:5:{s:4:"code";s:33:"function ($x) {
    return $x;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"mergeValueFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}s:18:"mergeCombinersFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1813:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":369:{a:5:{s:4:"code";s:76:"function ($any, $iterator) use($f) {
    return array_map($f, $iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":137:{a:5:{s:4:"code";s:43:"function ($x) {
    return array($x, 1);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1081:{a:5:{s:4:"code";s:758:"function ($split, $iterator) use($f) {
    $sub_is_array = False;
    foreach ($iterator as $key => $value) {
        $temp = $f($value);
        if (is_array($temp)) {
            $sub_is_array = True;
            break;
        }
    }
    if ($sub_is_array) {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            if (is_array($temp)) {
                foreach ($temp as $e) {
                    array_push($result, $e);
                }
            }
        }
        return $result;
    } else {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            array_push($result, $temp);
        }
        return $result;
    }
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":166:{a:5:{s:4:"code";s:72:"function ($line) {
    $temp = explode(' ', $line);
    return $temp;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}
here5
here6do do do 
here7 array
here7a integer
here7a array
here7b 1
here8  Array
socket_create()成功58065

socket_connect()成功
首次read_int()成功1
首次read_utf()成功5.6
here3C:32:"SuperClosure\SerializableClosure":6250:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":2090:{a:5:{s:4:"code";s:1636:"function ($split, $iterator) use($numPartitions, $partitionFunc, $limit, $outputSerializer) {
    $buckets = array();
    $c = 0;
    $batch = min(10 * $numPartitions, 1000);
    foreach ($iterator as $key => $value) {
        #wordcount为例，这是word=>count
        file_put_contents('/home/gt/php_worker9.txt', 'here0 ' . $key . ' ' . $value . '
', FILE_APPEND);
        $buckets[$partitionFunc($key) % $numPartitions] = array();
        $buckets[$partitionFunc($key) % $numPartitions][$key] = $value;
        $c++;
        if ($c % 1000 == 0 && memory_get_usage() / 1024 / 1024 > $limit || $c > $batch) {
            $n = sizeof($buckets);
            $size = 0;
            $result = array();
            foreach ($buckets as $key2 => $value2) {
                #value是一个array
                array_push($result, serialize($key2));
                $d = serialize($value2);
                unset($value2);
                array_push($result, $d);
                $size += strlen($d);
            }
            $avg = intval($size / $n) >> 20;
            # let 1M < avg < 10M
            if ($avg < 1) {
                $batch *= 1.5;
            } elseif ($avg > 10) {
                $batch = max(intval($batch / 1.5), 1);
            }
            $c = 0;
            return $result;
        }
    }
    $result = array();
    foreach ($buckets as $key => $value) {
        foreach ($value as $k => $v) {
            file_put_contents('/home/gt/php_worker9.txt', 'here1 ' . $k . ' ' . $v . '
', FILE_APPEND);
        }
        array_push($result, $key);
        array_push($result, $value);
    }
    return $result;
};";s:7:"context";a:3:{s:13:"numPartitions";i:2;s:13:"partitionFunc";C:32:"SuperClosure\SerializableClosure":240:{a:5:{s:4:"code";s:137:"function ($x) {
    if ($x == null) {
        return 0;
    }
    $h = null;
    if (is_array($x)) {
    }
    return hash('md5', $x);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:5:"limit";i:256;}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":3796:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":1619:{a:5:{s:4:"code";s:67:"function ($split, $iterator) use($f) {
    return $f($iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":1395:{a:5:{s:4:"code";s:332:"function ($iterator) use($memory, $serializer, $createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc) {
    $agg = new \aggregator($createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc);
    $merger = new \ExternalMerger($agg, $memory * 0.9, $serializer);
    $merger->mergeValues($iterator);
    return $merger->items();
};";s:7:"context";a:5:{s:6:"memory";i:512;s:10:"serializer";O:23:"auto_batched_serializer":10:{s:9:"best_size";i:65536;s:20:"UNLIMITED_BATCH_SIZE";i:-1;s:18:"UNKNOWN_BATCH_SIZE";i:0;s:10:"serializer";N;s:10:"batch_size";i:0;s:19:"END_OF_DATA_SECTION";i:-1;s:20:"PHP_EXCEPTION_THROWN";i:-2;s:11:"TIMING_DATA";i:-3;s:13:"END_OF_STREAM";i:-4;s:4:"NULL";i:-5;}s:18:"createCombinerFunc";C:32:"SuperClosure\SerializableClosure":135:{a:5:{s:4:"code";s:33:"function ($x) {
    return $x;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"mergeValueFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}s:18:"mergeCombinersFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1813:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":369:{a:5:{s:4:"code";s:76:"function ($any, $iterator) use($f) {
    return array_map($f, $iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":137:{a:5:{s:4:"code";s:43:"function ($x) {
    return array($x, 1);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1081:{a:5:{s:4:"code";s:758:"function ($split, $iterator) use($f) {
    $sub_is_array = False;
    foreach ($iterator as $key => $value) {
        $temp = $f($value);
        if (is_array($temp)) {
            $sub_is_array = True;
            break;
        }
    }
    if ($sub_is_array) {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            if (is_array($temp)) {
                foreach ($temp as $e) {
                    array_push($result, $e);
                }
            }
        }
        return $result;
    } else {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            array_push($result, $temp);
        }
        return $result;
    }
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":166:{a:5:{s:4:"code";s:72:"function ($line) {
    $temp = explode(' ', $line);
    return $temp;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}
here5
here6do do do 
here7 array
here7a integer
here7a array
here7b 1
here8  Array
socket_create()成功44133

socket_connect()成功
首次read_int()成功0
首次read_utf()成功5.6
here3C:32:"SuperClosure\SerializableClosure":6250:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":2090:{a:5:{s:4:"code";s:1636:"function ($split, $iterator) use($numPartitions, $partitionFunc, $limit, $outputSerializer) {
    $buckets = array();
    $c = 0;
    $batch = min(10 * $numPartitions, 1000);
    foreach ($iterator as $key => $value) {
        #wordcount为例，这是word=>count
        file_put_contents('/home/gt/php_worker9.txt', 'here0 ' . $key . ' ' . $value . '
', FILE_APPEND);
        $buckets[$partitionFunc($key) % $numPartitions] = array();
        $buckets[$partitionFunc($key) % $numPartitions][$key] = $value;
        $c++;
        if ($c % 1000 == 0 && memory_get_usage() / 1024 / 1024 > $limit || $c > $batch) {
            $n = sizeof($buckets);
            $size = 0;
            $result = array();
            foreach ($buckets as $key2 => $value2) {
                #value是一个array
                array_push($result, serialize($key2));
                $d = serialize($value2);
                unset($value2);
                array_push($result, $d);
                $size += strlen($d);
            }
            $avg = intval($size / $n) >> 20;
            # let 1M < avg < 10M
            if ($avg < 1) {
                $batch *= 1.5;
            } elseif ($avg > 10) {
                $batch = max(intval($batch / 1.5), 1);
            }
            $c = 0;
            return $result;
        }
    }
    $result = array();
    foreach ($buckets as $key => $value) {
        foreach ($value as $k => $v) {
            file_put_contents('/home/gt/php_worker9.txt', 'here1 ' . $k . ' ' . $v . '
', FILE_APPEND);
        }
        array_push($result, $key);
        array_push($result, $value);
    }
    return $result;
};";s:7:"context";a:3:{s:13:"numPartitions";i:2;s:13:"partitionFunc";C:32:"SuperClosure\SerializableClosure":240:{a:5:{s:4:"code";s:137:"function ($x) {
    if ($x == null) {
        return 0;
    }
    $h = null;
    if (is_array($x)) {
    }
    return hash('md5', $x);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:5:"limit";i:256;}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":3796:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":1619:{a:5:{s:4:"code";s:67:"function ($split, $iterator) use($f) {
    return $f($iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":1395:{a:5:{s:4:"code";s:332:"function ($iterator) use($memory, $serializer, $createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc) {
    $agg = new \aggregator($createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc);
    $merger = new \ExternalMerger($agg, $memory * 0.9, $serializer);
    $merger->mergeValues($iterator);
    return $merger->items();
};";s:7:"context";a:5:{s:6:"memory";i:512;s:10:"serializer";O:23:"auto_batched_serializer":10:{s:9:"best_size";i:65536;s:20:"UNLIMITED_BATCH_SIZE";i:-1;s:18:"UNKNOWN_BATCH_SIZE";i:0;s:10:"serializer";N;s:10:"batch_size";i:0;s:19:"END_OF_DATA_SECTION";i:-1;s:20:"PHP_EXCEPTION_THROWN";i:-2;s:11:"TIMING_DATA";i:-3;s:13:"END_OF_STREAM";i:-4;s:4:"NULL";i:-5;}s:18:"createCombinerFunc";C:32:"SuperClosure\SerializableClosure":135:{a:5:{s:4:"code";s:33:"function ($x) {
    return $x;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"mergeValueFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}s:18:"mergeCombinersFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1813:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":369:{a:5:{s:4:"code";s:76:"function ($any, $iterator) use($f) {
    return array_map($f, $iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":137:{a:5:{s:4:"code";s:43:"function ($x) {
    return array($x, 1);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1081:{a:5:{s:4:"code";s:758:"function ($split, $iterator) use($f) {
    $sub_is_array = False;
    foreach ($iterator as $key => $value) {
        $temp = $f($value);
        if (is_array($temp)) {
            $sub_is_array = True;
            break;
        }
    }
    if ($sub_is_array) {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            if (is_array($temp)) {
                foreach ($temp as $e) {
                    array_push($result, $e);
                }
            }
        }
        return $result;
    } else {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            array_push($result, $temp);
        }
        return $result;
    }
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":166:{a:5:{s:4:"code";s:72:"function ($line) {
    $temp = explode(' ', $line);
    return $temp;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}
here5
here6test test test test try try try 
here7 array
here7a integer
here7a array
here7b 1
here8  Array
socket_create()成功52330

socket_connect()成功
首次read_int()成功1
首次read_utf()成功5.6
socket_create()成功46509

socket_connect()成功
here3C:32:"SuperClosure\SerializableClosure":6250:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":2090:{a:5:{s:4:"code";s:1636:"function ($split, $iterator) use($numPartitions, $partitionFunc, $limit, $outputSerializer) {
    $buckets = array();
    $c = 0;
    $batch = min(10 * $numPartitions, 1000);
    foreach ($iterator as $key => $value) {
        #wordcount为例，这是word=>count
        file_put_contents('/home/gt/php_worker9.txt', 'here0 ' . $key . ' ' . $value . '
', FILE_APPEND);
        $buckets[$partitionFunc($key) % $numPartitions] = array();
        $buckets[$partitionFunc($key) % $numPartitions][$key] = $value;
        $c++;
        if ($c % 1000 == 0 && memory_get_usage() / 1024 / 1024 > $limit || $c > $batch) {
            $n = sizeof($buckets);
            $size = 0;
            $result = array();
            foreach ($buckets as $key2 => $value2) {
                #value是一个array
                array_push($result, serialize($key2));
                $d = serialize($value2);
                unset($value2);
                array_push($result, $d);
                $size += strlen($d);
            }
            $avg = intval($size / $n) >> 20;
            # let 1M < avg < 10M
            if ($avg < 1) {
                $batch *= 1.5;
            } elseif ($avg > 10) {
                $batch = max(intval($batch / 1.5), 1);
            }
            $c = 0;
            return $result;
        }
    }
    $result = array();
    foreach ($buckets as $key => $value) {
        foreach ($value as $k => $v) {
            file_put_contents('/home/gt/php_worker9.txt', 'here1 ' . $k . ' ' . $v . '
', FILE_APPEND);
        }
        array_push($result, $key);
        array_push($result, $value);
    }
    return $result;
};";s:7:"context";a:3:{s:13:"numPartitions";i:2;s:13:"partitionFunc";C:32:"SuperClosure\SerializableClosure":240:{a:5:{s:4:"code";s:137:"function ($x) {
    if ($x == null) {
        return 0;
    }
    $h = null;
    if (is_array($x)) {
    }
    return hash('md5', $x);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:5:"limit";i:256;}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":3796:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":1619:{a:5:{s:4:"code";s:67:"function ($split, $iterator) use($f) {
    return $f($iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":1395:{a:5:{s:4:"code";s:332:"function ($iterator) use($memory, $serializer, $createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc) {
    $agg = new \aggregator($createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc);
    $merger = new \ExternalMerger($agg, $memory * 0.9, $serializer);
    $merger->mergeValues($iterator);
    return $merger->items();
};";s:7:"context";a:5:{s:6:"memory";i:512;s:10:"serializer";O:23:"auto_batched_serializer":10:{s:9:"best_size";i:65536;s:20:"UNLIMITED_BATCH_SIZE";i:-1;s:18:"UNKNOWN_BATCH_SIZE";i:0;s:10:"serializer";N;s:10:"batch_size";i:0;s:19:"END_OF_DATA_SECTION";i:-1;s:20:"PHP_EXCEPTION_THROWN";i:-2;s:11:"TIMING_DATA";i:-3;s:13:"END_OF_STREAM";i:-4;s:4:"NULL";i:-5;}s:18:"createCombinerFunc";C:32:"SuperClosure\SerializableClosure":135:{a:5:{s:4:"code";s:33:"function ($x) {
    return $x;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"mergeValueFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}s:18:"mergeCombinersFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1813:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":369:{a:5:{s:4:"code";s:76:"function ($any, $iterator) use($f) {
    return array_map($f, $iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":137:{a:5:{s:4:"code";s:43:"function ($x) {
    return array($x, 1);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1081:{a:5:{s:4:"code";s:758:"function ($split, $iterator) use($f) {
    $sub_is_array = False;
    foreach ($iterator as $key => $value) {
        $temp = $f($value);
        if (is_array($temp)) {
            $sub_is_array = True;
            break;
        }
    }
    if ($sub_is_array) {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            if (is_array($temp)) {
                foreach ($temp as $e) {
                    array_push($result, $e);
                }
            }
        }
        return $result;
    } else {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            array_push($result, $temp);
        }
        return $result;
    }
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":166:{a:5:{s:4:"code";s:72:"function ($line) {
    $temp = explode(' ', $line);
    return $temp;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}
here5
here6do do do 
here7 array
here7a integer
here7a array
here7b 1
here8  Array
首次read_int()成功0
首次read_utf()成功5.6
here3C:32:"SuperClosure\SerializableClosure":6250:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":2090:{a:5:{s:4:"code";s:1636:"function ($split, $iterator) use($numPartitions, $partitionFunc, $limit, $outputSerializer) {
    $buckets = array();
    $c = 0;
    $batch = min(10 * $numPartitions, 1000);
    foreach ($iterator as $key => $value) {
        #wordcount为例，这是word=>count
        file_put_contents('/home/gt/php_worker9.txt', 'here0 ' . $key . ' ' . $value . '
', FILE_APPEND);
        $buckets[$partitionFunc($key) % $numPartitions] = array();
        $buckets[$partitionFunc($key) % $numPartitions][$key] = $value;
        $c++;
        if ($c % 1000 == 0 && memory_get_usage() / 1024 / 1024 > $limit || $c > $batch) {
            $n = sizeof($buckets);
            $size = 0;
            $result = array();
            foreach ($buckets as $key2 => $value2) {
                #value是一个array
                array_push($result, serialize($key2));
                $d = serialize($value2);
                unset($value2);
                array_push($result, $d);
                $size += strlen($d);
            }
            $avg = intval($size / $n) >> 20;
            # let 1M < avg < 10M
            if ($avg < 1) {
                $batch *= 1.5;
            } elseif ($avg > 10) {
                $batch = max(intval($batch / 1.5), 1);
            }
            $c = 0;
            return $result;
        }
    }
    $result = array();
    foreach ($buckets as $key => $value) {
        foreach ($value as $k => $v) {
            file_put_contents('/home/gt/php_worker9.txt', 'here1 ' . $k . ' ' . $v . '
', FILE_APPEND);
        }
        array_push($result, $key);
        array_push($result, $value);
    }
    return $result;
};";s:7:"context";a:3:{s:13:"numPartitions";i:2;s:13:"partitionFunc";C:32:"SuperClosure\SerializableClosure":240:{a:5:{s:4:"code";s:137:"function ($x) {
    if ($x == null) {
        return 0;
    }
    $h = null;
    if (is_array($x)) {
    }
    return hash('md5', $x);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:5:"limit";i:256;}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":3796:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":1619:{a:5:{s:4:"code";s:67:"function ($split, $iterator) use($f) {
    return $f($iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":1395:{a:5:{s:4:"code";s:332:"function ($iterator) use($memory, $serializer, $createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc) {
    $agg = new \aggregator($createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc);
    $merger = new \ExternalMerger($agg, $memory * 0.9, $serializer);
    $merger->mergeValues($iterator);
    return $merger->items();
};";s:7:"context";a:5:{s:6:"memory";i:512;s:10:"serializer";O:23:"auto_batched_serializer":10:{s:9:"best_size";i:65536;s:20:"UNLIMITED_BATCH_SIZE";i:-1;s:18:"UNKNOWN_BATCH_SIZE";i:0;s:10:"serializer";N;s:10:"batch_size";i:0;s:19:"END_OF_DATA_SECTION";i:-1;s:20:"PHP_EXCEPTION_THROWN";i:-2;s:11:"TIMING_DATA";i:-3;s:13:"END_OF_STREAM";i:-4;s:4:"NULL";i:-5;}s:18:"createCombinerFunc";C:32:"SuperClosure\SerializableClosure":135:{a:5:{s:4:"code";s:33:"function ($x) {
    return $x;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"mergeValueFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}s:18:"mergeCombinersFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1813:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":369:{a:5:{s:4:"code";s:76:"function ($any, $iterator) use($f) {
    return array_map($f, $iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":137:{a:5:{s:4:"code";s:43:"function ($x) {
    return array($x, 1);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1081:{a:5:{s:4:"code";s:758:"function ($split, $iterator) use($f) {
    $sub_is_array = False;
    foreach ($iterator as $key => $value) {
        $temp = $f($value);
        if (is_array($temp)) {
            $sub_is_array = True;
            break;
        }
    }
    if ($sub_is_array) {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            if (is_array($temp)) {
                foreach ($temp as $e) {
                    array_push($result, $e);
                }
            }
        }
        return $result;
    } else {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            array_push($result, $temp);
        }
        return $result;
    }
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":166:{a:5:{s:4:"code";s:72:"function ($line) {
    $temp = explode(' ', $line);
    return $temp;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}
here5
here6test test test test try try try 
here7 array
here7a integer
here7a array
here7b 1
here8  Array
socket_create()成功60563

socket_connect()成功
首次read_int()成功1
首次read_utf()成功5.6
here3C:32:"SuperClosure\SerializableClosure":6250:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":2090:{a:5:{s:4:"code";s:1636:"function ($split, $iterator) use($numPartitions, $partitionFunc, $limit, $outputSerializer) {
    $buckets = array();
    $c = 0;
    $batch = min(10 * $numPartitions, 1000);
    foreach ($iterator as $key => $value) {
        #wordcount为例，这是word=>count
        file_put_contents('/home/gt/php_worker9.txt', 'here0 ' . $key . ' ' . $value . '
', FILE_APPEND);
        $buckets[$partitionFunc($key) % $numPartitions] = array();
        $buckets[$partitionFunc($key) % $numPartitions][$key] = $value;
        $c++;
        if ($c % 1000 == 0 && memory_get_usage() / 1024 / 1024 > $limit || $c > $batch) {
            $n = sizeof($buckets);
            $size = 0;
            $result = array();
            foreach ($buckets as $key2 => $value2) {
                #value是一个array
                array_push($result, serialize($key2));
                $d = serialize($value2);
                unset($value2);
                array_push($result, $d);
                $size += strlen($d);
            }
            $avg = intval($size / $n) >> 20;
            # let 1M < avg < 10M
            if ($avg < 1) {
                $batch *= 1.5;
            } elseif ($avg > 10) {
                $batch = max(intval($batch / 1.5), 1);
            }
            $c = 0;
            return $result;
        }
    }
    $result = array();
    foreach ($buckets as $key => $value) {
        foreach ($value as $k => $v) {
            file_put_contents('/home/gt/php_worker9.txt', 'here1 ' . $k . ' ' . $v . '
', FILE_APPEND);
        }
        array_push($result, $key);
        array_push($result, $value);
    }
    return $result;
};";s:7:"context";a:3:{s:13:"numPartitions";i:2;s:13:"partitionFunc";C:32:"SuperClosure\SerializableClosure":240:{a:5:{s:4:"code";s:137:"function ($x) {
    if ($x == null) {
        return 0;
    }
    $h = null;
    if (is_array($x)) {
    }
    return hash('md5', $x);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:5:"limit";i:256;}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":3796:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":1619:{a:5:{s:4:"code";s:67:"function ($split, $iterator) use($f) {
    return $f($iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":1395:{a:5:{s:4:"code";s:332:"function ($iterator) use($memory, $serializer, $createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc) {
    $agg = new \aggregator($createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc);
    $merger = new \ExternalMerger($agg, $memory * 0.9, $serializer);
    $merger->mergeValues($iterator);
    return $merger->items();
};";s:7:"context";a:5:{s:6:"memory";i:512;s:10:"serializer";O:23:"auto_batched_serializer":10:{s:9:"best_size";i:65536;s:20:"UNLIMITED_BATCH_SIZE";i:-1;s:18:"UNKNOWN_BATCH_SIZE";i:0;s:10:"serializer";N;s:10:"batch_size";i:0;s:19:"END_OF_DATA_SECTION";i:-1;s:20:"PHP_EXCEPTION_THROWN";i:-2;s:11:"TIMING_DATA";i:-3;s:13:"END_OF_STREAM";i:-4;s:4:"NULL";i:-5;}s:18:"createCombinerFunc";C:32:"SuperClosure\SerializableClosure":135:{a:5:{s:4:"code";s:33:"function ($x) {
    return $x;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"mergeValueFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}s:18:"mergeCombinersFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1813:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":369:{a:5:{s:4:"code";s:76:"function ($any, $iterator) use($f) {
    return array_map($f, $iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":137:{a:5:{s:4:"code";s:43:"function ($x) {
    return array($x, 1);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1081:{a:5:{s:4:"code";s:758:"function ($split, $iterator) use($f) {
    $sub_is_array = False;
    foreach ($iterator as $key => $value) {
        $temp = $f($value);
        if (is_array($temp)) {
            $sub_is_array = True;
            break;
        }
    }
    if ($sub_is_array) {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            if (is_array($temp)) {
                foreach ($temp as $e) {
                    array_push($result, $e);
                }
            }
        }
        return $result;
    } else {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            array_push($result, $temp);
        }
        return $result;
    }
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":166:{a:5:{s:4:"code";s:72:"function ($line) {
    $temp = explode(' ', $line);
    return $temp;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}
here5
here6do do do 
here7 array
here7a integer
here7a array
here7b 1
here8  Array
socket_create()成功49674

socket_connect()成功
首次read_int()成功0
首次read_utf()成功5.6
here3C:32:"SuperClosure\SerializableClosure":6250:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":2090:{a:5:{s:4:"code";s:1636:"function ($split, $iterator) use($numPartitions, $partitionFunc, $limit, $outputSerializer) {
    $buckets = array();
    $c = 0;
    $batch = min(10 * $numPartitions, 1000);
    foreach ($iterator as $key => $value) {
        #wordcount为例，这是word=>count
        file_put_contents('/home/gt/php_worker9.txt', 'here0 ' . $key . ' ' . $value . '
', FILE_APPEND);
        $buckets[$partitionFunc($key) % $numPartitions] = array();
        $buckets[$partitionFunc($key) % $numPartitions][$key] = $value;
        $c++;
        if ($c % 1000 == 0 && memory_get_usage() / 1024 / 1024 > $limit || $c > $batch) {
            $n = sizeof($buckets);
            $size = 0;
            $result = array();
            foreach ($buckets as $key2 => $value2) {
                #value是一个array
                array_push($result, serialize($key2));
                $d = serialize($value2);
                unset($value2);
                array_push($result, $d);
                $size += strlen($d);
            }
            $avg = intval($size / $n) >> 20;
            # let 1M < avg < 10M
            if ($avg < 1) {
                $batch *= 1.5;
            } elseif ($avg > 10) {
                $batch = max(intval($batch / 1.5), 1);
            }
            $c = 0;
            return $result;
        }
    }
    $result = array();
    foreach ($buckets as $key => $value) {
        foreach ($value as $k => $v) {
            file_put_contents('/home/gt/php_worker9.txt', 'here1 ' . $k . ' ' . $v . '
', FILE_APPEND);
        }
        array_push($result, $key);
        array_push($result, $value);
    }
    return $result;
};";s:7:"context";a:3:{s:13:"numPartitions";i:2;s:13:"partitionFunc";C:32:"SuperClosure\SerializableClosure":240:{a:5:{s:4:"code";s:137:"function ($x) {
    if ($x == null) {
        return 0;
    }
    $h = null;
    if (is_array($x)) {
    }
    return hash('md5', $x);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:5:"limit";i:256;}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":3796:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":1619:{a:5:{s:4:"code";s:67:"function ($split, $iterator) use($f) {
    return $f($iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":1395:{a:5:{s:4:"code";s:332:"function ($iterator) use($memory, $serializer, $createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc) {
    $agg = new \aggregator($createCombinerFunc, $mergeValueFunc, $mergeCombinersFunc);
    $merger = new \ExternalMerger($agg, $memory * 0.9, $serializer);
    $merger->mergeValues($iterator);
    return $merger->items();
};";s:7:"context";a:5:{s:6:"memory";i:512;s:10:"serializer";O:23:"auto_batched_serializer":10:{s:9:"best_size";i:65536;s:20:"UNLIMITED_BATCH_SIZE";i:-1;s:18:"UNKNOWN_BATCH_SIZE";i:0;s:10:"serializer";N;s:10:"batch_size";i:0;s:19:"END_OF_DATA_SECTION";i:-1;s:20:"PHP_EXCEPTION_THROWN";i:-2;s:11:"TIMING_DATA";i:-3;s:13:"END_OF_STREAM";i:-4;s:4:"NULL";i:-5;}s:18:"createCombinerFunc";C:32:"SuperClosure\SerializableClosure":135:{a:5:{s:4:"code";s:33:"function ($x) {
    return $x;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"mergeValueFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}s:18:"mergeCombinersFunc";C:32:"SuperClosure\SerializableClosure":140:{a:5:{s:4:"code";s:46:"function ($x1, $x2) {
    return $x1 + $x2;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1813:{a:5:{s:4:"code";s:123:"function ($split, $iterator) use($func, $temp_prev_func) {
    return $func($split, $temp_prev_func($split, $iterator));
};";s:7:"context";a:2:{s:4:"func";C:32:"SuperClosure\SerializableClosure":369:{a:5:{s:4:"code";s:76:"function ($any, $iterator) use($f) {
    return array_map($f, $iterator);
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":137:{a:5:{s:4:"code";s:43:"function ($x) {
    return array($x, 1);
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}s:14:"temp_prev_func";C:32:"SuperClosure\SerializableClosure":1081:{a:5:{s:4:"code";s:758:"function ($split, $iterator) use($f) {
    $sub_is_array = False;
    foreach ($iterator as $key => $value) {
        $temp = $f($value);
        if (is_array($temp)) {
            $sub_is_array = True;
            break;
        }
    }
    if ($sub_is_array) {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            if (is_array($temp)) {
                foreach ($temp as $e) {
                    array_push($result, $e);
                }
            }
        }
        return $result;
    } else {
        $result = array();
        foreach ($iterator as $key => $value) {
            $temp = $f($value);
            array_push($result, $temp);
        }
        return $result;
    }
};";s:7:"context";a:1:{s:1:"f";C:32:"SuperClosure\SerializableClosure":166:{a:5:{s:4:"code";s:72:"function ($line) {
    $temp = explode(' ', $line);
    return $temp;
};";s:7:"context";a:0:{}s:7:"binding";N;s:5:"scope";N;s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:3:"rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}}s:7:"binding";N;s:5:"scope";s:13:"pipelined_rdd";s:8:"isStatic";b:0;}}
here5
here6test test test test try try try 
here7 array
here7a integer
here7a array
here7b 1
here8  Array
